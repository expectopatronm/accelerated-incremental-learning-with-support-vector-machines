-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predict_tiled is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    predict_in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    predict_in_stream_TVALID : IN STD_LOGIC;
    predict_in_stream_TREADY : OUT STD_LOGIC;
    predict_in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    predict_in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    predict_in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    predict_in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    predict_in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    predict_in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    supp_vec_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    supp_vec_stream_TVALID : IN STD_LOGIC;
    supp_vec_stream_TREADY : OUT STD_LOGIC;
    supp_vec_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    supp_vec_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    supp_vec_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    dual_coef_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    dual_coef_stream_TVALID : IN STD_LOGIC;
    dual_coef_stream_TREADY : OUT STD_LOGIC;
    dual_coef_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dual_coef_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    dual_coef_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    predict_out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    predict_out_stream_TVALID : OUT STD_LOGIC;
    predict_out_stream_TREADY : IN STD_LOGIC;
    predict_out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    predict_out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    predict_out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    predict_out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    predict_out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    predict_out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of predict_tiled is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "predict_tiled,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=280,HLS_SYN_DSP=20,HLS_SYN_FF=3124,HLS_SYN_LUT=4222,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (88 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (88 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (88 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (88 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (88 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (88 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (88 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (88 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (88 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (88 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (88 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_310 : STD_LOGIC_VECTOR (16 downto 0) := "00000001100010000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_310 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal predict_in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_in_stream_data_V_0_vld_in : STD_LOGIC;
    signal predict_in_stream_data_V_0_vld_out : STD_LOGIC;
    signal predict_in_stream_data_V_0_ack_in : STD_LOGIC;
    signal predict_in_stream_data_V_0_ack_out : STD_LOGIC;
    signal predict_in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal predict_in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal predict_in_stream_data_V_0_sel : STD_LOGIC;
    signal predict_in_stream_data_V_0_load_A : STD_LOGIC;
    signal predict_in_stream_data_V_0_load_B : STD_LOGIC;
    signal predict_in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal predict_in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal predict_in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal predict_in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal supp_vec_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_vld_in : STD_LOGIC;
    signal supp_vec_stream_data_V_0_vld_out : STD_LOGIC;
    signal supp_vec_stream_data_V_0_ack_in : STD_LOGIC;
    signal supp_vec_stream_data_V_0_ack_out : STD_LOGIC;
    signal supp_vec_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal supp_vec_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal supp_vec_stream_data_V_0_sel : STD_LOGIC;
    signal supp_vec_stream_data_V_0_load_A : STD_LOGIC;
    signal supp_vec_stream_data_V_0_load_B : STD_LOGIC;
    signal supp_vec_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal supp_vec_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_vld_in : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_ack_out : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dual_coef_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_vld_in : STD_LOGIC;
    signal dual_coef_stream_data_V_0_vld_out : STD_LOGIC;
    signal dual_coef_stream_data_V_0_ack_in : STD_LOGIC;
    signal dual_coef_stream_data_V_0_ack_out : STD_LOGIC;
    signal dual_coef_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal dual_coef_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal dual_coef_stream_data_V_0_sel : STD_LOGIC;
    signal dual_coef_stream_data_V_0_load_A : STD_LOGIC;
    signal dual_coef_stream_data_V_0_load_B : STD_LOGIC;
    signal dual_coef_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dual_coef_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_vld_in : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_ack_out : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_out_stream_data_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_data_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_data_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_data_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal predict_out_stream_data_V_1_sel : STD_LOGIC;
    signal predict_out_stream_data_V_1_load_A : STD_LOGIC;
    signal predict_out_stream_data_V_1_load_B : STD_LOGIC;
    signal predict_out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal predict_out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal predict_out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_keep_V_1_sel : STD_LOGIC;
    signal predict_out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal predict_out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_strb_V_1_sel : STD_LOGIC;
    signal predict_out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal predict_out_stream_user_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_user_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_user_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_user_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_user_V_1_sel : STD_LOGIC;
    signal predict_out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal predict_out_stream_last_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_last_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_last_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_last_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal predict_out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal predict_out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal predict_out_stream_last_V_1_sel : STD_LOGIC;
    signal predict_out_stream_last_V_1_load_A : STD_LOGIC;
    signal predict_out_stream_last_V_1_load_B : STD_LOGIC;
    signal predict_out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal predict_out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal predict_out_stream_id_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_id_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_id_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_id_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_id_V_1_sel : STD_LOGIC;
    signal predict_out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal predict_out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal predict_out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal predict_out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal predict_out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal predict_out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal predict_out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal predict_out_stream_dest_V_1_sel : STD_LOGIC;
    signal predict_out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal length_x : STD_LOGIC_VECTOR (31 downto 0);
    signal length_dc : STD_LOGIC_VECTOR (31 downto 0);
    signal predict_in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal supp_vec_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal dual_coef_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal predict_out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal length_dc_read_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_x_read_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal SVCF_TILE_COUNT_cast_reg_982 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal INPUT_TILE_COUNT_cas_reg_988 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal SVCF_TILE_COUNT_1_fu_665_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal SVCF_TILE_COUNT_1_reg_994 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal INPUT_TILE_COUNT_1_fu_687_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal INPUT_TILE_COUNT_1_reg_1000 : STD_LOGIC_VECTOR (25 downto 0);
    signal n_1_fu_699_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal n_1_reg_1008 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal next_mul_fu_705_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1013 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_1_fu_717_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1021 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1026 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_1034 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_s_fu_743_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_reg_1039 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul1_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_1_fu_782_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_1_reg_1053 : STD_LOGIC_VECTOR (25 downto 0);
    signal next_mul2_fu_788_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul2_reg_1058 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i_2_fu_800_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_1066 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_812_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_1074 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_9_fu_822_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_reg_1079 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_841_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_reg_1084 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal next_mul3_fu_845_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul3_reg_1089 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_2_fu_861_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal n_2_reg_1100 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal m_1_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_878_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul4_reg_1110 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal l_1_fu_890_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_reg_1118 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dual_coef_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_buf_load_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal i_4_fu_907_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_1136 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_i_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal supp_vecs_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vecs_buf_load_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal input_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_load_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal os_idx_2_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal os_idx_2_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_block_state87 : BOOLEAN;
    signal exitcond6_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_963_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_buf_ce0 : STD_LOGIC;
    signal input_buf_we0 : STD_LOGIC;
    signal input_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vecs_buf_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal supp_vecs_buf_ce0 : STD_LOGIC;
    signal supp_vecs_buf_we0 : STD_LOGIC;
    signal supp_vecs_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dual_coef_buf_ce0 : STD_LOGIC;
    signal dual_coef_buf_we0 : STD_LOGIC;
    signal dual_coef_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_buf_ce0 : STD_LOGIC;
    signal result_buf_we0 : STD_LOGIC;
    signal result_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_360 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_382 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_394 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_reg_405 : STD_LOGIC_VECTOR (25 downto 0);
    signal exitcond2_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_428 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul2_reg_439 : STD_LOGIC_VECTOR (16 downto 0);
    signal j2_reg_451 : STD_LOGIC_VECTOR (9 downto 0);
    signal m1_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal n3_reg_497 : STD_LOGIC_VECTOR (28 downto 0);
    signal result_1_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_520 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul4_reg_531 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_i_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal os_idx_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_577_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_583_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul1_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_fu_615_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_634_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_650_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SVCF_TILE_COUNT_fu_660_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_TILE_COUNT_fu_682_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_cast_fu_739_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_cast_fu_818_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_i_cast_fu_917_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_fu_921_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_i_cast1_fu_913_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_931_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_577_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_600_ap_start : STD_LOGIC;
    signal grp_fu_600_ap_done : STD_LOGIC;
    signal grp_fu_606_ap_start : STD_LOGIC;
    signal grp_fu_606_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (88 downto 0);
    signal mul1_fu_615_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_fu_634_p10 : STD_LOGIC_VECTOR (64 downto 0);

    component predict_tiled_fadfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_fmug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_fexhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_ureibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component predict_tiled_urejbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component predict_tiled_inpbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_supcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_duadEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_reseOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_tiled_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        length_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_dc : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    predict_tiled_CONTROL_BUS_s_axi_U : component predict_tiled_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        length_x => length_x,
        length_dc => length_dc);

    input_buf_U : component predict_tiled_inpbkb
    generic map (
        DataWidth => 32,
        AddressRange => 78400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_buf_address0,
        ce0 => input_buf_ce0,
        we0 => input_buf_we0,
        d0 => input_buf_d0,
        q0 => input_buf_q0);

    supp_vecs_buf_U : component predict_tiled_supcud
    generic map (
        DataWidth => 32,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => supp_vecs_buf_address0,
        ce0 => supp_vecs_buf_ce0,
        we0 => supp_vecs_buf_we0,
        d0 => supp_vecs_buf_d0,
        q0 => supp_vecs_buf_q0);

    dual_coef_buf_U : component predict_tiled_duadEe
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dual_coef_buf_address0,
        ce0 => dual_coef_buf_ce0,
        we0 => dual_coef_buf_we0,
        d0 => dual_coef_buf_d0,
        q0 => dual_coef_buf_q0);

    result_buf_U : component predict_tiled_reseOg
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_buf_address0,
        ce0 => result_buf_ce0,
        we0 => result_buf_we0,
        d0 => result_reg_484,
        q0 => result_buf_q0);

    predict_tiled_fadfYi_U1 : component predict_tiled_fadfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_577_p0,
        din1 => grp_fu_577_p1,
        opcode => grp_fu_577_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    predict_tiled_fmug8j_U2 : component predict_tiled_fmug8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_583_p0,
        din1 => grp_fu_583_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_583_p2);

    predict_tiled_fexhbi_U3 : component predict_tiled_fexhbi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => reg_594,
        ce => ap_const_logic_1,
        dout => grp_fu_589_p2);

    predict_tiled_ureibs_U4 : component predict_tiled_ureibs
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_600_ap_start,
        done => grp_fu_600_ap_done,
        din0 => length_dc,
        din1 => grp_fu_600_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_600_p2);

    predict_tiled_urejbC_U5 : component predict_tiled_urejbC
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_606_ap_start,
        done => grp_fu_606_ap_done,
        din0 => length_x,
        din1 => grp_fu_606_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_606_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((dual_coef_stream_data_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        dual_coef_stream_data_V_0_sel_rd <= not(dual_coef_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((dual_coef_stream_data_V_0_ack_in = ap_const_logic_1) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        dual_coef_stream_data_V_0_sel_wr <= not(dual_coef_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((dual_coef_stream_data_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_data_V_0_state = ap_const_lv2_2)) or ((dual_coef_stream_data_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_data_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1) and (dual_coef_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((dual_coef_stream_data_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1))) and (dual_coef_stream_data_V_0_state = ap_const_lv2_3)) or ((dual_coef_stream_data_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_data_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_data_V_0_vld_in = ap_const_logic_1) and (dual_coef_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_2)) or ((dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1))) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_3)) or ((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_2)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((predict_in_stream_data_V_0_ack_out = ap_const_logic_1) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        predict_in_stream_data_V_0_sel_rd <= not(predict_in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((predict_in_stream_data_V_0_ack_in = ap_const_logic_1) and (predict_in_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        predict_in_stream_data_V_0_sel_wr <= not(predict_in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    predict_in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((predict_in_stream_data_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_data_V_0_state = ap_const_lv2_2)) or ((predict_in_stream_data_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_data_V_0_ack_out = ap_const_logic_1) and (predict_in_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    predict_in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((predict_in_stream_data_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_data_V_0_state = ap_const_lv2_1)) or ((predict_in_stream_data_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_data_V_0_vld_in = ap_const_logic_1) and (predict_in_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    predict_in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((predict_in_stream_data_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((predict_in_stream_data_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_data_V_0_vld_in = ap_const_logic_1))) and (predict_in_stream_data_V_0_state = ap_const_lv2_3)) or ((predict_in_stream_data_V_0_ack_out = ap_const_logic_1) and (predict_in_stream_data_V_0_state = ap_const_lv2_1)) or ((predict_in_stream_data_V_0_vld_in = ap_const_logic_1) and (predict_in_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    predict_in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    predict_in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((predict_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_dest_V_0_state = ap_const_lv2_2)) or ((predict_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_dest_V_0_ack_out = ap_const_logic_1) and (predict_in_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    predict_in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((predict_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_dest_V_0_state = ap_const_lv2_1)) or ((predict_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_dest_V_0_vld_in = ap_const_logic_1) and (predict_in_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    predict_in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((predict_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (predict_in_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((predict_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (predict_in_stream_dest_V_0_vld_in = ap_const_logic_1))) and (predict_in_stream_dest_V_0_state = ap_const_lv2_3)) or ((predict_in_stream_dest_V_0_ack_out = ap_const_logic_1) and (predict_in_stream_dest_V_0_state = ap_const_lv2_1)) or ((predict_in_stream_dest_V_0_vld_in = ap_const_logic_1) and (predict_in_stream_dest_V_0_state = ap_const_lv2_2)))) then 
                    predict_in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    predict_in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_data_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_data_V_1_sel_rd <= not(predict_out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((predict_out_stream_data_V_1_ack_in = ap_const_logic_1) and (predict_out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        predict_out_stream_data_V_1_sel_wr <= not(predict_out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_data_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_data_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_data_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_data_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_data_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_data_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_data_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_data_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_data_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_data_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_data_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_data_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_data_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_data_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_data_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_data_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_data_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_data_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_dest_V_1_sel_rd <= not(predict_out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_dest_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_dest_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_dest_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_dest_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_dest_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_dest_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_dest_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_dest_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_dest_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_dest_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_dest_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_id_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_id_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_id_V_1_sel_rd <= not(predict_out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_id_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_id_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_id_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_id_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_id_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_id_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_id_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_id_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_id_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_id_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_id_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_id_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_id_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_id_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_id_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_id_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_id_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_id_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_id_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_keep_V_1_sel_rd <= not(predict_out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_keep_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_keep_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_keep_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_keep_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_keep_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_keep_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_keep_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_keep_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_keep_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_keep_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_keep_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_last_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_last_V_1_sel_rd <= not(predict_out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((predict_out_stream_last_V_1_ack_in = ap_const_logic_1) and (predict_out_stream_last_V_1_vld_in = ap_const_logic_1))) then 
                                        predict_out_stream_last_V_1_sel_wr <= not(predict_out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_last_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_last_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_last_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_last_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_last_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_last_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_last_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_last_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_last_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_last_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_last_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_last_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_last_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_last_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_last_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_last_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_last_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_last_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_strb_V_1_sel_rd <= not(predict_out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_strb_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_strb_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_strb_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_strb_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_strb_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_strb_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_strb_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_strb_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_strb_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_strb_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_strb_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((predict_out_stream_user_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        predict_out_stream_user_V_1_sel_rd <= not(predict_out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    predict_out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                predict_out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((predict_out_stream_user_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_user_V_1_state = ap_const_lv2_2)) or ((predict_out_stream_user_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_user_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_user_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((predict_out_stream_user_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_user_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_user_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_user_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_user_V_1_state = ap_const_lv2_3)))) then 
                    predict_out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((predict_out_stream_user_V_1_vld_in = ap_const_logic_0) and (predict_out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((predict_out_stream_user_V_1_ack_out = ap_const_logic_0) and (predict_out_stream_user_V_1_vld_in = ap_const_logic_1))) and (predict_out_stream_user_V_1_state = ap_const_lv2_3)) or ((predict_out_stream_user_V_1_ack_out = ap_const_logic_1) and (predict_out_stream_user_V_1_state = ap_const_lv2_1)) or ((predict_out_stream_user_V_1_vld_in = ap_const_logic_1) and (predict_out_stream_user_V_1_state = ap_const_lv2_2)))) then 
                    predict_out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    predict_out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((supp_vec_stream_data_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        supp_vec_stream_data_V_0_sel_rd <= not(supp_vec_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((supp_vec_stream_data_V_0_ack_in = ap_const_logic_1) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        supp_vec_stream_data_V_0_sel_wr <= not(supp_vec_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((supp_vec_stream_data_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_data_V_0_state = ap_const_lv2_2)) or ((supp_vec_stream_data_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_data_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1) and (supp_vec_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((supp_vec_stream_data_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1))) and (supp_vec_stream_data_V_0_state = ap_const_lv2_3)) or ((supp_vec_stream_data_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_data_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_data_V_0_vld_in = ap_const_logic_1) and (supp_vec_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_2)) or ((supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1))) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_3)) or ((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_2)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_777_p2 = ap_const_lv1_0))) then 
                i1_reg_428 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (tmp_11_fu_851_p2 = ap_const_lv1_0))) then 
                i1_reg_428 <= i_2_reg_1066;
            end if; 
        end if;
    end process;

    i_i_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                i_i_reg_555 <= i_4_reg_1136;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                i_i_reg_555 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond8_fu_694_p2 = ap_const_lv1_0))) then 
                i_reg_371 <= ap_const_lv4_0;
            elsif (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                i_reg_371 <= i_1_reg_1021;
            end if; 
        end if;
    end process;

    j2_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond2_fu_794_p2 = ap_const_lv1_0))) then 
                j2_reg_451 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                j2_reg_451 <= j_2_reg_1074;
            end if; 
        end if;
    end process;

    j_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                j_reg_394 <= j_1_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond4_fu_711_p2 = ap_const_lv1_0))) then 
                j_reg_394 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    l_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_0))) then 
                l_reg_520 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                l_reg_520 <= l_1_reg_1118;
            end if; 
        end if;
    end process;

    m1_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond1_fu_806_p2 = ap_const_lv1_1))) then 
                m1_reg_462 <= m_reg_416;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_1))) then 
                m1_reg_462 <= m_1_fu_872_p2;
            end if; 
        end if;
    end process;

    m_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond8_fu_694_p2 = ap_const_lv1_1))) then 
                m_reg_416 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond2_fu_794_p2 = ap_const_lv1_1))) then 
                m_reg_416 <= next_mul1_reg_1044;
            end if; 
        end if;
    end process;

    n3_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (tmp_11_fu_851_p2 = ap_const_lv1_1))) then 
                n3_reg_497 <= ap_const_lv29_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                n3_reg_497 <= n_2_reg_1100;
            end if; 
        end if;
    end process;

    n_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond4_fu_711_p2 = ap_const_lv1_1))) then 
                n_reg_360 <= n_1_reg_1008;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                n_reg_360 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;

    os_idx_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_777_p2 = ap_const_lv1_1))) then 
                os_idx_reg_566 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state89) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                os_idx_reg_566 <= os_idx_2_reg_1185;
            end if; 
        end if;
    end process;

    p_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond8_fu_694_p2 = ap_const_lv1_1))) then 
                p_reg_405 <= ap_const_lv26_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond2_fu_794_p2 = ap_const_lv1_1))) then 
                p_reg_405 <= p_1_reg_1053;
            end if; 
        end if;
    end process;

    phi_mul2_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_777_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_439 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (tmp_11_fu_851_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_439 <= next_mul2_reg_1058;
            end if; 
        end if;
    end process;

    phi_mul3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond1_fu_806_p2 = ap_const_lv1_1))) then 
                phi_mul3_reg_473 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_1))) then 
                phi_mul3_reg_473 <= next_mul3_reg_1089;
            end if; 
        end if;
    end process;

    phi_mul4_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_0))) then 
                phi_mul4_reg_531 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                phi_mul4_reg_531 <= next_mul4_reg_1110;
            end if; 
        end if;
    end process;

    phi_mul_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond8_fu_694_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_382 <= ap_const_lv13_0;
            elsif (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                phi_mul_reg_382 <= next_mul_reg_1013;
            end if; 
        end if;
    end process;

    result_1_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_0))) then 
                result_1_reg_508 <= result_reg_484;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                result_1_reg_508 <= grp_fu_577_p2;
            end if; 
        end if;
    end process;

    result_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (tmp_11_fu_851_p2 = ap_const_lv1_1))) then 
                result_reg_484 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then 
                result_reg_484 <= result_1_reg_508;
            end if; 
        end if;
    end process;

    sum_i_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                sum_i_reg_543 <= grp_fu_577_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                sum_i_reg_543 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                INPUT_TILE_COUNT_1_reg_1000 <= INPUT_TILE_COUNT_1_fu_687_p3;
                SVCF_TILE_COUNT_1_reg_994 <= SVCF_TILE_COUNT_1_fu_665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                INPUT_TILE_COUNT_cas_reg_988 <= mul_fu_634_p2(64 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                SVCF_TILE_COUNT_cast_reg_982 <= mul1_fu_615_p2(64 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                dual_coef_buf_load_reg_1128 <= dual_coef_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dual_coef_stream_data_V_0_load_A = ap_const_logic_1)) then
                dual_coef_stream_data_V_0_payload_A <= dual_coef_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dual_coef_stream_data_V_0_load_B = ap_const_logic_1)) then
                dual_coef_stream_data_V_0_payload_B <= dual_coef_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_1_reg_1021 <= i_1_fu_717_p2;
                next_mul_reg_1013 <= next_mul_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_2_reg_1066 <= i_2_fu_800_p2;
                next_mul2_reg_1058 <= next_mul2_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_4_reg_1136 <= i_4_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                input_buf_load_reg_1156 <= input_buf_q0;
                supp_vecs_buf_load_reg_1151 <= supp_vecs_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                j_1_reg_1034 <= j_1_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                j_2_reg_1074 <= j_2_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                l_1_reg_1118 <= l_1_fu_890_p2;
                next_mul4_reg_1110 <= next_mul4_fu_878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond6_fu_942_p2 = ap_const_lv1_0))) then
                last_assign_reg_1195 <= last_assign_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                length_dc_read_reg_968 <= length_dc;
                length_x_read_reg_974 <= length_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                n_1_reg_1008 <= n_1_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                n_2_reg_1100 <= n_2_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                next_mul1_reg_1044 <= next_mul1_fu_771_p2;
                p_1_reg_1053 <= p_1_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                next_mul3_reg_1089 <= next_mul3_fu_845_p2;
                tmp_10_reg_1084 <= tmp_10_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                os_idx_2_reg_1185 <= os_idx_2_fu_947_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_in_stream_data_V_0_load_A = ap_const_logic_1)) then
                predict_in_stream_data_V_0_payload_A <= predict_in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_in_stream_data_V_0_load_B = ap_const_logic_1)) then
                predict_in_stream_data_V_0_payload_B <= predict_in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_out_stream_data_V_1_load_A = ap_const_logic_1)) then
                predict_out_stream_data_V_1_payload_A <= tmp_5_fu_963_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_out_stream_data_V_1_load_B = ap_const_logic_1)) then
                predict_out_stream_data_V_1_payload_B <= tmp_5_fu_963_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_out_stream_last_V_1_load_A = ap_const_logic_1)) then
                predict_out_stream_last_V_1_payload_A <= last_assign_reg_1195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((predict_out_stream_last_V_1_load_B = ap_const_logic_1)) then
                predict_out_stream_last_V_1_payload_B <= last_assign_reg_1195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60))) then
                reg_594 <= grp_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((supp_vec_stream_data_V_0_load_A = ap_const_logic_1)) then
                supp_vec_stream_data_V_0_payload_A <= supp_vec_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((supp_vec_stream_data_V_0_load_B = ap_const_logic_1)) then
                supp_vec_stream_data_V_0_payload_B <= supp_vec_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                tmp_2_i_reg_1172 <= grp_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                tmp_4_i_reg_1161 <= grp_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond4_fu_711_p2 = ap_const_lv1_0))) then
                    tmp_7_reg_1026(3 downto 0) <= tmp_7_fu_723_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond1_fu_806_p2 = ap_const_lv1_0))) then
                tmp_9_reg_1079 <= tmp_9_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond3_fu_727_p2 = ap_const_lv1_0))) then
                tmp_s_reg_1039 <= tmp_s_fu_743_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_1026(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, predict_in_stream_data_V_0_vld_out, supp_vec_stream_data_V_0_vld_out, dual_coef_stream_data_V_0_vld_out, predict_out_stream_data_V_1_ack_in, predict_out_stream_keep_V_1_ack_in, predict_out_stream_strb_V_1_ack_in, predict_out_stream_user_V_1_ack_in, predict_out_stream_last_V_1_ack_in, predict_out_stream_id_V_1_ack_in, predict_out_stream_dest_V_1_ack_in, ap_CS_fsm_state45, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state37, ap_CS_fsm_state38, exitcond4_fu_711_p2, ap_CS_fsm_state39, exitcond3_fu_727_p2, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, exitcond1_fu_806_p2, ap_CS_fsm_state46, ap_CS_fsm_state47, exitcond5_fu_856_p2, ap_CS_fsm_state48, exitcond_fu_884_p2, ap_CS_fsm_state50, tmp_i_fu_901_p2, ap_CS_fsm_state87, exitcond6_fu_942_p2, exitcond8_fu_694_p2, exitcond2_fu_794_p2, tmp_11_fu_851_p2, exitcond7_fu_777_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (exitcond8_fu_694_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond4_fu_711_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond3_fu_727_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_777_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond2_fu_794_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (exitcond1_fu_806_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (tmp_11_fu_851_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (exitcond_fu_884_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (tmp_i_fu_901_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state87 => 
                if ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond6_fu_942_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond6_fu_942_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    INPUT_TILE_COUNT_1_fu_687_p3 <= 
        INPUT_TILE_COUNT_cas_reg_988 when (tmp_2_fu_676_p2(0) = '1') else 
        INPUT_TILE_COUNT_fu_682_p2;
    INPUT_TILE_COUNT_fu_682_p2 <= std_logic_vector(unsigned(ap_const_lv26_1) + unsigned(INPUT_TILE_COUNT_cas_reg_988));
    SVCF_TILE_COUNT_1_fu_665_p3 <= 
        SVCF_TILE_COUNT_cast_reg_982 when (tmp_8_fu_654_p2(0) = '1') else 
        SVCF_TILE_COUNT_fu_660_p2;
    SVCF_TILE_COUNT_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv29_1) + unsigned(SVCF_TILE_COUNT_cast_reg_982));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);

    ap_block_state87_assign_proc : process(predict_out_stream_data_V_1_ack_in, predict_out_stream_keep_V_1_ack_in, predict_out_stream_strb_V_1_ack_in, predict_out_stream_user_V_1_ack_in, predict_out_stream_last_V_1_ack_in, predict_out_stream_id_V_1_ack_in, predict_out_stream_dest_V_1_ack_in)
    begin
                ap_block_state87 <= ((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(predict_out_stream_data_V_1_ack_in, predict_out_stream_keep_V_1_ack_in, predict_out_stream_strb_V_1_ack_in, predict_out_stream_user_V_1_ack_in, predict_out_stream_last_V_1_ack_in, predict_out_stream_id_V_1_ack_in, predict_out_stream_dest_V_1_ack_in, ap_CS_fsm_state87, exitcond6_fu_942_p2)
    begin
        if ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond6_fu_942_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(predict_out_stream_data_V_1_ack_in, predict_out_stream_keep_V_1_ack_in, predict_out_stream_strb_V_1_ack_in, predict_out_stream_user_V_1_ack_in, predict_out_stream_last_V_1_ack_in, predict_out_stream_id_V_1_ack_in, predict_out_stream_dest_V_1_ack_in, ap_CS_fsm_state87, exitcond6_fu_942_p2)
    begin
        if ((not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (exitcond6_fu_942_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dual_coef_buf_address0_assign_proc : process(ap_CS_fsm_state41, tmp_7_reg_1026, ap_CS_fsm_state48, tmp_13_fu_896_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            dual_coef_buf_address0 <= tmp_13_fu_896_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            dual_coef_buf_address0 <= tmp_7_reg_1026(4 - 1 downto 0);
        else 
            dual_coef_buf_address0 <= "XXXX";
        end if; 
    end process;


    dual_coef_buf_ce0_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state41, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or ((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            dual_coef_buf_ce0 <= ap_const_logic_1;
        else 
            dual_coef_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dual_coef_buf_d0 <= dual_coef_stream_data_V_0_data_out;

    dual_coef_buf_we0_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state41)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            dual_coef_buf_we0 <= ap_const_logic_1;
        else 
            dual_coef_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dual_coef_stream_TDATA_blk_n_assign_proc : process(dual_coef_stream_data_V_0_state, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            dual_coef_stream_TDATA_blk_n <= dual_coef_stream_data_V_0_state(0);
        else 
            dual_coef_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dual_coef_stream_TREADY <= dual_coef_stream_dest_V_0_state(1);
    dual_coef_stream_data_V_0_ack_in <= dual_coef_stream_data_V_0_state(1);

    dual_coef_stream_data_V_0_ack_out_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state41)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            dual_coef_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            dual_coef_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    dual_coef_stream_data_V_0_data_out_assign_proc : process(dual_coef_stream_data_V_0_payload_A, dual_coef_stream_data_V_0_payload_B, dual_coef_stream_data_V_0_sel)
    begin
        if ((dual_coef_stream_data_V_0_sel = ap_const_logic_1)) then 
            dual_coef_stream_data_V_0_data_out <= dual_coef_stream_data_V_0_payload_B;
        else 
            dual_coef_stream_data_V_0_data_out <= dual_coef_stream_data_V_0_payload_A;
        end if; 
    end process;

    dual_coef_stream_data_V_0_load_A <= (not(dual_coef_stream_data_V_0_sel_wr) and dual_coef_stream_data_V_0_state_cmp_full);
    dual_coef_stream_data_V_0_load_B <= (dual_coef_stream_data_V_0_state_cmp_full and dual_coef_stream_data_V_0_sel_wr);
    dual_coef_stream_data_V_0_sel <= dual_coef_stream_data_V_0_sel_rd;
    dual_coef_stream_data_V_0_state_cmp_full <= '0' when (dual_coef_stream_data_V_0_state = ap_const_lv2_1) else '1';
    dual_coef_stream_data_V_0_vld_in <= dual_coef_stream_TVALID;
    dual_coef_stream_data_V_0_vld_out <= dual_coef_stream_data_V_0_state(0);

    dual_coef_stream_dest_V_0_ack_out_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state41)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            dual_coef_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            dual_coef_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    dual_coef_stream_dest_V_0_vld_in <= dual_coef_stream_TVALID;
    exitcond1_fu_806_p2 <= "1" when (j2_reg_451 = ap_const_lv10_310) else "0";
    exitcond2_fu_794_p2 <= "1" when (i1_reg_428 = ap_const_lv7_64) else "0";
    exitcond3_fu_727_p2 <= "1" when (j_reg_394 = ap_const_lv10_310) else "0";
    exitcond4_fu_711_p2 <= "1" when (i_reg_371 = ap_const_lv4_A) else "0";
    exitcond5_fu_856_p2 <= "1" when (n3_reg_497 = SVCF_TILE_COUNT_1_reg_994) else "0";
    exitcond6_fu_942_p2 <= "1" when (os_idx_reg_566 = length_x_read_reg_974) else "0";
    exitcond7_fu_777_p2 <= "1" when (p_reg_405 = INPUT_TILE_COUNT_1_reg_1000) else "0";
    exitcond8_fu_694_p2 <= "1" when (n_reg_360 = SVCF_TILE_COUNT_1_reg_994) else "0";
    exitcond_fu_884_p2 <= "1" when (l_reg_520 = ap_const_lv4_A) else "0";

    grp_fu_577_opcode_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state61, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_577_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_fu_577_opcode <= ap_const_lv2_0;
        else 
            grp_fu_577_opcode <= "XX";
        end if; 
    end process;


    grp_fu_577_p0_assign_proc : process(supp_vecs_buf_load_reg_1151, result_1_reg_508, sum_i_reg_543, ap_CS_fsm_state52, ap_CS_fsm_state61, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_577_p0 <= result_1_reg_508;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            grp_fu_577_p0 <= sum_i_reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_577_p0 <= supp_vecs_buf_load_reg_1151;
        else 
            grp_fu_577_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_577_p1_assign_proc : process(reg_594, input_buf_load_reg_1156, ap_CS_fsm_state52, ap_CS_fsm_state61, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            grp_fu_577_p1 <= reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_577_p1 <= input_buf_load_reg_1156;
        else 
            grp_fu_577_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_583_p0_assign_proc : process(dual_coef_buf_load_reg_1128, ap_CS_fsm_state50, tmp_4_i_reg_1161, sum_i_reg_543, ap_CS_fsm_state57, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_583_p0 <= dual_coef_buf_load_reg_1128;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_583_p0 <= tmp_4_i_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_583_p0 <= sum_i_reg_543;
        else 
            grp_fu_583_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_583_p1_assign_proc : process(ap_CS_fsm_state50, tmp_4_i_reg_1161, tmp_2_i_reg_1172, ap_CS_fsm_state57, ap_CS_fsm_state78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            grp_fu_583_p1 <= tmp_2_i_reg_1172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_583_p1 <= tmp_4_i_reg_1161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_583_p1 <= ap_const_lv32_BD4CCCCD;
        else 
            grp_fu_583_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_600_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_600_ap_start <= ap_const_logic_1;
        else 
            grp_fu_600_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_600_p1 <= ap_const_lv32_A(5 - 1 downto 0);

    grp_fu_606_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_606_ap_start <= ap_const_logic_1;
        else 
            grp_fu_606_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_606_p1 <= ap_const_lv32_64(8 - 1 downto 0);
    i_1_fu_717_p2 <= std_logic_vector(unsigned(i_reg_371) + unsigned(ap_const_lv4_1));
    i_2_fu_800_p2 <= std_logic_vector(unsigned(i1_reg_428) + unsigned(ap_const_lv7_1));
    i_4_fu_907_p2 <= std_logic_vector(unsigned(i_i_reg_555) + unsigned(ap_const_lv10_1));

    input_buf_address0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state50, tmp_18_cast_fu_837_p1, tmp_21_cast_fu_926_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            input_buf_address0 <= tmp_21_cast_fu_926_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            input_buf_address0 <= tmp_18_cast_fu_837_p1(17 - 1 downto 0);
        else 
            input_buf_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_buf_ce0_assign_proc : process(predict_in_stream_data_V_0_vld_out, ap_CS_fsm_state45, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1)))) then 
            input_buf_ce0 <= ap_const_logic_1;
        else 
            input_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_d0 <= predict_in_stream_data_V_0_data_out;

    input_buf_we0_assign_proc : process(predict_in_stream_data_V_0_vld_out, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            input_buf_we0 <= ap_const_logic_1;
        else 
            input_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_733_p2 <= std_logic_vector(unsigned(j_reg_394) + unsigned(ap_const_lv10_1));
    j_2_fu_812_p2 <= std_logic_vector(unsigned(j2_reg_451) + unsigned(ap_const_lv10_1));
    l_1_fu_890_p2 <= std_logic_vector(unsigned(l_reg_520) + unsigned(ap_const_lv4_1));
    last_assign_fu_958_p2 <= "1" when (os_idx_2_fu_947_p2 = length_x_read_reg_974) else "0";
    m_1_fu_872_p2 <= std_logic_vector(signed(m1_reg_462) + signed(ap_const_lv32_1));
    mul1_fu_615_p1 <= mul1_fu_615_p10(32 - 1 downto 0);
    mul1_fu_615_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_dc_read_reg_968),65));
    mul1_fu_615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv65_19999999A) * unsigned(mul1_fu_615_p1), 65));
    mul_fu_634_p1 <= mul_fu_634_p10(32 - 1 downto 0);
    mul_fu_634_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_x_read_reg_974),65));
    mul_fu_634_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv65_147AE147B) * unsigned(mul_fu_634_p1), 65));
    n_1_fu_699_p2 <= std_logic_vector(unsigned(n_reg_360) + unsigned(ap_const_lv29_1));
    n_2_fu_861_p2 <= std_logic_vector(unsigned(n3_reg_497) + unsigned(ap_const_lv29_1));
    next_mul1_fu_771_p2 <= std_logic_vector(unsigned(m_reg_416) + unsigned(ap_const_lv32_64));
    next_mul2_fu_788_p2 <= std_logic_vector(unsigned(phi_mul2_reg_439) + unsigned(ap_const_lv17_310));
    next_mul3_fu_845_p2 <= std_logic_vector(unsigned(ap_const_lv64_310) + unsigned(phi_mul3_reg_473));
    next_mul4_fu_878_p2 <= std_logic_vector(unsigned(phi_mul4_reg_531) + unsigned(ap_const_lv13_310));
    next_mul_fu_705_p2 <= std_logic_vector(unsigned(phi_mul_reg_382) + unsigned(ap_const_lv13_310));
    os_idx_2_fu_947_p2 <= std_logic_vector(signed(os_idx_reg_566) + signed(ap_const_lv32_1));
    p_1_fu_782_p2 <= std_logic_vector(unsigned(p_reg_405) + unsigned(ap_const_lv26_1));

    predict_in_stream_TDATA_blk_n_assign_proc : process(predict_in_stream_data_V_0_state, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            predict_in_stream_TDATA_blk_n <= predict_in_stream_data_V_0_state(0);
        else 
            predict_in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    predict_in_stream_TREADY <= predict_in_stream_dest_V_0_state(1);
    predict_in_stream_data_V_0_ack_in <= predict_in_stream_data_V_0_state(1);

    predict_in_stream_data_V_0_ack_out_assign_proc : process(predict_in_stream_data_V_0_vld_out, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            predict_in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            predict_in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    predict_in_stream_data_V_0_data_out_assign_proc : process(predict_in_stream_data_V_0_payload_A, predict_in_stream_data_V_0_payload_B, predict_in_stream_data_V_0_sel)
    begin
        if ((predict_in_stream_data_V_0_sel = ap_const_logic_1)) then 
            predict_in_stream_data_V_0_data_out <= predict_in_stream_data_V_0_payload_B;
        else 
            predict_in_stream_data_V_0_data_out <= predict_in_stream_data_V_0_payload_A;
        end if; 
    end process;

    predict_in_stream_data_V_0_load_A <= (predict_in_stream_data_V_0_state_cmp_full and not(predict_in_stream_data_V_0_sel_wr));
    predict_in_stream_data_V_0_load_B <= (predict_in_stream_data_V_0_state_cmp_full and predict_in_stream_data_V_0_sel_wr);
    predict_in_stream_data_V_0_sel <= predict_in_stream_data_V_0_sel_rd;
    predict_in_stream_data_V_0_state_cmp_full <= '0' when (predict_in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    predict_in_stream_data_V_0_vld_in <= predict_in_stream_TVALID;
    predict_in_stream_data_V_0_vld_out <= predict_in_stream_data_V_0_state(0);

    predict_in_stream_dest_V_0_ack_out_assign_proc : process(predict_in_stream_data_V_0_vld_out, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (predict_in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
            predict_in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            predict_in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    predict_in_stream_dest_V_0_vld_in <= predict_in_stream_TVALID;
    predict_out_stream_TDATA <= predict_out_stream_data_V_1_data_out;

    predict_out_stream_TDATA_blk_n_assign_proc : process(predict_out_stream_data_V_1_state, ap_CS_fsm_state88, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            predict_out_stream_TDATA_blk_n <= predict_out_stream_data_V_1_state(1);
        else 
            predict_out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    predict_out_stream_TDEST <= predict_out_stream_dest_V_1_data_out;
    predict_out_stream_TID <= predict_out_stream_id_V_1_data_out;
    predict_out_stream_TKEEP <= predict_out_stream_keep_V_1_data_out;
    predict_out_stream_TLAST <= predict_out_stream_last_V_1_data_out;
    predict_out_stream_TSTRB <= predict_out_stream_strb_V_1_data_out;
    predict_out_stream_TUSER <= predict_out_stream_user_V_1_data_out;
    predict_out_stream_TVALID <= predict_out_stream_dest_V_1_state(0);
    predict_out_stream_data_V_1_ack_in <= predict_out_stream_data_V_1_state(1);
    predict_out_stream_data_V_1_ack_out <= predict_out_stream_TREADY;

    predict_out_stream_data_V_1_data_out_assign_proc : process(predict_out_stream_data_V_1_payload_A, predict_out_stream_data_V_1_payload_B, predict_out_stream_data_V_1_sel)
    begin
        if ((predict_out_stream_data_V_1_sel = ap_const_logic_1)) then 
            predict_out_stream_data_V_1_data_out <= predict_out_stream_data_V_1_payload_B;
        else 
            predict_out_stream_data_V_1_data_out <= predict_out_stream_data_V_1_payload_A;
        end if; 
    end process;

    predict_out_stream_data_V_1_load_A <= (predict_out_stream_data_V_1_state_cmp_full and not(predict_out_stream_data_V_1_sel_wr));
    predict_out_stream_data_V_1_load_B <= (predict_out_stream_data_V_1_state_cmp_full and predict_out_stream_data_V_1_sel_wr);
    predict_out_stream_data_V_1_sel <= predict_out_stream_data_V_1_sel_rd;
    predict_out_stream_data_V_1_state_cmp_full <= '0' when (predict_out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    predict_out_stream_data_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_data_V_1_vld_out <= predict_out_stream_data_V_1_state(0);
    predict_out_stream_dest_V_1_ack_in <= predict_out_stream_dest_V_1_state(1);
    predict_out_stream_dest_V_1_ack_out <= predict_out_stream_TREADY;
    predict_out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    predict_out_stream_dest_V_1_sel <= predict_out_stream_dest_V_1_sel_rd;

    predict_out_stream_dest_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_dest_V_1_vld_out <= predict_out_stream_dest_V_1_state(0);
    predict_out_stream_id_V_1_ack_in <= predict_out_stream_id_V_1_state(1);
    predict_out_stream_id_V_1_ack_out <= predict_out_stream_TREADY;
    predict_out_stream_id_V_1_data_out <= ap_const_lv5_0;
    predict_out_stream_id_V_1_sel <= predict_out_stream_id_V_1_sel_rd;

    predict_out_stream_id_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_id_V_1_vld_out <= predict_out_stream_id_V_1_state(0);
    predict_out_stream_keep_V_1_ack_in <= predict_out_stream_keep_V_1_state(1);
    predict_out_stream_keep_V_1_ack_out <= predict_out_stream_TREADY;
    predict_out_stream_keep_V_1_data_out <= ap_const_lv4_F;
    predict_out_stream_keep_V_1_sel <= predict_out_stream_keep_V_1_sel_rd;

    predict_out_stream_keep_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_keep_V_1_vld_out <= predict_out_stream_keep_V_1_state(0);
    predict_out_stream_last_V_1_ack_in <= predict_out_stream_last_V_1_state(1);
    predict_out_stream_last_V_1_ack_out <= predict_out_stream_TREADY;

    predict_out_stream_last_V_1_data_out_assign_proc : process(predict_out_stream_last_V_1_payload_A, predict_out_stream_last_V_1_payload_B, predict_out_stream_last_V_1_sel)
    begin
        if ((predict_out_stream_last_V_1_sel = ap_const_logic_1)) then 
            predict_out_stream_last_V_1_data_out <= predict_out_stream_last_V_1_payload_B;
        else 
            predict_out_stream_last_V_1_data_out <= predict_out_stream_last_V_1_payload_A;
        end if; 
    end process;

    predict_out_stream_last_V_1_load_A <= (predict_out_stream_last_V_1_state_cmp_full and not(predict_out_stream_last_V_1_sel_wr));
    predict_out_stream_last_V_1_load_B <= (predict_out_stream_last_V_1_state_cmp_full and predict_out_stream_last_V_1_sel_wr);
    predict_out_stream_last_V_1_sel <= predict_out_stream_last_V_1_sel_rd;
    predict_out_stream_last_V_1_state_cmp_full <= '0' when (predict_out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    predict_out_stream_last_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_last_V_1_vld_out <= predict_out_stream_last_V_1_state(0);
    predict_out_stream_strb_V_1_ack_in <= predict_out_stream_strb_V_1_state(1);
    predict_out_stream_strb_V_1_ack_out <= predict_out_stream_TREADY;
    predict_out_stream_strb_V_1_data_out <= ap_const_lv4_F;
    predict_out_stream_strb_V_1_sel <= predict_out_stream_strb_V_1_sel_rd;

    predict_out_stream_strb_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_strb_V_1_vld_out <= predict_out_stream_strb_V_1_state(0);
    predict_out_stream_user_V_1_ack_in <= predict_out_stream_user_V_1_state(1);
    predict_out_stream_user_V_1_ack_out <= predict_out_stream_TREADY;
    predict_out_stream_user_V_1_data_out <= ap_const_lv4_0;
    predict_out_stream_user_V_1_sel <= predict_out_stream_user_V_1_sel_rd;

    predict_out_stream_user_V_1_vld_in_assign_proc : process(predict_out_stream_data_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (predict_out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
            predict_out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            predict_out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    predict_out_stream_user_V_1_vld_out <= predict_out_stream_user_V_1_state(0);

    result_buf_address0_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state87, tmp_12_fu_867_p1, tmp_3_fu_953_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            result_buf_address0 <= tmp_3_fu_953_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            result_buf_address0 <= tmp_12_fu_867_p1(12 - 1 downto 0);
        else 
            result_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    result_buf_ce0_assign_proc : process(predict_out_stream_data_V_1_ack_in, predict_out_stream_keep_V_1_ack_in, predict_out_stream_strb_V_1_ack_in, predict_out_stream_user_V_1_ack_in, predict_out_stream_last_V_1_ack_in, predict_out_stream_id_V_1_ack_in, predict_out_stream_dest_V_1_ack_in, ap_CS_fsm_state47, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (not(((predict_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_id_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_last_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_user_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_strb_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (predict_out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            result_buf_ce0 <= ap_const_logic_1;
        else 
            result_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_buf_we0_assign_proc : process(ap_CS_fsm_state47, exitcond5_fu_856_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) and (exitcond5_fu_856_p2 = ap_const_lv1_1))) then 
            result_buf_we0 <= ap_const_logic_1;
        else 
            result_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    supp_vec_stream_TDATA_blk_n_assign_proc : process(supp_vec_stream_data_V_0_state, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            supp_vec_stream_TDATA_blk_n <= supp_vec_stream_data_V_0_state(0);
        else 
            supp_vec_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    supp_vec_stream_TREADY <= supp_vec_stream_dest_V_0_state(1);
    supp_vec_stream_data_V_0_ack_in <= supp_vec_stream_data_V_0_state(1);

    supp_vec_stream_data_V_0_ack_out_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state40)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            supp_vec_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            supp_vec_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    supp_vec_stream_data_V_0_data_out_assign_proc : process(supp_vec_stream_data_V_0_payload_A, supp_vec_stream_data_V_0_payload_B, supp_vec_stream_data_V_0_sel)
    begin
        if ((supp_vec_stream_data_V_0_sel = ap_const_logic_1)) then 
            supp_vec_stream_data_V_0_data_out <= supp_vec_stream_data_V_0_payload_B;
        else 
            supp_vec_stream_data_V_0_data_out <= supp_vec_stream_data_V_0_payload_A;
        end if; 
    end process;

    supp_vec_stream_data_V_0_load_A <= (supp_vec_stream_data_V_0_state_cmp_full and not(supp_vec_stream_data_V_0_sel_wr));
    supp_vec_stream_data_V_0_load_B <= (supp_vec_stream_data_V_0_state_cmp_full and supp_vec_stream_data_V_0_sel_wr);
    supp_vec_stream_data_V_0_sel <= supp_vec_stream_data_V_0_sel_rd;
    supp_vec_stream_data_V_0_state_cmp_full <= '0' when (supp_vec_stream_data_V_0_state = ap_const_lv2_1) else '1';
    supp_vec_stream_data_V_0_vld_in <= supp_vec_stream_TVALID;
    supp_vec_stream_data_V_0_vld_out <= supp_vec_stream_data_V_0_state(0);

    supp_vec_stream_dest_V_0_ack_out_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state40)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            supp_vec_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            supp_vec_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    supp_vec_stream_dest_V_0_vld_in <= supp_vec_stream_TVALID;

    supp_vecs_buf_address0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state50, tmp_14_cast_fu_758_p1, tmp_22_cast_fu_937_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            supp_vecs_buf_address0 <= tmp_22_cast_fu_937_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            supp_vecs_buf_address0 <= tmp_14_cast_fu_758_p1(13 - 1 downto 0);
        else 
            supp_vecs_buf_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    supp_vecs_buf_ce0_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state40, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or ((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            supp_vecs_buf_ce0 <= ap_const_logic_1;
        else 
            supp_vecs_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    supp_vecs_buf_d0 <= supp_vec_stream_data_V_0_data_out;

    supp_vecs_buf_we0_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state40)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            supp_vecs_buf_we0 <= ap_const_logic_1;
        else 
            supp_vecs_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_841_p1 <= phi_mul3_reg_473(18 - 1 downto 0);
    tmp_11_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_451),17));
    tmp_11_fu_851_p2 <= "1" when (signed(m1_reg_462) < signed(next_mul1_reg_1044)) else "0";
        tmp_12_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m1_reg_462),64));

    tmp_13_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_520),64));
    tmp_14_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_1039),64));
    tmp_15_fu_921_p2 <= std_logic_vector(unsigned(tmp_10_reg_1084) + unsigned(tmp_3_i_cast_fu_917_p1));
    tmp_16_fu_931_p2 <= std_logic_vector(unsigned(phi_mul4_reg_531) + unsigned(tmp_3_i_cast1_fu_913_p1));
    tmp_18_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1079),64));
    tmp_21_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_921_p2),64));
    tmp_22_cast_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_931_p2),64));
    tmp_2_fu_676_p2 <= "1" when (tmp_6_fu_672_p1 = ap_const_lv8_0) else "0";
        tmp_3_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(os_idx_reg_566),64));

    tmp_3_i_cast1_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_555),13));
    tmp_3_i_cast_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_555),18));
    tmp_4_fu_650_p1 <= grp_fu_600_p2(5 - 1 downto 0);
    tmp_5_fu_963_p1 <= result_buf_q0;
    tmp_6_fu_672_p1 <= grp_fu_606_p2(8 - 1 downto 0);
    tmp_7_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_371),64));
    tmp_8_fu_654_p2 <= "1" when (tmp_4_fu_650_p1 = ap_const_lv5_0) else "0";
    tmp_9_fu_822_p2 <= std_logic_vector(unsigned(phi_mul2_reg_439) + unsigned(tmp_11_cast_fu_818_p1));
    tmp_cast_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_394),13));
    tmp_i_fu_901_p2 <= "1" when (i_i_reg_555 = ap_const_lv10_310) else "0";
    tmp_s_fu_743_p2 <= std_logic_vector(unsigned(phi_mul_reg_382) + unsigned(tmp_cast_fu_739_p1));
end behav;
