// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="predict_tiled,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=280,HLS_SYN_DSP=20,HLS_SYN_FF=3124,HLS_SYN_LUT=4222,HLS_VERSION=2018_2}" *)

module predict_tiled (
        ap_clk,
        ap_rst_n,
        predict_in_stream_TDATA,
        predict_in_stream_TVALID,
        predict_in_stream_TREADY,
        predict_in_stream_TKEEP,
        predict_in_stream_TSTRB,
        predict_in_stream_TUSER,
        predict_in_stream_TLAST,
        predict_in_stream_TID,
        predict_in_stream_TDEST,
        supp_vec_stream_TDATA,
        supp_vec_stream_TVALID,
        supp_vec_stream_TREADY,
        supp_vec_stream_TKEEP,
        supp_vec_stream_TSTRB,
        supp_vec_stream_TUSER,
        supp_vec_stream_TLAST,
        supp_vec_stream_TID,
        supp_vec_stream_TDEST,
        dual_coef_stream_TDATA,
        dual_coef_stream_TVALID,
        dual_coef_stream_TREADY,
        dual_coef_stream_TKEEP,
        dual_coef_stream_TSTRB,
        dual_coef_stream_TUSER,
        dual_coef_stream_TLAST,
        dual_coef_stream_TID,
        dual_coef_stream_TDEST,
        predict_out_stream_TDATA,
        predict_out_stream_TVALID,
        predict_out_stream_TREADY,
        predict_out_stream_TKEEP,
        predict_out_stream_TSTRB,
        predict_out_stream_TUSER,
        predict_out_stream_TLAST,
        predict_out_stream_TID,
        predict_out_stream_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 89'd1;
parameter    ap_ST_fsm_state2 = 89'd2;
parameter    ap_ST_fsm_state3 = 89'd4;
parameter    ap_ST_fsm_state4 = 89'd8;
parameter    ap_ST_fsm_state5 = 89'd16;
parameter    ap_ST_fsm_state6 = 89'd32;
parameter    ap_ST_fsm_state7 = 89'd64;
parameter    ap_ST_fsm_state8 = 89'd128;
parameter    ap_ST_fsm_state9 = 89'd256;
parameter    ap_ST_fsm_state10 = 89'd512;
parameter    ap_ST_fsm_state11 = 89'd1024;
parameter    ap_ST_fsm_state12 = 89'd2048;
parameter    ap_ST_fsm_state13 = 89'd4096;
parameter    ap_ST_fsm_state14 = 89'd8192;
parameter    ap_ST_fsm_state15 = 89'd16384;
parameter    ap_ST_fsm_state16 = 89'd32768;
parameter    ap_ST_fsm_state17 = 89'd65536;
parameter    ap_ST_fsm_state18 = 89'd131072;
parameter    ap_ST_fsm_state19 = 89'd262144;
parameter    ap_ST_fsm_state20 = 89'd524288;
parameter    ap_ST_fsm_state21 = 89'd1048576;
parameter    ap_ST_fsm_state22 = 89'd2097152;
parameter    ap_ST_fsm_state23 = 89'd4194304;
parameter    ap_ST_fsm_state24 = 89'd8388608;
parameter    ap_ST_fsm_state25 = 89'd16777216;
parameter    ap_ST_fsm_state26 = 89'd33554432;
parameter    ap_ST_fsm_state27 = 89'd67108864;
parameter    ap_ST_fsm_state28 = 89'd134217728;
parameter    ap_ST_fsm_state29 = 89'd268435456;
parameter    ap_ST_fsm_state30 = 89'd536870912;
parameter    ap_ST_fsm_state31 = 89'd1073741824;
parameter    ap_ST_fsm_state32 = 89'd2147483648;
parameter    ap_ST_fsm_state33 = 89'd4294967296;
parameter    ap_ST_fsm_state34 = 89'd8589934592;
parameter    ap_ST_fsm_state35 = 89'd17179869184;
parameter    ap_ST_fsm_state36 = 89'd34359738368;
parameter    ap_ST_fsm_state37 = 89'd68719476736;
parameter    ap_ST_fsm_state38 = 89'd137438953472;
parameter    ap_ST_fsm_state39 = 89'd274877906944;
parameter    ap_ST_fsm_state40 = 89'd549755813888;
parameter    ap_ST_fsm_state41 = 89'd1099511627776;
parameter    ap_ST_fsm_state42 = 89'd2199023255552;
parameter    ap_ST_fsm_state43 = 89'd4398046511104;
parameter    ap_ST_fsm_state44 = 89'd8796093022208;
parameter    ap_ST_fsm_state45 = 89'd17592186044416;
parameter    ap_ST_fsm_state46 = 89'd35184372088832;
parameter    ap_ST_fsm_state47 = 89'd70368744177664;
parameter    ap_ST_fsm_state48 = 89'd140737488355328;
parameter    ap_ST_fsm_state49 = 89'd281474976710656;
parameter    ap_ST_fsm_state50 = 89'd562949953421312;
parameter    ap_ST_fsm_state51 = 89'd1125899906842624;
parameter    ap_ST_fsm_state52 = 89'd2251799813685248;
parameter    ap_ST_fsm_state53 = 89'd4503599627370496;
parameter    ap_ST_fsm_state54 = 89'd9007199254740992;
parameter    ap_ST_fsm_state55 = 89'd18014398509481984;
parameter    ap_ST_fsm_state56 = 89'd36028797018963968;
parameter    ap_ST_fsm_state57 = 89'd72057594037927936;
parameter    ap_ST_fsm_state58 = 89'd144115188075855872;
parameter    ap_ST_fsm_state59 = 89'd288230376151711744;
parameter    ap_ST_fsm_state60 = 89'd576460752303423488;
parameter    ap_ST_fsm_state61 = 89'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 89'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 89'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 89'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 89'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 89'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 89'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 89'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 89'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 89'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 89'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 89'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 89'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 89'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 89'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 89'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 89'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 89'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 89'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 89'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 89'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 89'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 89'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 89'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 89'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 89'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 89'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 89'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 89'd309485009821345068724781056;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] predict_in_stream_TDATA;
input   predict_in_stream_TVALID;
output   predict_in_stream_TREADY;
input  [3:0] predict_in_stream_TKEEP;
input  [3:0] predict_in_stream_TSTRB;
input  [3:0] predict_in_stream_TUSER;
input  [0:0] predict_in_stream_TLAST;
input  [4:0] predict_in_stream_TID;
input  [4:0] predict_in_stream_TDEST;
input  [31:0] supp_vec_stream_TDATA;
input   supp_vec_stream_TVALID;
output   supp_vec_stream_TREADY;
input  [3:0] supp_vec_stream_TKEEP;
input  [3:0] supp_vec_stream_TSTRB;
input  [3:0] supp_vec_stream_TUSER;
input  [0:0] supp_vec_stream_TLAST;
input  [4:0] supp_vec_stream_TID;
input  [4:0] supp_vec_stream_TDEST;
input  [31:0] dual_coef_stream_TDATA;
input   dual_coef_stream_TVALID;
output   dual_coef_stream_TREADY;
input  [3:0] dual_coef_stream_TKEEP;
input  [3:0] dual_coef_stream_TSTRB;
input  [3:0] dual_coef_stream_TUSER;
input  [0:0] dual_coef_stream_TLAST;
input  [4:0] dual_coef_stream_TID;
input  [4:0] dual_coef_stream_TDEST;
output  [31:0] predict_out_stream_TDATA;
output   predict_out_stream_TVALID;
input   predict_out_stream_TREADY;
output  [3:0] predict_out_stream_TKEEP;
output  [3:0] predict_out_stream_TSTRB;
output  [3:0] predict_out_stream_TUSER;
output  [0:0] predict_out_stream_TLAST;
output  [4:0] predict_out_stream_TID;
output  [4:0] predict_out_stream_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [88:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] predict_in_stream_data_V_0_data_out;
wire    predict_in_stream_data_V_0_vld_in;
wire    predict_in_stream_data_V_0_vld_out;
wire    predict_in_stream_data_V_0_ack_in;
reg    predict_in_stream_data_V_0_ack_out;
reg   [31:0] predict_in_stream_data_V_0_payload_A;
reg   [31:0] predict_in_stream_data_V_0_payload_B;
reg    predict_in_stream_data_V_0_sel_rd;
reg    predict_in_stream_data_V_0_sel_wr;
wire    predict_in_stream_data_V_0_sel;
wire    predict_in_stream_data_V_0_load_A;
wire    predict_in_stream_data_V_0_load_B;
reg   [1:0] predict_in_stream_data_V_0_state;
wire    predict_in_stream_data_V_0_state_cmp_full;
wire    predict_in_stream_dest_V_0_vld_in;
reg    predict_in_stream_dest_V_0_ack_out;
reg   [1:0] predict_in_stream_dest_V_0_state;
reg   [31:0] supp_vec_stream_data_V_0_data_out;
wire    supp_vec_stream_data_V_0_vld_in;
wire    supp_vec_stream_data_V_0_vld_out;
wire    supp_vec_stream_data_V_0_ack_in;
reg    supp_vec_stream_data_V_0_ack_out;
reg   [31:0] supp_vec_stream_data_V_0_payload_A;
reg   [31:0] supp_vec_stream_data_V_0_payload_B;
reg    supp_vec_stream_data_V_0_sel_rd;
reg    supp_vec_stream_data_V_0_sel_wr;
wire    supp_vec_stream_data_V_0_sel;
wire    supp_vec_stream_data_V_0_load_A;
wire    supp_vec_stream_data_V_0_load_B;
reg   [1:0] supp_vec_stream_data_V_0_state;
wire    supp_vec_stream_data_V_0_state_cmp_full;
wire    supp_vec_stream_dest_V_0_vld_in;
reg    supp_vec_stream_dest_V_0_ack_out;
reg   [1:0] supp_vec_stream_dest_V_0_state;
reg   [31:0] dual_coef_stream_data_V_0_data_out;
wire    dual_coef_stream_data_V_0_vld_in;
wire    dual_coef_stream_data_V_0_vld_out;
wire    dual_coef_stream_data_V_0_ack_in;
reg    dual_coef_stream_data_V_0_ack_out;
reg   [31:0] dual_coef_stream_data_V_0_payload_A;
reg   [31:0] dual_coef_stream_data_V_0_payload_B;
reg    dual_coef_stream_data_V_0_sel_rd;
reg    dual_coef_stream_data_V_0_sel_wr;
wire    dual_coef_stream_data_V_0_sel;
wire    dual_coef_stream_data_V_0_load_A;
wire    dual_coef_stream_data_V_0_load_B;
reg   [1:0] dual_coef_stream_data_V_0_state;
wire    dual_coef_stream_data_V_0_state_cmp_full;
wire    dual_coef_stream_dest_V_0_vld_in;
reg    dual_coef_stream_dest_V_0_ack_out;
reg   [1:0] dual_coef_stream_dest_V_0_state;
reg   [31:0] predict_out_stream_data_V_1_data_out;
reg    predict_out_stream_data_V_1_vld_in;
wire    predict_out_stream_data_V_1_vld_out;
wire    predict_out_stream_data_V_1_ack_in;
wire    predict_out_stream_data_V_1_ack_out;
reg   [31:0] predict_out_stream_data_V_1_payload_A;
reg   [31:0] predict_out_stream_data_V_1_payload_B;
reg    predict_out_stream_data_V_1_sel_rd;
reg    predict_out_stream_data_V_1_sel_wr;
wire    predict_out_stream_data_V_1_sel;
wire    predict_out_stream_data_V_1_load_A;
wire    predict_out_stream_data_V_1_load_B;
reg   [1:0] predict_out_stream_data_V_1_state;
wire    predict_out_stream_data_V_1_state_cmp_full;
wire   [3:0] predict_out_stream_keep_V_1_data_out;
reg    predict_out_stream_keep_V_1_vld_in;
wire    predict_out_stream_keep_V_1_vld_out;
wire    predict_out_stream_keep_V_1_ack_in;
wire    predict_out_stream_keep_V_1_ack_out;
reg    predict_out_stream_keep_V_1_sel_rd;
wire    predict_out_stream_keep_V_1_sel;
reg   [1:0] predict_out_stream_keep_V_1_state;
wire   [3:0] predict_out_stream_strb_V_1_data_out;
reg    predict_out_stream_strb_V_1_vld_in;
wire    predict_out_stream_strb_V_1_vld_out;
wire    predict_out_stream_strb_V_1_ack_in;
wire    predict_out_stream_strb_V_1_ack_out;
reg    predict_out_stream_strb_V_1_sel_rd;
wire    predict_out_stream_strb_V_1_sel;
reg   [1:0] predict_out_stream_strb_V_1_state;
wire   [3:0] predict_out_stream_user_V_1_data_out;
reg    predict_out_stream_user_V_1_vld_in;
wire    predict_out_stream_user_V_1_vld_out;
wire    predict_out_stream_user_V_1_ack_in;
wire    predict_out_stream_user_V_1_ack_out;
reg    predict_out_stream_user_V_1_sel_rd;
wire    predict_out_stream_user_V_1_sel;
reg   [1:0] predict_out_stream_user_V_1_state;
reg   [0:0] predict_out_stream_last_V_1_data_out;
reg    predict_out_stream_last_V_1_vld_in;
wire    predict_out_stream_last_V_1_vld_out;
wire    predict_out_stream_last_V_1_ack_in;
wire    predict_out_stream_last_V_1_ack_out;
reg   [0:0] predict_out_stream_last_V_1_payload_A;
reg   [0:0] predict_out_stream_last_V_1_payload_B;
reg    predict_out_stream_last_V_1_sel_rd;
reg    predict_out_stream_last_V_1_sel_wr;
wire    predict_out_stream_last_V_1_sel;
wire    predict_out_stream_last_V_1_load_A;
wire    predict_out_stream_last_V_1_load_B;
reg   [1:0] predict_out_stream_last_V_1_state;
wire    predict_out_stream_last_V_1_state_cmp_full;
wire   [4:0] predict_out_stream_id_V_1_data_out;
reg    predict_out_stream_id_V_1_vld_in;
wire    predict_out_stream_id_V_1_vld_out;
wire    predict_out_stream_id_V_1_ack_in;
wire    predict_out_stream_id_V_1_ack_out;
reg    predict_out_stream_id_V_1_sel_rd;
wire    predict_out_stream_id_V_1_sel;
reg   [1:0] predict_out_stream_id_V_1_state;
wire   [4:0] predict_out_stream_dest_V_1_data_out;
reg    predict_out_stream_dest_V_1_vld_in;
wire    predict_out_stream_dest_V_1_vld_out;
wire    predict_out_stream_dest_V_1_ack_in;
wire    predict_out_stream_dest_V_1_ack_out;
reg    predict_out_stream_dest_V_1_sel_rd;
wire    predict_out_stream_dest_V_1_sel;
reg   [1:0] predict_out_stream_dest_V_1_state;
wire   [31:0] length_x;
wire   [31:0] length_dc;
reg    predict_in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state45;
reg    supp_vec_stream_TDATA_blk_n;
wire    ap_CS_fsm_state40;
reg    dual_coef_stream_TDATA_blk_n;
wire    ap_CS_fsm_state41;
reg    predict_out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire   [31:0] grp_fu_583_p2;
reg   [31:0] reg_594;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state81;
reg   [31:0] length_dc_read_reg_968;
reg   [31:0] length_x_read_reg_974;
reg   [28:0] SVCF_TILE_COUNT_cast_reg_982;
wire    ap_CS_fsm_state2;
reg   [25:0] INPUT_TILE_COUNT_cas_reg_988;
wire    ap_CS_fsm_state35;
wire   [28:0] SVCF_TILE_COUNT_1_fu_665_p3;
reg   [28:0] SVCF_TILE_COUNT_1_reg_994;
wire    ap_CS_fsm_state36;
wire   [25:0] INPUT_TILE_COUNT_1_fu_687_p3;
reg   [25:0] INPUT_TILE_COUNT_1_reg_1000;
wire   [28:0] n_1_fu_699_p2;
reg   [28:0] n_1_reg_1008;
wire    ap_CS_fsm_state37;
wire   [12:0] next_mul_fu_705_p2;
reg   [12:0] next_mul_reg_1013;
wire    ap_CS_fsm_state38;
wire   [3:0] i_1_fu_717_p2;
reg   [3:0] i_1_reg_1021;
wire   [63:0] tmp_7_fu_723_p1;
reg   [63:0] tmp_7_reg_1026;
wire   [0:0] exitcond4_fu_711_p2;
wire   [9:0] j_1_fu_733_p2;
reg   [9:0] j_1_reg_1034;
wire    ap_CS_fsm_state39;
wire   [12:0] tmp_s_fu_743_p2;
reg   [12:0] tmp_s_reg_1039;
wire   [0:0] exitcond3_fu_727_p2;
wire   [31:0] next_mul1_fu_771_p2;
reg   [31:0] next_mul1_reg_1044;
wire    ap_CS_fsm_state42;
wire   [25:0] p_1_fu_782_p2;
reg   [25:0] p_1_reg_1053;
wire   [16:0] next_mul2_fu_788_p2;
reg   [16:0] next_mul2_reg_1058;
wire    ap_CS_fsm_state43;
wire   [6:0] i_2_fu_800_p2;
reg   [6:0] i_2_reg_1066;
wire   [9:0] j_2_fu_812_p2;
reg   [9:0] j_2_reg_1074;
wire    ap_CS_fsm_state44;
wire   [16:0] tmp_9_fu_822_p2;
reg   [16:0] tmp_9_reg_1079;
wire   [0:0] exitcond1_fu_806_p2;
wire   [17:0] tmp_10_fu_841_p1;
reg   [17:0] tmp_10_reg_1084;
wire    ap_CS_fsm_state46;
wire   [63:0] next_mul3_fu_845_p2;
reg   [63:0] next_mul3_reg_1089;
wire   [28:0] n_2_fu_861_p2;
reg   [28:0] n_2_reg_1100;
wire    ap_CS_fsm_state47;
wire   [31:0] m_1_fu_872_p2;
wire   [0:0] exitcond5_fu_856_p2;
wire   [12:0] next_mul4_fu_878_p2;
reg   [12:0] next_mul4_reg_1110;
wire    ap_CS_fsm_state48;
wire   [3:0] l_1_fu_890_p2;
reg   [3:0] l_1_reg_1118;
wire   [0:0] exitcond_fu_884_p2;
wire   [31:0] dual_coef_buf_q0;
reg   [31:0] dual_coef_buf_load_reg_1128;
wire    ap_CS_fsm_state49;
wire   [9:0] i_4_fu_907_p2;
reg   [9:0] i_4_reg_1136;
wire    ap_CS_fsm_state50;
wire   [0:0] tmp_i_fu_901_p2;
wire   [31:0] supp_vecs_buf_q0;
reg   [31:0] supp_vecs_buf_load_reg_1151;
wire    ap_CS_fsm_state51;
wire   [31:0] input_buf_q0;
reg   [31:0] input_buf_load_reg_1156;
wire   [31:0] grp_fu_577_p2;
reg   [31:0] tmp_4_i_reg_1161;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state65;
wire   [31:0] grp_fu_589_p2;
reg   [31:0] tmp_2_i_reg_1172;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state86;
wire   [31:0] os_idx_2_fu_947_p2;
reg   [31:0] os_idx_2_reg_1185;
wire    ap_CS_fsm_state87;
reg    ap_block_state87;
wire   [0:0] exitcond6_fu_942_p2;
wire   [0:0] last_assign_fu_958_p2;
reg   [0:0] last_assign_reg_1195;
wire   [31:0] tmp_5_fu_963_p1;
reg   [16:0] input_buf_address0;
reg    input_buf_ce0;
reg    input_buf_we0;
wire   [31:0] input_buf_d0;
reg   [12:0] supp_vecs_buf_address0;
reg    supp_vecs_buf_ce0;
reg    supp_vecs_buf_we0;
wire   [31:0] supp_vecs_buf_d0;
reg   [3:0] dual_coef_buf_address0;
reg    dual_coef_buf_ce0;
reg    dual_coef_buf_we0;
wire   [31:0] dual_coef_buf_d0;
reg   [11:0] result_buf_address0;
reg    result_buf_ce0;
reg    result_buf_we0;
wire   [31:0] result_buf_q0;
reg   [28:0] n_reg_360;
reg   [3:0] i_reg_371;
wire   [0:0] exitcond8_fu_694_p2;
reg   [12:0] phi_mul_reg_382;
reg   [9:0] j_reg_394;
reg   [25:0] p_reg_405;
wire   [0:0] exitcond2_fu_794_p2;
reg   [31:0] m_reg_416;
reg   [6:0] i1_reg_428;
wire   [0:0] tmp_11_fu_851_p2;
wire   [0:0] exitcond7_fu_777_p2;
reg   [16:0] phi_mul2_reg_439;
reg   [9:0] j2_reg_451;
reg  signed [31:0] m1_reg_462;
reg   [63:0] phi_mul3_reg_473;
reg   [31:0] result_reg_484;
reg   [28:0] n3_reg_497;
reg   [31:0] result_1_reg_508;
reg   [3:0] l_reg_520;
reg   [12:0] phi_mul4_reg_531;
reg   [31:0] sum_i_reg_543;
reg   [9:0] i_i_reg_555;
reg  signed [31:0] os_idx_reg_566;
wire   [63:0] tmp_14_cast_fu_758_p1;
wire   [63:0] tmp_18_cast_fu_837_p1;
wire  signed [63:0] tmp_12_fu_867_p1;
wire   [63:0] tmp_13_fu_896_p1;
wire   [63:0] tmp_21_cast_fu_926_p1;
wire   [63:0] tmp_22_cast_fu_937_p1;
wire  signed [63:0] tmp_3_fu_953_p1;
reg   [31:0] grp_fu_577_p0;
reg   [31:0] grp_fu_577_p1;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state82;
reg   [31:0] grp_fu_583_p0;
reg   [31:0] grp_fu_583_p1;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state69;
wire   [4:0] grp_fu_600_p1;
wire   [7:0] grp_fu_606_p1;
wire   [31:0] mul1_fu_615_p1;
wire   [64:0] mul1_fu_615_p2;
wire   [31:0] mul_fu_634_p1;
wire   [64:0] mul_fu_634_p2;
wire   [4:0] grp_fu_600_p2;
wire   [4:0] tmp_4_fu_650_p1;
wire   [0:0] tmp_8_fu_654_p2;
wire   [28:0] SVCF_TILE_COUNT_fu_660_p2;
wire   [7:0] grp_fu_606_p2;
wire   [7:0] tmp_6_fu_672_p1;
wire   [0:0] tmp_2_fu_676_p2;
wire   [25:0] INPUT_TILE_COUNT_fu_682_p2;
wire   [12:0] tmp_cast_fu_739_p1;
wire   [16:0] tmp_11_cast_fu_818_p1;
wire   [17:0] tmp_3_i_cast_fu_917_p1;
wire   [17:0] tmp_15_fu_921_p2;
wire   [12:0] tmp_3_i_cast1_fu_913_p1;
wire   [12:0] tmp_16_fu_931_p2;
reg   [1:0] grp_fu_577_opcode;
reg    grp_fu_600_ap_start;
wire    grp_fu_600_ap_done;
reg    grp_fu_606_ap_start;
wire    grp_fu_606_ap_done;
reg   [88:0] ap_NS_fsm;
wire   [64:0] mul1_fu_615_p10;
wire   [64:0] mul_fu_634_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 89'd1;
#0 predict_in_stream_data_V_0_sel_rd = 1'b0;
#0 predict_in_stream_data_V_0_sel_wr = 1'b0;
#0 predict_in_stream_data_V_0_state = 2'd0;
#0 predict_in_stream_dest_V_0_state = 2'd0;
#0 supp_vec_stream_data_V_0_sel_rd = 1'b0;
#0 supp_vec_stream_data_V_0_sel_wr = 1'b0;
#0 supp_vec_stream_data_V_0_state = 2'd0;
#0 supp_vec_stream_dest_V_0_state = 2'd0;
#0 dual_coef_stream_data_V_0_sel_rd = 1'b0;
#0 dual_coef_stream_data_V_0_sel_wr = 1'b0;
#0 dual_coef_stream_data_V_0_state = 2'd0;
#0 dual_coef_stream_dest_V_0_state = 2'd0;
#0 predict_out_stream_data_V_1_sel_rd = 1'b0;
#0 predict_out_stream_data_V_1_sel_wr = 1'b0;
#0 predict_out_stream_data_V_1_state = 2'd0;
#0 predict_out_stream_keep_V_1_sel_rd = 1'b0;
#0 predict_out_stream_keep_V_1_state = 2'd0;
#0 predict_out_stream_strb_V_1_sel_rd = 1'b0;
#0 predict_out_stream_strb_V_1_state = 2'd0;
#0 predict_out_stream_user_V_1_sel_rd = 1'b0;
#0 predict_out_stream_user_V_1_state = 2'd0;
#0 predict_out_stream_last_V_1_sel_rd = 1'b0;
#0 predict_out_stream_last_V_1_sel_wr = 1'b0;
#0 predict_out_stream_last_V_1_state = 2'd0;
#0 predict_out_stream_id_V_1_sel_rd = 1'b0;
#0 predict_out_stream_id_V_1_state = 2'd0;
#0 predict_out_stream_dest_V_1_sel_rd = 1'b0;
#0 predict_out_stream_dest_V_1_state = 2'd0;
end

predict_tiled_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
predict_tiled_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .length_x(length_x),
    .length_dc(length_dc)
);

predict_tiled_inpbkb #(
    .DataWidth( 32 ),
    .AddressRange( 78400 ),
    .AddressWidth( 17 ))
input_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_buf_address0),
    .ce0(input_buf_ce0),
    .we0(input_buf_we0),
    .d0(input_buf_d0),
    .q0(input_buf_q0)
);

predict_tiled_supcud #(
    .DataWidth( 32 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
supp_vecs_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(supp_vecs_buf_address0),
    .ce0(supp_vecs_buf_ce0),
    .we0(supp_vecs_buf_we0),
    .d0(supp_vecs_buf_d0),
    .q0(supp_vecs_buf_q0)
);

predict_tiled_duadEe #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dual_coef_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dual_coef_buf_address0),
    .ce0(dual_coef_buf_ce0),
    .we0(dual_coef_buf_we0),
    .d0(dual_coef_buf_d0),
    .q0(dual_coef_buf_q0)
);

predict_tiled_reseOg #(
    .DataWidth( 32 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
result_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_buf_address0),
    .ce0(result_buf_ce0),
    .we0(result_buf_we0),
    .d0(result_reg_484),
    .q0(result_buf_q0)
);

predict_tiled_fadfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_tiled_fadfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_577_p0),
    .din1(grp_fu_577_p1),
    .opcode(grp_fu_577_opcode),
    .ce(1'b1),
    .dout(grp_fu_577_p2)
);

predict_tiled_fmug8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_tiled_fmug8j_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_583_p0),
    .din1(grp_fu_583_p1),
    .ce(1'b1),
    .dout(grp_fu_583_p2)
);

predict_tiled_fexhbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_tiled_fexhbi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(reg_594),
    .ce(1'b1),
    .dout(grp_fu_589_p2)
);

predict_tiled_ureibs #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
predict_tiled_ureibs_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_600_ap_start),
    .done(grp_fu_600_ap_done),
    .din0(length_dc),
    .din1(grp_fu_600_p1),
    .ce(1'b1),
    .dout(grp_fu_600_p2)
);

predict_tiled_urejbC #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
predict_tiled_urejbC_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_606_ap_start),
    .done(grp_fu_606_ap_done),
    .din0(length_x),
    .din1(grp_fu_606_p1),
    .ce(1'b1),
    .dout(grp_fu_606_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((dual_coef_stream_data_V_0_ack_out == 1'b1) & (dual_coef_stream_data_V_0_vld_out == 1'b1))) begin
            dual_coef_stream_data_V_0_sel_rd <= ~dual_coef_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((dual_coef_stream_data_V_0_ack_in == 1'b1) & (dual_coef_stream_data_V_0_vld_in == 1'b1))) begin
            dual_coef_stream_data_V_0_sel_wr <= ~dual_coef_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((dual_coef_stream_data_V_0_vld_in == 1'b0) & (dual_coef_stream_data_V_0_state == 2'd2)) | ((dual_coef_stream_data_V_0_vld_in == 1'b0) & (dual_coef_stream_data_V_0_ack_out == 1'b1) & (dual_coef_stream_data_V_0_state == 2'd3)))) begin
            dual_coef_stream_data_V_0_state <= 2'd2;
        end else if ((((dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_state == 2'd1)) | ((dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_vld_in == 1'b1) & (dual_coef_stream_data_V_0_state == 2'd3)))) begin
            dual_coef_stream_data_V_0_state <= 2'd1;
        end else if (((~((dual_coef_stream_data_V_0_vld_in == 1'b0) & (dual_coef_stream_data_V_0_ack_out == 1'b1)) & ~((dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_vld_in == 1'b1)) & (dual_coef_stream_data_V_0_state == 2'd3)) | ((dual_coef_stream_data_V_0_ack_out == 1'b1) & (dual_coef_stream_data_V_0_state == 2'd1)) | ((dual_coef_stream_data_V_0_vld_in == 1'b1) & (dual_coef_stream_data_V_0_state == 2'd2)))) begin
            dual_coef_stream_data_V_0_state <= 2'd3;
        end else begin
            dual_coef_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((dual_coef_stream_dest_V_0_vld_in == 1'b0) & (dual_coef_stream_dest_V_0_state == 2'd2)) | ((dual_coef_stream_dest_V_0_vld_in == 1'b0) & (dual_coef_stream_dest_V_0_ack_out == 1'b1) & (dual_coef_stream_dest_V_0_state == 2'd3)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd2;
        end else if ((((dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_state == 2'd1)) | ((dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_vld_in == 1'b1) & (dual_coef_stream_dest_V_0_state == 2'd3)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd1;
        end else if (((~((dual_coef_stream_dest_V_0_vld_in == 1'b0) & (dual_coef_stream_dest_V_0_ack_out == 1'b1)) & ~((dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_vld_in == 1'b1)) & (dual_coef_stream_dest_V_0_state == 2'd3)) | ((dual_coef_stream_dest_V_0_ack_out == 1'b1) & (dual_coef_stream_dest_V_0_state == 2'd1)) | ((dual_coef_stream_dest_V_0_vld_in == 1'b1) & (dual_coef_stream_dest_V_0_state == 2'd2)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd3;
        end else begin
            dual_coef_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((predict_in_stream_data_V_0_ack_out == 1'b1) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
            predict_in_stream_data_V_0_sel_rd <= ~predict_in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((predict_in_stream_data_V_0_ack_in == 1'b1) & (predict_in_stream_data_V_0_vld_in == 1'b1))) begin
            predict_in_stream_data_V_0_sel_wr <= ~predict_in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((predict_in_stream_data_V_0_vld_in == 1'b0) & (predict_in_stream_data_V_0_state == 2'd2)) | ((predict_in_stream_data_V_0_vld_in == 1'b0) & (predict_in_stream_data_V_0_ack_out == 1'b1) & (predict_in_stream_data_V_0_state == 2'd3)))) begin
            predict_in_stream_data_V_0_state <= 2'd2;
        end else if ((((predict_in_stream_data_V_0_ack_out == 1'b0) & (predict_in_stream_data_V_0_state == 2'd1)) | ((predict_in_stream_data_V_0_ack_out == 1'b0) & (predict_in_stream_data_V_0_vld_in == 1'b1) & (predict_in_stream_data_V_0_state == 2'd3)))) begin
            predict_in_stream_data_V_0_state <= 2'd1;
        end else if (((~((predict_in_stream_data_V_0_vld_in == 1'b0) & (predict_in_stream_data_V_0_ack_out == 1'b1)) & ~((predict_in_stream_data_V_0_ack_out == 1'b0) & (predict_in_stream_data_V_0_vld_in == 1'b1)) & (predict_in_stream_data_V_0_state == 2'd3)) | ((predict_in_stream_data_V_0_ack_out == 1'b1) & (predict_in_stream_data_V_0_state == 2'd1)) | ((predict_in_stream_data_V_0_vld_in == 1'b1) & (predict_in_stream_data_V_0_state == 2'd2)))) begin
            predict_in_stream_data_V_0_state <= 2'd3;
        end else begin
            predict_in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_in_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((predict_in_stream_dest_V_0_vld_in == 1'b0) & (predict_in_stream_dest_V_0_state == 2'd2)) | ((predict_in_stream_dest_V_0_vld_in == 1'b0) & (predict_in_stream_dest_V_0_ack_out == 1'b1) & (predict_in_stream_dest_V_0_state == 2'd3)))) begin
            predict_in_stream_dest_V_0_state <= 2'd2;
        end else if ((((predict_in_stream_dest_V_0_ack_out == 1'b0) & (predict_in_stream_dest_V_0_state == 2'd1)) | ((predict_in_stream_dest_V_0_ack_out == 1'b0) & (predict_in_stream_dest_V_0_vld_in == 1'b1) & (predict_in_stream_dest_V_0_state == 2'd3)))) begin
            predict_in_stream_dest_V_0_state <= 2'd1;
        end else if (((~((predict_in_stream_dest_V_0_vld_in == 1'b0) & (predict_in_stream_dest_V_0_ack_out == 1'b1)) & ~((predict_in_stream_dest_V_0_ack_out == 1'b0) & (predict_in_stream_dest_V_0_vld_in == 1'b1)) & (predict_in_stream_dest_V_0_state == 2'd3)) | ((predict_in_stream_dest_V_0_ack_out == 1'b1) & (predict_in_stream_dest_V_0_state == 2'd1)) | ((predict_in_stream_dest_V_0_vld_in == 1'b1) & (predict_in_stream_dest_V_0_state == 2'd2)))) begin
            predict_in_stream_dest_V_0_state <= 2'd3;
        end else begin
            predict_in_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_data_V_1_ack_out == 1'b1) & (predict_out_stream_data_V_1_vld_out == 1'b1))) begin
            predict_out_stream_data_V_1_sel_rd <= ~predict_out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((predict_out_stream_data_V_1_ack_in == 1'b1) & (predict_out_stream_data_V_1_vld_in == 1'b1))) begin
            predict_out_stream_data_V_1_sel_wr <= ~predict_out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_data_V_1_vld_in == 1'b0) & (predict_out_stream_data_V_1_state == 2'd2)) | ((predict_out_stream_data_V_1_vld_in == 1'b0) & (predict_out_stream_data_V_1_ack_out == 1'b1) & (predict_out_stream_data_V_1_state == 2'd3)))) begin
            predict_out_stream_data_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_data_V_1_ack_out == 1'b0) & (predict_out_stream_data_V_1_state == 2'd1)) | ((predict_out_stream_data_V_1_ack_out == 1'b0) & (predict_out_stream_data_V_1_vld_in == 1'b1) & (predict_out_stream_data_V_1_state == 2'd3)))) begin
            predict_out_stream_data_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_data_V_1_vld_in == 1'b0) & (predict_out_stream_data_V_1_ack_out == 1'b1)) & ~((predict_out_stream_data_V_1_ack_out == 1'b0) & (predict_out_stream_data_V_1_vld_in == 1'b1)) & (predict_out_stream_data_V_1_state == 2'd3)) | ((predict_out_stream_data_V_1_ack_out == 1'b1) & (predict_out_stream_data_V_1_state == 2'd1)) | ((predict_out_stream_data_V_1_vld_in == 1'b1) & (predict_out_stream_data_V_1_state == 2'd2)))) begin
            predict_out_stream_data_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_dest_V_1_ack_out == 1'b1) & (predict_out_stream_dest_V_1_vld_out == 1'b1))) begin
            predict_out_stream_dest_V_1_sel_rd <= ~predict_out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_dest_V_1_vld_in == 1'b0) & (predict_out_stream_dest_V_1_state == 2'd2)) | ((predict_out_stream_dest_V_1_vld_in == 1'b0) & (predict_out_stream_dest_V_1_ack_out == 1'b1) & (predict_out_stream_dest_V_1_state == 2'd3)))) begin
            predict_out_stream_dest_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_dest_V_1_ack_out == 1'b0) & (predict_out_stream_dest_V_1_state == 2'd1)) | ((predict_out_stream_dest_V_1_ack_out == 1'b0) & (predict_out_stream_dest_V_1_vld_in == 1'b1) & (predict_out_stream_dest_V_1_state == 2'd3)))) begin
            predict_out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_dest_V_1_vld_in == 1'b0) & (predict_out_stream_dest_V_1_ack_out == 1'b1)) & ~((predict_out_stream_dest_V_1_ack_out == 1'b0) & (predict_out_stream_dest_V_1_vld_in == 1'b1)) & (predict_out_stream_dest_V_1_state == 2'd3)) | ((predict_out_stream_dest_V_1_ack_out == 1'b1) & (predict_out_stream_dest_V_1_state == 2'd1)) | ((predict_out_stream_dest_V_1_vld_in == 1'b1) & (predict_out_stream_dest_V_1_state == 2'd2)))) begin
            predict_out_stream_dest_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_id_V_1_ack_out == 1'b1) & (predict_out_stream_id_V_1_vld_out == 1'b1))) begin
            predict_out_stream_id_V_1_sel_rd <= ~predict_out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_id_V_1_vld_in == 1'b0) & (predict_out_stream_id_V_1_state == 2'd2)) | ((predict_out_stream_id_V_1_vld_in == 1'b0) & (predict_out_stream_id_V_1_ack_out == 1'b1) & (predict_out_stream_id_V_1_state == 2'd3)))) begin
            predict_out_stream_id_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_id_V_1_ack_out == 1'b0) & (predict_out_stream_id_V_1_state == 2'd1)) | ((predict_out_stream_id_V_1_ack_out == 1'b0) & (predict_out_stream_id_V_1_vld_in == 1'b1) & (predict_out_stream_id_V_1_state == 2'd3)))) begin
            predict_out_stream_id_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_id_V_1_vld_in == 1'b0) & (predict_out_stream_id_V_1_ack_out == 1'b1)) & ~((predict_out_stream_id_V_1_ack_out == 1'b0) & (predict_out_stream_id_V_1_vld_in == 1'b1)) & (predict_out_stream_id_V_1_state == 2'd3)) | ((predict_out_stream_id_V_1_ack_out == 1'b1) & (predict_out_stream_id_V_1_state == 2'd1)) | ((predict_out_stream_id_V_1_vld_in == 1'b1) & (predict_out_stream_id_V_1_state == 2'd2)))) begin
            predict_out_stream_id_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_keep_V_1_ack_out == 1'b1) & (predict_out_stream_keep_V_1_vld_out == 1'b1))) begin
            predict_out_stream_keep_V_1_sel_rd <= ~predict_out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_keep_V_1_vld_in == 1'b0) & (predict_out_stream_keep_V_1_state == 2'd2)) | ((predict_out_stream_keep_V_1_vld_in == 1'b0) & (predict_out_stream_keep_V_1_ack_out == 1'b1) & (predict_out_stream_keep_V_1_state == 2'd3)))) begin
            predict_out_stream_keep_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_keep_V_1_ack_out == 1'b0) & (predict_out_stream_keep_V_1_state == 2'd1)) | ((predict_out_stream_keep_V_1_ack_out == 1'b0) & (predict_out_stream_keep_V_1_vld_in == 1'b1) & (predict_out_stream_keep_V_1_state == 2'd3)))) begin
            predict_out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_keep_V_1_vld_in == 1'b0) & (predict_out_stream_keep_V_1_ack_out == 1'b1)) & ~((predict_out_stream_keep_V_1_ack_out == 1'b0) & (predict_out_stream_keep_V_1_vld_in == 1'b1)) & (predict_out_stream_keep_V_1_state == 2'd3)) | ((predict_out_stream_keep_V_1_ack_out == 1'b1) & (predict_out_stream_keep_V_1_state == 2'd1)) | ((predict_out_stream_keep_V_1_vld_in == 1'b1) & (predict_out_stream_keep_V_1_state == 2'd2)))) begin
            predict_out_stream_keep_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_last_V_1_ack_out == 1'b1) & (predict_out_stream_last_V_1_vld_out == 1'b1))) begin
            predict_out_stream_last_V_1_sel_rd <= ~predict_out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((predict_out_stream_last_V_1_ack_in == 1'b1) & (predict_out_stream_last_V_1_vld_in == 1'b1))) begin
            predict_out_stream_last_V_1_sel_wr <= ~predict_out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_last_V_1_vld_in == 1'b0) & (predict_out_stream_last_V_1_state == 2'd2)) | ((predict_out_stream_last_V_1_vld_in == 1'b0) & (predict_out_stream_last_V_1_ack_out == 1'b1) & (predict_out_stream_last_V_1_state == 2'd3)))) begin
            predict_out_stream_last_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_last_V_1_ack_out == 1'b0) & (predict_out_stream_last_V_1_state == 2'd1)) | ((predict_out_stream_last_V_1_ack_out == 1'b0) & (predict_out_stream_last_V_1_vld_in == 1'b1) & (predict_out_stream_last_V_1_state == 2'd3)))) begin
            predict_out_stream_last_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_last_V_1_vld_in == 1'b0) & (predict_out_stream_last_V_1_ack_out == 1'b1)) & ~((predict_out_stream_last_V_1_ack_out == 1'b0) & (predict_out_stream_last_V_1_vld_in == 1'b1)) & (predict_out_stream_last_V_1_state == 2'd3)) | ((predict_out_stream_last_V_1_ack_out == 1'b1) & (predict_out_stream_last_V_1_state == 2'd1)) | ((predict_out_stream_last_V_1_vld_in == 1'b1) & (predict_out_stream_last_V_1_state == 2'd2)))) begin
            predict_out_stream_last_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_strb_V_1_ack_out == 1'b1) & (predict_out_stream_strb_V_1_vld_out == 1'b1))) begin
            predict_out_stream_strb_V_1_sel_rd <= ~predict_out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_strb_V_1_vld_in == 1'b0) & (predict_out_stream_strb_V_1_state == 2'd2)) | ((predict_out_stream_strb_V_1_vld_in == 1'b0) & (predict_out_stream_strb_V_1_ack_out == 1'b1) & (predict_out_stream_strb_V_1_state == 2'd3)))) begin
            predict_out_stream_strb_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_strb_V_1_ack_out == 1'b0) & (predict_out_stream_strb_V_1_state == 2'd1)) | ((predict_out_stream_strb_V_1_ack_out == 1'b0) & (predict_out_stream_strb_V_1_vld_in == 1'b1) & (predict_out_stream_strb_V_1_state == 2'd3)))) begin
            predict_out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_strb_V_1_vld_in == 1'b0) & (predict_out_stream_strb_V_1_ack_out == 1'b1)) & ~((predict_out_stream_strb_V_1_ack_out == 1'b0) & (predict_out_stream_strb_V_1_vld_in == 1'b1)) & (predict_out_stream_strb_V_1_state == 2'd3)) | ((predict_out_stream_strb_V_1_ack_out == 1'b1) & (predict_out_stream_strb_V_1_state == 2'd1)) | ((predict_out_stream_strb_V_1_vld_in == 1'b1) & (predict_out_stream_strb_V_1_state == 2'd2)))) begin
            predict_out_stream_strb_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((predict_out_stream_user_V_1_ack_out == 1'b1) & (predict_out_stream_user_V_1_vld_out == 1'b1))) begin
            predict_out_stream_user_V_1_sel_rd <= ~predict_out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        predict_out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((predict_out_stream_user_V_1_vld_in == 1'b0) & (predict_out_stream_user_V_1_state == 2'd2)) | ((predict_out_stream_user_V_1_vld_in == 1'b0) & (predict_out_stream_user_V_1_ack_out == 1'b1) & (predict_out_stream_user_V_1_state == 2'd3)))) begin
            predict_out_stream_user_V_1_state <= 2'd2;
        end else if ((((predict_out_stream_user_V_1_ack_out == 1'b0) & (predict_out_stream_user_V_1_state == 2'd1)) | ((predict_out_stream_user_V_1_ack_out == 1'b0) & (predict_out_stream_user_V_1_vld_in == 1'b1) & (predict_out_stream_user_V_1_state == 2'd3)))) begin
            predict_out_stream_user_V_1_state <= 2'd1;
        end else if (((~((predict_out_stream_user_V_1_vld_in == 1'b0) & (predict_out_stream_user_V_1_ack_out == 1'b1)) & ~((predict_out_stream_user_V_1_ack_out == 1'b0) & (predict_out_stream_user_V_1_vld_in == 1'b1)) & (predict_out_stream_user_V_1_state == 2'd3)) | ((predict_out_stream_user_V_1_ack_out == 1'b1) & (predict_out_stream_user_V_1_state == 2'd1)) | ((predict_out_stream_user_V_1_vld_in == 1'b1) & (predict_out_stream_user_V_1_state == 2'd2)))) begin
            predict_out_stream_user_V_1_state <= 2'd3;
        end else begin
            predict_out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((supp_vec_stream_data_V_0_ack_out == 1'b1) & (supp_vec_stream_data_V_0_vld_out == 1'b1))) begin
            supp_vec_stream_data_V_0_sel_rd <= ~supp_vec_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((supp_vec_stream_data_V_0_ack_in == 1'b1) & (supp_vec_stream_data_V_0_vld_in == 1'b1))) begin
            supp_vec_stream_data_V_0_sel_wr <= ~supp_vec_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((supp_vec_stream_data_V_0_vld_in == 1'b0) & (supp_vec_stream_data_V_0_state == 2'd2)) | ((supp_vec_stream_data_V_0_vld_in == 1'b0) & (supp_vec_stream_data_V_0_ack_out == 1'b1) & (supp_vec_stream_data_V_0_state == 2'd3)))) begin
            supp_vec_stream_data_V_0_state <= 2'd2;
        end else if ((((supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_state == 2'd1)) | ((supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_vld_in == 1'b1) & (supp_vec_stream_data_V_0_state == 2'd3)))) begin
            supp_vec_stream_data_V_0_state <= 2'd1;
        end else if (((~((supp_vec_stream_data_V_0_vld_in == 1'b0) & (supp_vec_stream_data_V_0_ack_out == 1'b1)) & ~((supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_vld_in == 1'b1)) & (supp_vec_stream_data_V_0_state == 2'd3)) | ((supp_vec_stream_data_V_0_ack_out == 1'b1) & (supp_vec_stream_data_V_0_state == 2'd1)) | ((supp_vec_stream_data_V_0_vld_in == 1'b1) & (supp_vec_stream_data_V_0_state == 2'd2)))) begin
            supp_vec_stream_data_V_0_state <= 2'd3;
        end else begin
            supp_vec_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((supp_vec_stream_dest_V_0_vld_in == 1'b0) & (supp_vec_stream_dest_V_0_state == 2'd2)) | ((supp_vec_stream_dest_V_0_vld_in == 1'b0) & (supp_vec_stream_dest_V_0_ack_out == 1'b1) & (supp_vec_stream_dest_V_0_state == 2'd3)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd2;
        end else if ((((supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_state == 2'd1)) | ((supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_vld_in == 1'b1) & (supp_vec_stream_dest_V_0_state == 2'd3)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd1;
        end else if (((~((supp_vec_stream_dest_V_0_vld_in == 1'b0) & (supp_vec_stream_dest_V_0_ack_out == 1'b1)) & ~((supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_vld_in == 1'b1)) & (supp_vec_stream_dest_V_0_state == 2'd3)) | ((supp_vec_stream_dest_V_0_ack_out == 1'b1) & (supp_vec_stream_dest_V_0_state == 2'd1)) | ((supp_vec_stream_dest_V_0_vld_in == 1'b1) & (supp_vec_stream_dest_V_0_state == 2'd2)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd3;
        end else begin
            supp_vec_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_777_p2 == 1'd0))) begin
        i1_reg_428 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (tmp_11_fu_851_p2 == 1'd0))) begin
        i1_reg_428 <= i_2_reg_1066;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        i_i_reg_555 <= i_4_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        i_i_reg_555 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond8_fu_694_p2 == 1'd0))) begin
        i_reg_371 <= 4'd0;
    end else if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        i_reg_371 <= i_1_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (exitcond2_fu_794_p2 == 1'd0))) begin
        j2_reg_451 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
        j2_reg_451 <= j_2_reg_1074;
    end
end

always @ (posedge ap_clk) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        j_reg_394 <= j_1_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state38) & (exitcond4_fu_711_p2 == 1'd0))) begin
        j_reg_394 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd0))) begin
        l_reg_520 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        l_reg_520 <= l_1_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond1_fu_806_p2 == 1'd1))) begin
        m1_reg_462 <= m_reg_416;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd1))) begin
        m1_reg_462 <= m_1_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond8_fu_694_p2 == 1'd1))) begin
        m_reg_416 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond2_fu_794_p2 == 1'd1))) begin
        m_reg_416 <= next_mul1_reg_1044;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (tmp_11_fu_851_p2 == 1'd1))) begin
        n3_reg_497 <= 29'd0;
    end else if (((1'b1 == ap_CS_fsm_state48) & (exitcond_fu_884_p2 == 1'd1))) begin
        n3_reg_497 <= n_2_reg_1100;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (exitcond4_fu_711_p2 == 1'd1))) begin
        n_reg_360 <= n_1_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        n_reg_360 <= 29'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_777_p2 == 1'd1))) begin
        os_idx_reg_566 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state89) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        os_idx_reg_566 <= os_idx_2_reg_1185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond8_fu_694_p2 == 1'd1))) begin
        p_reg_405 <= 26'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond2_fu_794_p2 == 1'd1))) begin
        p_reg_405 <= p_1_reg_1053;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_777_p2 == 1'd0))) begin
        phi_mul2_reg_439 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & (tmp_11_fu_851_p2 == 1'd0))) begin
        phi_mul2_reg_439 <= next_mul2_reg_1058;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond1_fu_806_p2 == 1'd1))) begin
        phi_mul3_reg_473 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd1))) begin
        phi_mul3_reg_473 <= next_mul3_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd0))) begin
        phi_mul4_reg_531 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        phi_mul4_reg_531 <= next_mul4_reg_1110;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (exitcond8_fu_694_p2 == 1'd0))) begin
        phi_mul_reg_382 <= 13'd0;
    end else if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        phi_mul_reg_382 <= next_mul_reg_1013;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd0))) begin
        result_1_reg_508 <= result_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        result_1_reg_508 <= grp_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (tmp_11_fu_851_p2 == 1'd1))) begin
        result_reg_484 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state48) & (exitcond_fu_884_p2 == 1'd1))) begin
        result_reg_484 <= result_1_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        sum_i_reg_543 <= grp_fu_577_p2;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        sum_i_reg_543 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        INPUT_TILE_COUNT_1_reg_1000 <= INPUT_TILE_COUNT_1_fu_687_p3;
        SVCF_TILE_COUNT_1_reg_994 <= SVCF_TILE_COUNT_1_fu_665_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        INPUT_TILE_COUNT_cas_reg_988 <= {{mul_fu_634_p2[64:39]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SVCF_TILE_COUNT_cast_reg_982 <= {{mul1_fu_615_p2[64:36]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        dual_coef_buf_load_reg_1128 <= dual_coef_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((dual_coef_stream_data_V_0_load_A == 1'b1)) begin
        dual_coef_stream_data_V_0_payload_A <= dual_coef_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((dual_coef_stream_data_V_0_load_B == 1'b1)) begin
        dual_coef_stream_data_V_0_payload_B <= dual_coef_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        i_1_reg_1021 <= i_1_fu_717_p2;
        next_mul_reg_1013 <= next_mul_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_2_reg_1066 <= i_2_fu_800_p2;
        next_mul2_reg_1058 <= next_mul2_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        i_4_reg_1136 <= i_4_fu_907_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        input_buf_load_reg_1156 <= input_buf_q0;
        supp_vecs_buf_load_reg_1151 <= supp_vecs_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        j_1_reg_1034 <= j_1_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_2_reg_1074 <= j_2_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        l_1_reg_1118 <= l_1_fu_890_p2;
        next_mul4_reg_1110 <= next_mul4_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87) & (exitcond6_fu_942_p2 == 1'd0))) begin
        last_assign_reg_1195 <= last_assign_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        length_dc_read_reg_968 <= length_dc;
        length_x_read_reg_974 <= length_x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        n_1_reg_1008 <= n_1_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        n_2_reg_1100 <= n_2_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        next_mul1_reg_1044 <= next_mul1_fu_771_p2;
        p_1_reg_1053 <= p_1_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        next_mul3_reg_1089 <= next_mul3_fu_845_p2;
        tmp_10_reg_1084 <= tmp_10_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87))) begin
        os_idx_2_reg_1185 <= os_idx_2_fu_947_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_in_stream_data_V_0_load_A == 1'b1)) begin
        predict_in_stream_data_V_0_payload_A <= predict_in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_in_stream_data_V_0_load_B == 1'b1)) begin
        predict_in_stream_data_V_0_payload_B <= predict_in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_out_stream_data_V_1_load_A == 1'b1)) begin
        predict_out_stream_data_V_1_payload_A <= tmp_5_fu_963_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_out_stream_data_V_1_load_B == 1'b1)) begin
        predict_out_stream_data_V_1_payload_B <= tmp_5_fu_963_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_out_stream_last_V_1_load_A == 1'b1)) begin
        predict_out_stream_last_V_1_payload_A <= last_assign_reg_1195;
    end
end

always @ (posedge ap_clk) begin
    if ((predict_out_stream_last_V_1_load_B == 1'b1)) begin
        predict_out_stream_last_V_1_payload_B <= last_assign_reg_1195;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state60))) begin
        reg_594 <= grp_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((supp_vec_stream_data_V_0_load_A == 1'b1)) begin
        supp_vec_stream_data_V_0_payload_A <= supp_vec_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((supp_vec_stream_data_V_0_load_B == 1'b1)) begin
        supp_vec_stream_data_V_0_payload_B <= supp_vec_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_2_i_reg_1172 <= grp_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_4_i_reg_1161 <= grp_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (exitcond4_fu_711_p2 == 1'd0))) begin
        tmp_7_reg_1026[3 : 0] <= tmp_7_fu_723_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (exitcond1_fu_806_p2 == 1'd0))) begin
        tmp_9_reg_1079 <= tmp_9_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (exitcond3_fu_727_p2 == 1'd0))) begin
        tmp_s_reg_1039 <= tmp_s_fu_743_p2;
    end
end

always @ (*) begin
    if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87) & (exitcond6_fu_942_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87) & (exitcond6_fu_942_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        dual_coef_buf_address0 = tmp_13_fu_896_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        dual_coef_buf_address0 = tmp_7_reg_1026;
    end else begin
        dual_coef_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | ((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        dual_coef_buf_ce0 = 1'b1;
    end else begin
        dual_coef_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        dual_coef_buf_we0 = 1'b1;
    end else begin
        dual_coef_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        dual_coef_stream_TDATA_blk_n = dual_coef_stream_data_V_0_state[1'd0];
    end else begin
        dual_coef_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        dual_coef_stream_data_V_0_ack_out = 1'b1;
    end else begin
        dual_coef_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((dual_coef_stream_data_V_0_sel == 1'b1)) begin
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_B;
    end else begin
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        dual_coef_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        dual_coef_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_577_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state61))) begin
        grp_fu_577_opcode = 2'd0;
    end else begin
        grp_fu_577_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_577_p0 = result_1_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_577_p0 = sum_i_reg_543;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_577_p0 = supp_vecs_buf_load_reg_1151;
    end else begin
        grp_fu_577_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state61))) begin
        grp_fu_577_p1 = reg_594;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_577_p1 = input_buf_load_reg_1156;
    end else begin
        grp_fu_577_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_583_p0 = dual_coef_buf_load_reg_1128;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_583_p0 = tmp_4_i_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_583_p0 = sum_i_reg_543;
    end else begin
        grp_fu_583_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_583_p1 = tmp_2_i_reg_1172;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_583_p1 = tmp_4_i_reg_1161;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_583_p1 = 32'd3175926989;
    end else begin
        grp_fu_583_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_600_ap_start = 1'b1;
    end else begin
        grp_fu_600_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_606_ap_start = 1'b1;
    end else begin
        grp_fu_606_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        input_buf_address0 = tmp_21_cast_fu_926_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        input_buf_address0 = tmp_18_cast_fu_837_p1;
    end else begin
        input_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1)))) begin
        input_buf_ce0 = 1'b1;
    end else begin
        input_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
        input_buf_we0 = 1'b1;
    end else begin
        input_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        predict_in_stream_TDATA_blk_n = predict_in_stream_data_V_0_state[1'd0];
    end else begin
        predict_in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
        predict_in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        predict_in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((predict_in_stream_data_V_0_sel == 1'b1)) begin
        predict_in_stream_data_V_0_data_out = predict_in_stream_data_V_0_payload_B;
    end else begin
        predict_in_stream_data_V_0_data_out = predict_in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
        predict_in_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        predict_in_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88))) begin
        predict_out_stream_TDATA_blk_n = predict_out_stream_data_V_1_state[1'd1];
    end else begin
        predict_out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((predict_out_stream_data_V_1_sel == 1'b1)) begin
        predict_out_stream_data_V_1_data_out = predict_out_stream_data_V_1_payload_B;
    end else begin
        predict_out_stream_data_V_1_data_out = predict_out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((predict_out_stream_last_V_1_sel == 1'b1)) begin
        predict_out_stream_last_V_1_data_out = predict_out_stream_last_V_1_payload_B;
    end else begin
        predict_out_stream_last_V_1_data_out = predict_out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
        predict_out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        predict_out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        result_buf_address0 = tmp_3_fu_953_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        result_buf_address0 = tmp_12_fu_867_p1;
    end else begin
        result_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87)))) begin
        result_buf_ce0 = 1'b1;
    end else begin
        result_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd1))) begin
        result_buf_we0 = 1'b1;
    end else begin
        result_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        supp_vec_stream_TDATA_blk_n = supp_vec_stream_data_V_0_state[1'd0];
    end else begin
        supp_vec_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        supp_vec_stream_data_V_0_ack_out = 1'b1;
    end else begin
        supp_vec_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((supp_vec_stream_data_V_0_sel == 1'b1)) begin
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_B;
    end else begin
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        supp_vec_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        supp_vec_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        supp_vecs_buf_address0 = tmp_22_cast_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        supp_vecs_buf_address0 = tmp_14_cast_fu_758_p1;
    end else begin
        supp_vecs_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | ((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40)))) begin
        supp_vecs_buf_ce0 = 1'b1;
    end else begin
        supp_vecs_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        supp_vecs_buf_we0 = 1'b1;
    end else begin
        supp_vecs_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (exitcond8_fu_694_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (exitcond4_fu_711_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (exitcond3_fu_727_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_777_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (exitcond2_fu_794_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (exitcond1_fu_806_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (predict_in_stream_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (tmp_11_fu_851_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (exitcond5_fu_856_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (exitcond_fu_884_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (tmp_i_fu_901_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state87 : begin
            if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87) & (exitcond6_fu_942_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state87) & (exitcond6_fu_942_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            if (((1'b1 == ap_CS_fsm_state88) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((1'b1 == ap_CS_fsm_state89) & (predict_out_stream_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_TILE_COUNT_1_fu_687_p3 = ((tmp_2_fu_676_p2[0:0] === 1'b1) ? INPUT_TILE_COUNT_cas_reg_988 : INPUT_TILE_COUNT_fu_682_p2);

assign INPUT_TILE_COUNT_fu_682_p2 = (26'd1 + INPUT_TILE_COUNT_cas_reg_988);

assign SVCF_TILE_COUNT_1_fu_665_p3 = ((tmp_8_fu_654_p2[0:0] === 1'b1) ? SVCF_TILE_COUNT_cast_reg_982 : SVCF_TILE_COUNT_fu_660_p2);

assign SVCF_TILE_COUNT_fu_660_p2 = (29'd1 + SVCF_TILE_COUNT_cast_reg_982);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

always @ (*) begin
    ap_block_state87 = ((predict_out_stream_dest_V_1_ack_in == 1'b0) | (predict_out_stream_id_V_1_ack_in == 1'b0) | (predict_out_stream_last_V_1_ack_in == 1'b0) | (predict_out_stream_user_V_1_ack_in == 1'b0) | (predict_out_stream_strb_V_1_ack_in == 1'b0) | (predict_out_stream_keep_V_1_ack_in == 1'b0) | (predict_out_stream_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dual_coef_buf_d0 = dual_coef_stream_data_V_0_data_out;

assign dual_coef_stream_TREADY = dual_coef_stream_dest_V_0_state[1'd1];

assign dual_coef_stream_data_V_0_ack_in = dual_coef_stream_data_V_0_state[1'd1];

assign dual_coef_stream_data_V_0_load_A = (~dual_coef_stream_data_V_0_sel_wr & dual_coef_stream_data_V_0_state_cmp_full);

assign dual_coef_stream_data_V_0_load_B = (dual_coef_stream_data_V_0_state_cmp_full & dual_coef_stream_data_V_0_sel_wr);

assign dual_coef_stream_data_V_0_sel = dual_coef_stream_data_V_0_sel_rd;

assign dual_coef_stream_data_V_0_state_cmp_full = ((dual_coef_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign dual_coef_stream_data_V_0_vld_in = dual_coef_stream_TVALID;

assign dual_coef_stream_data_V_0_vld_out = dual_coef_stream_data_V_0_state[1'd0];

assign dual_coef_stream_dest_V_0_vld_in = dual_coef_stream_TVALID;

assign exitcond1_fu_806_p2 = ((j2_reg_451 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond2_fu_794_p2 = ((i1_reg_428 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3_fu_727_p2 = ((j_reg_394 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond4_fu_711_p2 = ((i_reg_371 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond5_fu_856_p2 = ((n3_reg_497 == SVCF_TILE_COUNT_1_reg_994) ? 1'b1 : 1'b0);

assign exitcond6_fu_942_p2 = ((os_idx_reg_566 == length_x_read_reg_974) ? 1'b1 : 1'b0);

assign exitcond7_fu_777_p2 = ((p_reg_405 == INPUT_TILE_COUNT_1_reg_1000) ? 1'b1 : 1'b0);

assign exitcond8_fu_694_p2 = ((n_reg_360 == SVCF_TILE_COUNT_1_reg_994) ? 1'b1 : 1'b0);

assign exitcond_fu_884_p2 = ((l_reg_520 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_600_p1 = 32'd10;

assign grp_fu_606_p1 = 32'd100;

assign i_1_fu_717_p2 = (i_reg_371 + 4'd1);

assign i_2_fu_800_p2 = (i1_reg_428 + 7'd1);

assign i_4_fu_907_p2 = (i_i_reg_555 + 10'd1);

assign input_buf_d0 = predict_in_stream_data_V_0_data_out;

assign j_1_fu_733_p2 = (j_reg_394 + 10'd1);

assign j_2_fu_812_p2 = (j2_reg_451 + 10'd1);

assign l_1_fu_890_p2 = (l_reg_520 + 4'd1);

assign last_assign_fu_958_p2 = ((os_idx_2_fu_947_p2 == length_x_read_reg_974) ? 1'b1 : 1'b0);

assign m_1_fu_872_p2 = ($signed(m1_reg_462) + $signed(32'd1));

assign mul1_fu_615_p1 = mul1_fu_615_p10;

assign mul1_fu_615_p10 = length_dc_read_reg_968;

assign mul1_fu_615_p2 = (65'd6871947674 * mul1_fu_615_p1);

assign mul_fu_634_p1 = mul_fu_634_p10;

assign mul_fu_634_p10 = length_x_read_reg_974;

assign mul_fu_634_p2 = (65'd5497558139 * mul_fu_634_p1);

assign n_1_fu_699_p2 = (n_reg_360 + 29'd1);

assign n_2_fu_861_p2 = (n3_reg_497 + 29'd1);

assign next_mul1_fu_771_p2 = (m_reg_416 + 32'd100);

assign next_mul2_fu_788_p2 = (phi_mul2_reg_439 + 17'd784);

assign next_mul3_fu_845_p2 = (64'd784 + phi_mul3_reg_473);

assign next_mul4_fu_878_p2 = (phi_mul4_reg_531 + 13'd784);

assign next_mul_fu_705_p2 = (phi_mul_reg_382 + 13'd784);

assign os_idx_2_fu_947_p2 = ($signed(os_idx_reg_566) + $signed(32'd1));

assign p_1_fu_782_p2 = (p_reg_405 + 26'd1);

assign predict_in_stream_TREADY = predict_in_stream_dest_V_0_state[1'd1];

assign predict_in_stream_data_V_0_ack_in = predict_in_stream_data_V_0_state[1'd1];

assign predict_in_stream_data_V_0_load_A = (predict_in_stream_data_V_0_state_cmp_full & ~predict_in_stream_data_V_0_sel_wr);

assign predict_in_stream_data_V_0_load_B = (predict_in_stream_data_V_0_state_cmp_full & predict_in_stream_data_V_0_sel_wr);

assign predict_in_stream_data_V_0_sel = predict_in_stream_data_V_0_sel_rd;

assign predict_in_stream_data_V_0_state_cmp_full = ((predict_in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign predict_in_stream_data_V_0_vld_in = predict_in_stream_TVALID;

assign predict_in_stream_data_V_0_vld_out = predict_in_stream_data_V_0_state[1'd0];

assign predict_in_stream_dest_V_0_vld_in = predict_in_stream_TVALID;

assign predict_out_stream_TDATA = predict_out_stream_data_V_1_data_out;

assign predict_out_stream_TDEST = predict_out_stream_dest_V_1_data_out;

assign predict_out_stream_TID = predict_out_stream_id_V_1_data_out;

assign predict_out_stream_TKEEP = predict_out_stream_keep_V_1_data_out;

assign predict_out_stream_TLAST = predict_out_stream_last_V_1_data_out;

assign predict_out_stream_TSTRB = predict_out_stream_strb_V_1_data_out;

assign predict_out_stream_TUSER = predict_out_stream_user_V_1_data_out;

assign predict_out_stream_TVALID = predict_out_stream_dest_V_1_state[1'd0];

assign predict_out_stream_data_V_1_ack_in = predict_out_stream_data_V_1_state[1'd1];

assign predict_out_stream_data_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_data_V_1_load_A = (predict_out_stream_data_V_1_state_cmp_full & ~predict_out_stream_data_V_1_sel_wr);

assign predict_out_stream_data_V_1_load_B = (predict_out_stream_data_V_1_state_cmp_full & predict_out_stream_data_V_1_sel_wr);

assign predict_out_stream_data_V_1_sel = predict_out_stream_data_V_1_sel_rd;

assign predict_out_stream_data_V_1_state_cmp_full = ((predict_out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign predict_out_stream_data_V_1_vld_out = predict_out_stream_data_V_1_state[1'd0];

assign predict_out_stream_dest_V_1_ack_in = predict_out_stream_dest_V_1_state[1'd1];

assign predict_out_stream_dest_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_dest_V_1_data_out = 5'd0;

assign predict_out_stream_dest_V_1_sel = predict_out_stream_dest_V_1_sel_rd;

assign predict_out_stream_dest_V_1_vld_out = predict_out_stream_dest_V_1_state[1'd0];

assign predict_out_stream_id_V_1_ack_in = predict_out_stream_id_V_1_state[1'd1];

assign predict_out_stream_id_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_id_V_1_data_out = 5'd0;

assign predict_out_stream_id_V_1_sel = predict_out_stream_id_V_1_sel_rd;

assign predict_out_stream_id_V_1_vld_out = predict_out_stream_id_V_1_state[1'd0];

assign predict_out_stream_keep_V_1_ack_in = predict_out_stream_keep_V_1_state[1'd1];

assign predict_out_stream_keep_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_keep_V_1_data_out = 4'd15;

assign predict_out_stream_keep_V_1_sel = predict_out_stream_keep_V_1_sel_rd;

assign predict_out_stream_keep_V_1_vld_out = predict_out_stream_keep_V_1_state[1'd0];

assign predict_out_stream_last_V_1_ack_in = predict_out_stream_last_V_1_state[1'd1];

assign predict_out_stream_last_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_last_V_1_load_A = (predict_out_stream_last_V_1_state_cmp_full & ~predict_out_stream_last_V_1_sel_wr);

assign predict_out_stream_last_V_1_load_B = (predict_out_stream_last_V_1_state_cmp_full & predict_out_stream_last_V_1_sel_wr);

assign predict_out_stream_last_V_1_sel = predict_out_stream_last_V_1_sel_rd;

assign predict_out_stream_last_V_1_state_cmp_full = ((predict_out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign predict_out_stream_last_V_1_vld_out = predict_out_stream_last_V_1_state[1'd0];

assign predict_out_stream_strb_V_1_ack_in = predict_out_stream_strb_V_1_state[1'd1];

assign predict_out_stream_strb_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_strb_V_1_data_out = 4'd15;

assign predict_out_stream_strb_V_1_sel = predict_out_stream_strb_V_1_sel_rd;

assign predict_out_stream_strb_V_1_vld_out = predict_out_stream_strb_V_1_state[1'd0];

assign predict_out_stream_user_V_1_ack_in = predict_out_stream_user_V_1_state[1'd1];

assign predict_out_stream_user_V_1_ack_out = predict_out_stream_TREADY;

assign predict_out_stream_user_V_1_data_out = 4'd0;

assign predict_out_stream_user_V_1_sel = predict_out_stream_user_V_1_sel_rd;

assign predict_out_stream_user_V_1_vld_out = predict_out_stream_user_V_1_state[1'd0];

assign supp_vec_stream_TREADY = supp_vec_stream_dest_V_0_state[1'd1];

assign supp_vec_stream_data_V_0_ack_in = supp_vec_stream_data_V_0_state[1'd1];

assign supp_vec_stream_data_V_0_load_A = (supp_vec_stream_data_V_0_state_cmp_full & ~supp_vec_stream_data_V_0_sel_wr);

assign supp_vec_stream_data_V_0_load_B = (supp_vec_stream_data_V_0_state_cmp_full & supp_vec_stream_data_V_0_sel_wr);

assign supp_vec_stream_data_V_0_sel = supp_vec_stream_data_V_0_sel_rd;

assign supp_vec_stream_data_V_0_state_cmp_full = ((supp_vec_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign supp_vec_stream_data_V_0_vld_in = supp_vec_stream_TVALID;

assign supp_vec_stream_data_V_0_vld_out = supp_vec_stream_data_V_0_state[1'd0];

assign supp_vec_stream_dest_V_0_vld_in = supp_vec_stream_TVALID;

assign supp_vecs_buf_d0 = supp_vec_stream_data_V_0_data_out;

assign tmp_10_fu_841_p1 = phi_mul3_reg_473[17:0];

assign tmp_11_cast_fu_818_p1 = j2_reg_451;

assign tmp_11_fu_851_p2 = (($signed(m1_reg_462) < $signed(next_mul1_reg_1044)) ? 1'b1 : 1'b0);

assign tmp_12_fu_867_p1 = m1_reg_462;

assign tmp_13_fu_896_p1 = l_reg_520;

assign tmp_14_cast_fu_758_p1 = tmp_s_reg_1039;

assign tmp_15_fu_921_p2 = (tmp_10_reg_1084 + tmp_3_i_cast_fu_917_p1);

assign tmp_16_fu_931_p2 = (phi_mul4_reg_531 + tmp_3_i_cast1_fu_913_p1);

assign tmp_18_cast_fu_837_p1 = tmp_9_reg_1079;

assign tmp_21_cast_fu_926_p1 = tmp_15_fu_921_p2;

assign tmp_22_cast_fu_937_p1 = tmp_16_fu_931_p2;

assign tmp_2_fu_676_p2 = ((tmp_6_fu_672_p1 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_953_p1 = os_idx_reg_566;

assign tmp_3_i_cast1_fu_913_p1 = i_i_reg_555;

assign tmp_3_i_cast_fu_917_p1 = i_i_reg_555;

assign tmp_4_fu_650_p1 = grp_fu_600_p2[4:0];

assign tmp_5_fu_963_p1 = result_buf_q0;

assign tmp_6_fu_672_p1 = grp_fu_606_p2[7:0];

assign tmp_7_fu_723_p1 = i_reg_371;

assign tmp_8_fu_654_p2 = ((tmp_4_fu_650_p1 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_822_p2 = (phi_mul2_reg_439 + tmp_11_cast_fu_818_p1);

assign tmp_cast_fu_739_p1 = j_reg_394;

assign tmp_i_fu_901_p2 = ((i_i_reg_555 == 10'd784) ? 1'b1 : 1'b0);

assign tmp_s_fu_743_p2 = (phi_mul_reg_382 + tmp_cast_fu_739_p1);

always @ (posedge ap_clk) begin
    tmp_7_reg_1026[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //predict_tiled
