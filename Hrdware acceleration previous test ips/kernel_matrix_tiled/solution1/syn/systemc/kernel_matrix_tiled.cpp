// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel_matrix_tiled.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel_matrix_tiled::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel_matrix_tiled::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state1 = "1";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state2 = "10";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state3 = "100";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state4 = "1000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state5 = "10000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state6 = "100000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state7 = "1000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state8 = "10000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state9 = "100000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state10 = "1000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state11 = "10000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state12 = "100000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_pp0_stage0 = "100000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_pp0_stage1 = "1000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_pp0_stage2 = "10000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_pp0_stage3 = "100000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_pp0_stage4 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state64 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state65 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state66 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state67 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state68 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state69 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state70 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state71 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state72 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state73 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state74 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state75 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state76 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state77 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state78 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state79 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<69> kernel_matrix_tiled::ap_ST_fsm_state80 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel_matrix_tiled::ap_const_boolean_1 = true;
const sc_lv<1> kernel_matrix_tiled::ap_const_lv1_0 = "0";
const sc_lv<1> kernel_matrix_tiled::ap_const_lv1_1 = "1";
const sc_lv<2> kernel_matrix_tiled::ap_const_lv2_0 = "00";
const sc_lv<2> kernel_matrix_tiled::ap_const_lv2_2 = "10";
const sc_lv<2> kernel_matrix_tiled::ap_const_lv2_3 = "11";
const sc_lv<2> kernel_matrix_tiled::ap_const_lv2_1 = "1";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2B = "101011";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_26 = "100110";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_43 = "1000011";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_44 = "1000100";
const int kernel_matrix_tiled::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2F = "101111";
const bool kernel_matrix_tiled::ap_const_boolean_0 = false;
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_37 = "110111";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_1 = "1";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_23 = "100011";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_24 = "100100";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_25 = "100101";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_27 = "100111";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_28 = "101000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_29 = "101001";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2A = "101010";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2C = "101100";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2D = "101101";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_30 = "110000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_40 = "1000000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_41 = "1000001";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_42 = "1000010";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_33 = "110011";
const sc_lv<10> kernel_matrix_tiled::ap_const_lv10_0 = "0000000000";
const sc_lv<33> kernel_matrix_tiled::ap_const_lv33_0 = "000000000000000000000000000000000";
const sc_lv<26> kernel_matrix_tiled::ap_const_lv26_0 = "00000000000000000000000000";
const sc_lv<7> kernel_matrix_tiled::ap_const_lv7_0 = "0000000";
const sc_lv<64> kernel_matrix_tiled::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_2E = "101110";
const sc_lv<4> kernel_matrix_tiled::ap_const_lv4_F = "1111";
const sc_lv<4> kernel_matrix_tiled::ap_const_lv4_0 = "0000";
const sc_lv<5> kernel_matrix_tiled::ap_const_lv5_0 = "00000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_31 = "110001";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_BD4CCCCD = "10111101010011001100110011001101";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_34 = "110100";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_38 = "111000";
const sc_lv<32> kernel_matrix_tiled::ap_const_lv32_64 = "1100100";
const sc_lv<65> kernel_matrix_tiled::ap_const_lv65_147AE147B = "101000111101011100001010001111011";
const sc_lv<8> kernel_matrix_tiled::ap_const_lv8_0 = "00000000";
const sc_lv<26> kernel_matrix_tiled::ap_const_lv26_1 = "1";
const sc_lv<10> kernel_matrix_tiled::ap_const_lv10_310 = "1100010000";
const sc_lv<10> kernel_matrix_tiled::ap_const_lv10_1 = "1";
const sc_lv<33> kernel_matrix_tiled::ap_const_lv33_64 = "1100100";
const sc_lv<33> kernel_matrix_tiled::ap_const_lv33_1 = "1";
const sc_lv<7> kernel_matrix_tiled::ap_const_lv7_64 = "1100100";
const sc_lv<64> kernel_matrix_tiled::ap_const_lv64_310 = "1100010000";
const sc_lv<7> kernel_matrix_tiled::ap_const_lv7_1 = "1";
const sc_lv<17> kernel_matrix_tiled::ap_const_lv17_310 = "1100010000";

kernel_matrix_tiled::kernel_matrix_tiled(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U = new kernel_matrix_tiled_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("kernel_matrix_tiled_CONTROL_BUS_s_axi_U");
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U->length_x(length_x);
    input_buf_U = new kernel_matrix_tilbkb("input_buf_U");
    input_buf_U->clk(ap_clk);
    input_buf_U->reset(ap_rst_n_inv);
    input_buf_U->address0(input_buf_address0);
    input_buf_U->ce0(input_buf_ce0);
    input_buf_U->we0(input_buf_we0);
    input_buf_U->d0(input_buf_d0);
    input_buf_U->q0(input_buf_q0);
    index_buf_U = new kernel_matrix_tilcud("index_buf_U");
    index_buf_U->clk(ap_clk);
    index_buf_U->reset(ap_rst_n_inv);
    index_buf_U->address0(index_buf_address0);
    index_buf_U->ce0(index_buf_ce0);
    index_buf_U->we0(index_buf_we0);
    index_buf_U->d0(index_buf_d0);
    index_buf_U->q0(index_buf_q0);
    temp2_buf_U = new kernel_matrix_tilcud("temp2_buf_U");
    temp2_buf_U->clk(ap_clk);
    temp2_buf_U->reset(ap_rst_n_inv);
    temp2_buf_U->address0(temp2_buf_address0);
    temp2_buf_U->ce0(temp2_buf_ce0);
    temp2_buf_U->we0(temp2_buf_we0);
    temp2_buf_U->d0(input_buf_q0);
    temp2_buf_U->q0(temp2_buf_q0);
    result_buf_U = new kernel_matrix_tileOg("result_buf_U");
    result_buf_U->clk(ap_clk);
    result_buf_U->reset(ap_rst_n_inv);
    result_buf_U->address0(result_buf_address0);
    result_buf_U->ce0(result_buf_ce0);
    result_buf_U->we0(result_buf_we0);
    result_buf_U->d0(tmp_2_i_reg_885);
    result_buf_U->q0(result_buf_q0);
    kernel_matrix_tilfYi_U1 = new kernel_matrix_tilfYi<1,5,32,32,32>("kernel_matrix_tilfYi_U1");
    kernel_matrix_tilfYi_U1->clk(ap_clk);
    kernel_matrix_tilfYi_U1->reset(ap_rst_n_inv);
    kernel_matrix_tilfYi_U1->din0(grp_fu_426_p0);
    kernel_matrix_tilfYi_U1->din1(grp_fu_426_p1);
    kernel_matrix_tilfYi_U1->opcode(grp_fu_426_opcode);
    kernel_matrix_tilfYi_U1->ce(ap_var_for_const0);
    kernel_matrix_tilfYi_U1->dout(grp_fu_426_p2);
    kernel_matrix_tilg8j_U2 = new kernel_matrix_tilg8j<1,4,32,32,32>("kernel_matrix_tilg8j_U2");
    kernel_matrix_tilg8j_U2->clk(ap_clk);
    kernel_matrix_tilg8j_U2->reset(ap_rst_n_inv);
    kernel_matrix_tilg8j_U2->din0(grp_fu_431_p0);
    kernel_matrix_tilg8j_U2->din1(grp_fu_431_p1);
    kernel_matrix_tilg8j_U2->ce(ap_var_for_const0);
    kernel_matrix_tilg8j_U2->dout(grp_fu_431_p2);
    kernel_matrix_tilhbi_U3 = new kernel_matrix_tilhbi<1,9,32,32,32>("kernel_matrix_tilhbi_U3");
    kernel_matrix_tilhbi_U3->clk(ap_clk);
    kernel_matrix_tilhbi_U3->reset(ap_rst_n_inv);
    kernel_matrix_tilhbi_U3->din0(ap_var_for_const1);
    kernel_matrix_tilhbi_U3->din1(reg_442);
    kernel_matrix_tilhbi_U3->ce(ap_var_for_const0);
    kernel_matrix_tilhbi_U3->dout(grp_fu_437_p2);
    kernel_matrix_tilibs_U4 = new kernel_matrix_tilibs<1,36,32,8,8>("kernel_matrix_tilibs_U4");
    kernel_matrix_tilibs_U4->clk(ap_clk);
    kernel_matrix_tilibs_U4->reset(ap_rst_n_inv);
    kernel_matrix_tilibs_U4->start(grp_fu_448_ap_start);
    kernel_matrix_tilibs_U4->done(grp_fu_448_ap_done);
    kernel_matrix_tilibs_U4->din0(length_x_0_data_reg);
    kernel_matrix_tilibs_U4->din1(grp_fu_448_p1);
    kernel_matrix_tilibs_U4->ce(ap_var_for_const0);
    kernel_matrix_tilibs_U4->dout(grp_fu_448_p2);
    kernel_matrix_tiljbC_U5 = new kernel_matrix_tiljbC<1,1,7,11,17>("kernel_matrix_tiljbC_U5");
    kernel_matrix_tiljbC_U5->din0(tmp_2_fu_726_p0);
    kernel_matrix_tiljbC_U5->din1(tmp_2_fu_726_p1);
    kernel_matrix_tiljbC_U5->dout(tmp_2_fu_726_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_TILE_SIZE_1_fu_488_p3);
    sensitive << ( TILE_SIZE_cast_reg_740 );
    sensitive << ( tmp_8_fu_477_p2 );
    sensitive << ( TILE_SIZE_fu_483_p2 );

    SC_METHOD(thread_TILE_SIZE_fu_483_p2);
    sensitive << ( TILE_SIZE_cast_reg_740 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state77);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state79);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_00001);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_00001);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_state48_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state49_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state50_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state51_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state52_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state53_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state54_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state55_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state56_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state57_pp0_stage4_iter1);

    SC_METHOD(thread_ap_block_state58_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state59_pp0_stage1_iter2);

    SC_METHOD(thread_ap_block_state60_pp0_stage2_iter2);

    SC_METHOD(thread_ap_block_state61_pp0_stage3_iter2);

    SC_METHOD(thread_ap_block_state62_pp0_stage4_iter2);

    SC_METHOD(thread_ap_block_state63_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state78);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state48);
    sensitive << ( tmp_i_fu_671_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( exitcond8_fu_700_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_phi_mux_i_i_phi_fu_408_p4);
    sensitive << ( i_i_reg_404 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_i_reg_845 );
    sensitive << ( i_3_reg_849 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( exitcond8_fu_700_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bound_fu_510_p0);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( bound_fu_510_p00 );

    SC_METHOD(thread_bound_fu_510_p00);
    sensitive << ( TILE_SIZE_1_reg_746 );

    SC_METHOD(thread_bound_fu_510_p2);
    sensitive << ( bound_fu_510_p0 );

    SC_METHOD(thread_exitcond1_fu_586_p2);
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( j1_reg_348 );

    SC_METHOD(thread_exitcond2_fu_547_p2);
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( exitcond_flatten_fu_530_p2 );
    sensitive << ( i_reg_337 );

    SC_METHOD(thread_exitcond3_fu_495_p2);
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( j_reg_303 );

    SC_METHOD(thread_exitcond8_fu_700_p2);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( length_x_read_reg_732 );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( os_idx_reg_415 );

    SC_METHOD(thread_exitcond_flatten_fu_530_p2);
    sensitive << ( bound_reg_759 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( indvar_flatten_reg_315 );

    SC_METHOD(thread_exitcond_fu_640_p2);
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( l_reg_380 );

    SC_METHOD(thread_grp_fu_426_opcode);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_i_reg_845 );
    sensitive << ( tmp_i_reg_845_pp0_iter2_reg );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1_00001 );
    sensitive << ( ap_block_pp0_stage2_00001 );

    SC_METHOD(thread_grp_fu_426_p0);
    sensitive << ( sum_i_reg_392 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( index_buf_load_reg_864 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_grp_fu_426_p1);
    sensitive << ( reg_442 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( temp2_buf_load_reg_869 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_grp_fu_431_p0);
    sensitive << ( sum_i_reg_392 );
    sensitive << ( tmp_4_i_reg_874 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_state64 );

    SC_METHOD(thread_grp_fu_431_p1);
    sensitive << ( tmp_4_i_reg_874 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_state64 );

    SC_METHOD(thread_grp_fu_448_ap_start);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_448_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_2_fu_635_p2);
    sensitive << ( i_mid2_reg_772 );

    SC_METHOD(thread_i_3_fu_677_p2);
    sensitive << ( ap_phi_mux_i_i_phi_fu_408_p4 );

    SC_METHOD(thread_i_mid2_fu_553_p3);
    sensitive << ( i_reg_337 );
    sensitive << ( exitcond2_fu_547_p2 );

    SC_METHOD(thread_index_buf_address0);
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_1_fu_516_p1 );
    sensitive << ( tmp_3_i_fu_683_p1 );

    SC_METHOD(thread_index_buf_ce0);
    sensitive << ( kernel_index_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_index_buf_d0);
    sensitive << ( kernel_index_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_index_buf_we0);
    sensitive << ( kernel_index_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_indvar_flatten_next_fu_535_p2);
    sensitive << ( indvar_flatten_reg_315 );

    SC_METHOD(thread_input_buf_address0);
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( tmp_3_cast_fu_616_p1 );
    sensitive << ( tmp_13_cast_fu_661_p1 );

    SC_METHOD(thread_input_buf_ce0);
    sensitive << ( kernel_in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_input_buf_d0);
    sensitive << ( kernel_in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_input_buf_we0);
    sensitive << ( kernel_in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_j_1_fu_501_p2);
    sensitive << ( j_reg_303 );

    SC_METHOD(thread_j_2_fu_592_p2);
    sensitive << ( j1_reg_348 );

    SC_METHOD(thread_kernel_in_stream_TDATA_blk_n);
    sensitive << ( kernel_in_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_kernel_in_stream_TREADY);
    sensitive << ( kernel_in_stream_dest_V_0_state );

    SC_METHOD(thread_kernel_in_stream_data_V_0_ack_in);
    sensitive << ( kernel_in_stream_data_V_0_state );

    SC_METHOD(thread_kernel_in_stream_data_V_0_ack_out);
    sensitive << ( kernel_in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_kernel_in_stream_data_V_0_data_out);
    sensitive << ( kernel_in_stream_data_V_0_payload_A );
    sensitive << ( kernel_in_stream_data_V_0_payload_B );
    sensitive << ( kernel_in_stream_data_V_0_sel );

    SC_METHOD(thread_kernel_in_stream_data_V_0_load_A);
    sensitive << ( kernel_in_stream_data_V_0_sel_wr );
    sensitive << ( kernel_in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_kernel_in_stream_data_V_0_load_B);
    sensitive << ( kernel_in_stream_data_V_0_sel_wr );
    sensitive << ( kernel_in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_kernel_in_stream_data_V_0_sel);
    sensitive << ( kernel_in_stream_data_V_0_sel_rd );

    SC_METHOD(thread_kernel_in_stream_data_V_0_state_cmp_full);
    sensitive << ( kernel_in_stream_data_V_0_state );

    SC_METHOD(thread_kernel_in_stream_data_V_0_vld_in);
    sensitive << ( kernel_in_stream_TVALID );

    SC_METHOD(thread_kernel_in_stream_data_V_0_vld_out);
    sensitive << ( kernel_in_stream_data_V_0_state );

    SC_METHOD(thread_kernel_in_stream_dest_V_0_ack_out);
    sensitive << ( kernel_in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_kernel_in_stream_dest_V_0_vld_in);
    sensitive << ( kernel_in_stream_TVALID );

    SC_METHOD(thread_kernel_index_stream_TDATA_blk_n);
    sensitive << ( kernel_index_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_kernel_index_stream_TREADY);
    sensitive << ( kernel_index_stream_dest_V_0_state );

    SC_METHOD(thread_kernel_index_stream_data_V_0_ack_in);
    sensitive << ( kernel_index_stream_data_V_0_state );

    SC_METHOD(thread_kernel_index_stream_data_V_0_ack_out);
    sensitive << ( kernel_index_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_kernel_index_stream_data_V_0_data_out);
    sensitive << ( kernel_index_stream_data_V_0_payload_A );
    sensitive << ( kernel_index_stream_data_V_0_payload_B );
    sensitive << ( kernel_index_stream_data_V_0_sel );

    SC_METHOD(thread_kernel_index_stream_data_V_0_load_A);
    sensitive << ( kernel_index_stream_data_V_0_sel_wr );
    sensitive << ( kernel_index_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_kernel_index_stream_data_V_0_load_B);
    sensitive << ( kernel_index_stream_data_V_0_sel_wr );
    sensitive << ( kernel_index_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_kernel_index_stream_data_V_0_sel);
    sensitive << ( kernel_index_stream_data_V_0_sel_rd );

    SC_METHOD(thread_kernel_index_stream_data_V_0_state_cmp_full);
    sensitive << ( kernel_index_stream_data_V_0_state );

    SC_METHOD(thread_kernel_index_stream_data_V_0_vld_in);
    sensitive << ( kernel_index_stream_TVALID );

    SC_METHOD(thread_kernel_index_stream_data_V_0_vld_out);
    sensitive << ( kernel_index_stream_data_V_0_state );

    SC_METHOD(thread_kernel_index_stream_dest_V_0_ack_out);
    sensitive << ( kernel_index_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_kernel_index_stream_dest_V_0_vld_in);
    sensitive << ( kernel_index_stream_TVALID );

    SC_METHOD(thread_kernel_out_stream_TDATA);
    sensitive << ( kernel_out_stream_data_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TDATA_blk_n);
    sensitive << ( kernel_out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state80 );

    SC_METHOD(thread_kernel_out_stream_TDEST);
    sensitive << ( kernel_out_stream_dest_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TID);
    sensitive << ( kernel_out_stream_id_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TKEEP);
    sensitive << ( kernel_out_stream_keep_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TLAST);
    sensitive << ( kernel_out_stream_last_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TSTRB);
    sensitive << ( kernel_out_stream_strb_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TUSER);
    sensitive << ( kernel_out_stream_user_V_1_data_out );

    SC_METHOD(thread_kernel_out_stream_TVALID);
    sensitive << ( kernel_out_stream_dest_V_1_state );

    SC_METHOD(thread_kernel_out_stream_data_V_1_ack_in);
    sensitive << ( kernel_out_stream_data_V_1_state );

    SC_METHOD(thread_kernel_out_stream_data_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_data_V_1_data_out);
    sensitive << ( kernel_out_stream_data_V_1_payload_A );
    sensitive << ( kernel_out_stream_data_V_1_payload_B );
    sensitive << ( kernel_out_stream_data_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_data_V_1_load_A);
    sensitive << ( kernel_out_stream_data_V_1_sel_wr );
    sensitive << ( kernel_out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_kernel_out_stream_data_V_1_load_B);
    sensitive << ( kernel_out_stream_data_V_1_sel_wr );
    sensitive << ( kernel_out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_kernel_out_stream_data_V_1_sel);
    sensitive << ( kernel_out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_data_V_1_state_cmp_full);
    sensitive << ( kernel_out_stream_data_V_1_state );

    SC_METHOD(thread_kernel_out_stream_data_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_data_V_1_vld_out);
    sensitive << ( kernel_out_stream_data_V_1_state );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_ack_in);
    sensitive << ( kernel_out_stream_dest_V_1_state );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_data_out);
    sensitive << ( kernel_out_stream_dest_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_sel);
    sensitive << ( kernel_out_stream_dest_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_dest_V_1_vld_out);
    sensitive << ( kernel_out_stream_dest_V_1_state );

    SC_METHOD(thread_kernel_out_stream_id_V_1_ack_in);
    sensitive << ( kernel_out_stream_id_V_1_state );

    SC_METHOD(thread_kernel_out_stream_id_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_id_V_1_data_out);
    sensitive << ( kernel_out_stream_id_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_id_V_1_sel);
    sensitive << ( kernel_out_stream_id_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_id_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_id_V_1_vld_out);
    sensitive << ( kernel_out_stream_id_V_1_state );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_ack_in);
    sensitive << ( kernel_out_stream_keep_V_1_state );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_data_out);
    sensitive << ( kernel_out_stream_keep_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_sel);
    sensitive << ( kernel_out_stream_keep_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_keep_V_1_vld_out);
    sensitive << ( kernel_out_stream_keep_V_1_state );

    SC_METHOD(thread_kernel_out_stream_last_V_1_ack_in);
    sensitive << ( kernel_out_stream_last_V_1_state );

    SC_METHOD(thread_kernel_out_stream_last_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_last_V_1_data_out);
    sensitive << ( kernel_out_stream_last_V_1_payload_A );
    sensitive << ( kernel_out_stream_last_V_1_payload_B );
    sensitive << ( kernel_out_stream_last_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_last_V_1_load_A);
    sensitive << ( kernel_out_stream_last_V_1_sel_wr );
    sensitive << ( kernel_out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_kernel_out_stream_last_V_1_load_B);
    sensitive << ( kernel_out_stream_last_V_1_sel_wr );
    sensitive << ( kernel_out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_kernel_out_stream_last_V_1_sel);
    sensitive << ( kernel_out_stream_last_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_last_V_1_state_cmp_full);
    sensitive << ( kernel_out_stream_last_V_1_state );

    SC_METHOD(thread_kernel_out_stream_last_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_last_V_1_vld_out);
    sensitive << ( kernel_out_stream_last_V_1_state );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_ack_in);
    sensitive << ( kernel_out_stream_strb_V_1_state );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_data_out);
    sensitive << ( kernel_out_stream_strb_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_sel);
    sensitive << ( kernel_out_stream_strb_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_strb_V_1_vld_out);
    sensitive << ( kernel_out_stream_strb_V_1_state );

    SC_METHOD(thread_kernel_out_stream_user_V_1_ack_in);
    sensitive << ( kernel_out_stream_user_V_1_state );

    SC_METHOD(thread_kernel_out_stream_user_V_1_ack_out);
    sensitive << ( kernel_out_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_user_V_1_data_out);
    sensitive << ( kernel_out_stream_user_V_1_sel );

    SC_METHOD(thread_kernel_out_stream_user_V_1_sel);
    sensitive << ( kernel_out_stream_user_V_1_sel_rd );

    SC_METHOD(thread_kernel_out_stream_user_V_1_vld_in);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state79 );

    SC_METHOD(thread_kernel_out_stream_user_V_1_vld_out);
    sensitive << ( kernel_out_stream_user_V_1_state );

    SC_METHOD(thread_l_1_fu_646_p2);
    sensitive << ( l_reg_380 );

    SC_METHOD(thread_last_assign_fu_716_p2);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( length_x_read_reg_732 );
    sensitive << ( os_idx_2_fu_705_p2 );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( exitcond8_fu_700_p2 );

    SC_METHOD(thread_length_x_0_ack_out);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( exitcond8_fu_700_p2 );

    SC_METHOD(thread_m_fu_694_p2);
    sensitive << ( m1_reg_359 );

    SC_METHOD(thread_m_mid2_fu_572_p0);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( m_mid2_fu_572_p00 );

    SC_METHOD(thread_m_mid2_fu_572_p00);
    sensitive << ( m_mid2_v_v_reg_778 );

    SC_METHOD(thread_m_mid2_fu_572_p2);
    sensitive << ( m_mid2_fu_572_p0 );

    SC_METHOD(thread_m_mid2_v_v_fu_561_p3);
    sensitive << ( p_reg_326 );
    sensitive << ( exitcond2_fu_547_p2 );
    sensitive << ( p_1_fu_541_p2 );

    SC_METHOD(thread_mul_fu_457_p1);
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( mul_fu_457_p10 );

    SC_METHOD(thread_mul_fu_457_p10);
    sensitive << ( length_x_read_reg_732 );

    SC_METHOD(thread_mul_fu_457_p2);
    sensitive << ( mul_fu_457_p1 );

    SC_METHOD(thread_next_mul_fu_624_p2);
    sensitive << ( phi_mul_reg_369 );

    SC_METHOD(thread_os_idx_2_fu_705_p2);
    sensitive << ( os_idx_reg_415 );

    SC_METHOD(thread_p_1_fu_541_p2);
    sensitive << ( p_reg_326 );

    SC_METHOD(thread_result_buf_address0);
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( tmp_11_fu_689_p1 );
    sensitive << ( tmp_7_fu_711_p1 );

    SC_METHOD(thread_result_buf_ce0);
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state78 );

    SC_METHOD(thread_result_buf_we0);
    sensitive << ( ap_CS_fsm_state77 );

    SC_METHOD(thread_temp2_buf_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_6_fu_666_p1 );
    sensitive << ( tmp_3_i_fu_683_p1 );

    SC_METHOD(thread_temp2_buf_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state47 );

    SC_METHOD(thread_temp2_buf_we0);
    sensitive << ( ap_CS_fsm_state47 );

    SC_METHOD(thread_tmp_10_cast_fu_652_p1);
    sensitive << ( l_reg_380 );

    SC_METHOD(thread_tmp_10_fu_656_p2);
    sensitive << ( tmp_5_reg_813 );
    sensitive << ( tmp_10_cast_fu_652_p1 );

    SC_METHOD(thread_tmp_11_fu_689_p1);
    sensitive << ( m1_reg_359 );

    SC_METHOD(thread_tmp_13_cast_fu_661_p1);
    sensitive << ( tmp_10_fu_656_p2 );

    SC_METHOD(thread_tmp_1_fu_516_p1);
    sensitive << ( j_reg_303 );

    SC_METHOD(thread_tmp_2_fu_726_p0);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( tmp_2_fu_726_p00 );

    SC_METHOD(thread_tmp_2_fu_726_p00);
    sensitive << ( i_mid2_reg_772 );

    SC_METHOD(thread_tmp_2_fu_726_p1);
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_tmp_3_cast_fu_616_p1);
    sensitive << ( tmp_3_reg_808 );

    SC_METHOD(thread_tmp_3_fu_602_p2);
    sensitive << ( tmp_2_reg_795 );
    sensitive << ( tmp_4_cast_fu_598_p1 );

    SC_METHOD(thread_tmp_3_i_fu_683_p1);
    sensitive << ( ap_phi_mux_i_i_phi_fu_408_p4 );

    SC_METHOD(thread_tmp_3_mid2_fu_578_p2);
    sensitive << ( m_mid2_reg_784 );

    SC_METHOD(thread_tmp_4_cast_fu_598_p1);
    sensitive << ( j1_reg_348 );

    SC_METHOD(thread_tmp_4_fu_473_p1);
    sensitive << ( grp_fu_448_p2 );

    SC_METHOD(thread_tmp_5_fu_620_p1);
    sensitive << ( phi_mul_reg_369 );

    SC_METHOD(thread_tmp_6_fu_666_p1);
    sensitive << ( l_reg_380 );

    SC_METHOD(thread_tmp_7_fu_711_p1);
    sensitive << ( os_idx_reg_415 );

    SC_METHOD(thread_tmp_8_fu_477_p2);
    sensitive << ( ap_CS_fsm_state37 );
    sensitive << ( tmp_4_fu_473_p1 );

    SC_METHOD(thread_tmp_9_fu_721_p1);
    sensitive << ( result_buf_q0 );

    SC_METHOD(thread_tmp_i_fu_671_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_i_phi_fu_408_p4 );

    SC_METHOD(thread_tmp_s_fu_630_p2);
    sensitive << ( tmp_3_mid2_reg_790 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( m1_reg_359 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( kernel_in_stream_data_V_0_vld_out );
    sensitive << ( kernel_index_stream_data_V_0_vld_out );
    sensitive << ( kernel_out_stream_data_V_1_ack_in );
    sensitive << ( kernel_out_stream_keep_V_1_ack_in );
    sensitive << ( kernel_out_stream_strb_V_1_ack_in );
    sensitive << ( kernel_out_stream_user_V_1_ack_in );
    sensitive << ( kernel_out_stream_last_V_1_ack_in );
    sensitive << ( kernel_out_stream_id_V_1_ack_in );
    sensitive << ( kernel_out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state39 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_CS_fsm_state80 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( exitcond3_fu_495_p2 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( exitcond_flatten_fu_530_p2 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( exitcond1_fu_586_p2 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( tmp_s_fu_630_p2 );
    sensitive << ( exitcond_fu_640_p2 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( tmp_i_fu_671_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_CS_fsm_state78 );
    sensitive << ( exitcond8_fu_700_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000000000001";
    kernel_in_stream_data_V_0_sel_rd = SC_LOGIC_0;
    kernel_in_stream_data_V_0_sel_wr = SC_LOGIC_0;
    kernel_in_stream_data_V_0_state = "00";
    kernel_in_stream_dest_V_0_state = "00";
    kernel_index_stream_data_V_0_sel_rd = SC_LOGIC_0;
    kernel_index_stream_data_V_0_sel_wr = SC_LOGIC_0;
    kernel_index_stream_data_V_0_state = "00";
    kernel_index_stream_dest_V_0_state = "00";
    kernel_out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    kernel_out_stream_data_V_1_state = "00";
    kernel_out_stream_keep_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_keep_V_1_state = "00";
    kernel_out_stream_strb_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_strb_V_1_state = "00";
    kernel_out_stream_user_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_user_V_1_state = "00";
    kernel_out_stream_last_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_last_V_1_sel_wr = SC_LOGIC_0;
    kernel_out_stream_last_V_1_state = "00";
    kernel_out_stream_id_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_id_V_1_state = "00";
    kernel_out_stream_dest_V_1_sel_rd = SC_LOGIC_0;
    kernel_out_stream_dest_V_1_state = "00";
    length_x_0_data_reg = "00000000000000000000000000000000";
    length_x_0_vld_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_matrix_tiled_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, kernel_in_stream_TDATA, "(port)kernel_in_stream_TDATA");
    sc_trace(mVcdFile, kernel_in_stream_TVALID, "(port)kernel_in_stream_TVALID");
    sc_trace(mVcdFile, kernel_in_stream_TREADY, "(port)kernel_in_stream_TREADY");
    sc_trace(mVcdFile, kernel_in_stream_TKEEP, "(port)kernel_in_stream_TKEEP");
    sc_trace(mVcdFile, kernel_in_stream_TSTRB, "(port)kernel_in_stream_TSTRB");
    sc_trace(mVcdFile, kernel_in_stream_TUSER, "(port)kernel_in_stream_TUSER");
    sc_trace(mVcdFile, kernel_in_stream_TLAST, "(port)kernel_in_stream_TLAST");
    sc_trace(mVcdFile, kernel_in_stream_TID, "(port)kernel_in_stream_TID");
    sc_trace(mVcdFile, kernel_in_stream_TDEST, "(port)kernel_in_stream_TDEST");
    sc_trace(mVcdFile, kernel_index_stream_TDATA, "(port)kernel_index_stream_TDATA");
    sc_trace(mVcdFile, kernel_index_stream_TVALID, "(port)kernel_index_stream_TVALID");
    sc_trace(mVcdFile, kernel_index_stream_TREADY, "(port)kernel_index_stream_TREADY");
    sc_trace(mVcdFile, kernel_index_stream_TKEEP, "(port)kernel_index_stream_TKEEP");
    sc_trace(mVcdFile, kernel_index_stream_TSTRB, "(port)kernel_index_stream_TSTRB");
    sc_trace(mVcdFile, kernel_index_stream_TUSER, "(port)kernel_index_stream_TUSER");
    sc_trace(mVcdFile, kernel_index_stream_TLAST, "(port)kernel_index_stream_TLAST");
    sc_trace(mVcdFile, kernel_index_stream_TID, "(port)kernel_index_stream_TID");
    sc_trace(mVcdFile, kernel_index_stream_TDEST, "(port)kernel_index_stream_TDEST");
    sc_trace(mVcdFile, kernel_out_stream_TDATA, "(port)kernel_out_stream_TDATA");
    sc_trace(mVcdFile, kernel_out_stream_TVALID, "(port)kernel_out_stream_TVALID");
    sc_trace(mVcdFile, kernel_out_stream_TREADY, "(port)kernel_out_stream_TREADY");
    sc_trace(mVcdFile, kernel_out_stream_TKEEP, "(port)kernel_out_stream_TKEEP");
    sc_trace(mVcdFile, kernel_out_stream_TSTRB, "(port)kernel_out_stream_TSTRB");
    sc_trace(mVcdFile, kernel_out_stream_TUSER, "(port)kernel_out_stream_TUSER");
    sc_trace(mVcdFile, kernel_out_stream_TLAST, "(port)kernel_out_stream_TLAST");
    sc_trace(mVcdFile, kernel_out_stream_TID, "(port)kernel_out_stream_TID");
    sc_trace(mVcdFile, kernel_out_stream_TDEST, "(port)kernel_out_stream_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_data_out, "kernel_in_stream_data_V_0_data_out");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_vld_in, "kernel_in_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_vld_out, "kernel_in_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_ack_in, "kernel_in_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_ack_out, "kernel_in_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_payload_A, "kernel_in_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_payload_B, "kernel_in_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_sel_rd, "kernel_in_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_sel_wr, "kernel_in_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_sel, "kernel_in_stream_data_V_0_sel");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_load_A, "kernel_in_stream_data_V_0_load_A");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_load_B, "kernel_in_stream_data_V_0_load_B");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_state, "kernel_in_stream_data_V_0_state");
    sc_trace(mVcdFile, kernel_in_stream_data_V_0_state_cmp_full, "kernel_in_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, kernel_in_stream_dest_V_0_vld_in, "kernel_in_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, kernel_in_stream_dest_V_0_ack_out, "kernel_in_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, kernel_in_stream_dest_V_0_state, "kernel_in_stream_dest_V_0_state");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_data_out, "kernel_index_stream_data_V_0_data_out");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_vld_in, "kernel_index_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_vld_out, "kernel_index_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_ack_in, "kernel_index_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_ack_out, "kernel_index_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_payload_A, "kernel_index_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_payload_B, "kernel_index_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_sel_rd, "kernel_index_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_sel_wr, "kernel_index_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_sel, "kernel_index_stream_data_V_0_sel");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_load_A, "kernel_index_stream_data_V_0_load_A");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_load_B, "kernel_index_stream_data_V_0_load_B");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_state, "kernel_index_stream_data_V_0_state");
    sc_trace(mVcdFile, kernel_index_stream_data_V_0_state_cmp_full, "kernel_index_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, kernel_index_stream_dest_V_0_vld_in, "kernel_index_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, kernel_index_stream_dest_V_0_ack_out, "kernel_index_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, kernel_index_stream_dest_V_0_state, "kernel_index_stream_dest_V_0_state");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_data_out, "kernel_out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_vld_in, "kernel_out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_vld_out, "kernel_out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_ack_in, "kernel_out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_ack_out, "kernel_out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_payload_A, "kernel_out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_payload_B, "kernel_out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_sel_rd, "kernel_out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_sel_wr, "kernel_out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_sel, "kernel_out_stream_data_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_load_A, "kernel_out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_load_B, "kernel_out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_state, "kernel_out_stream_data_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_data_V_1_state_cmp_full, "kernel_out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_data_out, "kernel_out_stream_keep_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_vld_in, "kernel_out_stream_keep_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_vld_out, "kernel_out_stream_keep_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_ack_in, "kernel_out_stream_keep_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_ack_out, "kernel_out_stream_keep_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_sel_rd, "kernel_out_stream_keep_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_sel, "kernel_out_stream_keep_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_keep_V_1_state, "kernel_out_stream_keep_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_data_out, "kernel_out_stream_strb_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_vld_in, "kernel_out_stream_strb_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_vld_out, "kernel_out_stream_strb_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_ack_in, "kernel_out_stream_strb_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_ack_out, "kernel_out_stream_strb_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_sel_rd, "kernel_out_stream_strb_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_sel, "kernel_out_stream_strb_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_strb_V_1_state, "kernel_out_stream_strb_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_data_out, "kernel_out_stream_user_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_vld_in, "kernel_out_stream_user_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_vld_out, "kernel_out_stream_user_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_ack_in, "kernel_out_stream_user_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_ack_out, "kernel_out_stream_user_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_sel_rd, "kernel_out_stream_user_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_sel, "kernel_out_stream_user_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_user_V_1_state, "kernel_out_stream_user_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_data_out, "kernel_out_stream_last_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_vld_in, "kernel_out_stream_last_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_vld_out, "kernel_out_stream_last_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_ack_in, "kernel_out_stream_last_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_ack_out, "kernel_out_stream_last_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_payload_A, "kernel_out_stream_last_V_1_payload_A");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_payload_B, "kernel_out_stream_last_V_1_payload_B");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_sel_rd, "kernel_out_stream_last_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_sel_wr, "kernel_out_stream_last_V_1_sel_wr");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_sel, "kernel_out_stream_last_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_load_A, "kernel_out_stream_last_V_1_load_A");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_load_B, "kernel_out_stream_last_V_1_load_B");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_state, "kernel_out_stream_last_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_last_V_1_state_cmp_full, "kernel_out_stream_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_data_out, "kernel_out_stream_id_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_vld_in, "kernel_out_stream_id_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_vld_out, "kernel_out_stream_id_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_ack_in, "kernel_out_stream_id_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_ack_out, "kernel_out_stream_id_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_sel_rd, "kernel_out_stream_id_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_sel, "kernel_out_stream_id_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_id_V_1_state, "kernel_out_stream_id_V_1_state");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_data_out, "kernel_out_stream_dest_V_1_data_out");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_vld_in, "kernel_out_stream_dest_V_1_vld_in");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_vld_out, "kernel_out_stream_dest_V_1_vld_out");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_ack_in, "kernel_out_stream_dest_V_1_ack_in");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_ack_out, "kernel_out_stream_dest_V_1_ack_out");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_sel_rd, "kernel_out_stream_dest_V_1_sel_rd");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_sel, "kernel_out_stream_dest_V_1_sel");
    sc_trace(mVcdFile, kernel_out_stream_dest_V_1_state, "kernel_out_stream_dest_V_1_state");
    sc_trace(mVcdFile, length_x, "length_x");
    sc_trace(mVcdFile, length_x_0_data_reg, "length_x_0_data_reg");
    sc_trace(mVcdFile, length_x_0_vld_reg, "length_x_0_vld_reg");
    sc_trace(mVcdFile, length_x_0_ack_out, "length_x_0_ack_out");
    sc_trace(mVcdFile, kernel_in_stream_TDATA_blk_n, "kernel_in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, kernel_index_stream_TDATA_blk_n, "kernel_index_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, kernel_out_stream_TDATA_blk_n, "kernel_out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state79, "ap_CS_fsm_state79");
    sc_trace(mVcdFile, ap_CS_fsm_state80, "ap_CS_fsm_state80");
    sc_trace(mVcdFile, sum_i_reg_392, "sum_i_reg_392");
    sc_trace(mVcdFile, i_i_reg_404, "i_i_reg_404");
    sc_trace(mVcdFile, grp_fu_431_p2, "grp_fu_431_p2");
    sc_trace(mVcdFile, reg_442, "reg_442");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_state48_pp0_stage0_iter0, "ap_block_state48_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state53_pp0_stage0_iter1, "ap_block_state53_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state58_pp0_stage0_iter2, "ap_block_state58_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state63_pp0_stage0_iter3, "ap_block_state63_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_i_reg_845, "tmp_i_reg_845");
    sc_trace(mVcdFile, tmp_i_reg_845_pp0_iter1_reg, "tmp_i_reg_845_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state67, "ap_CS_fsm_state67");
    sc_trace(mVcdFile, length_x_read_reg_732, "length_x_read_reg_732");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, TILE_SIZE_cast_reg_740, "TILE_SIZE_cast_reg_740");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, TILE_SIZE_1_fu_488_p3, "TILE_SIZE_1_fu_488_p3");
    sc_trace(mVcdFile, TILE_SIZE_1_reg_746, "TILE_SIZE_1_reg_746");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, j_1_fu_501_p2, "j_1_fu_501_p2");
    sc_trace(mVcdFile, j_1_reg_754, "j_1_reg_754");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, bound_fu_510_p2, "bound_fu_510_p2");
    sc_trace(mVcdFile, bound_reg_759, "bound_reg_759");
    sc_trace(mVcdFile, exitcond3_fu_495_p2, "exitcond3_fu_495_p2");
    sc_trace(mVcdFile, indvar_flatten_next_fu_535_p2, "indvar_flatten_next_fu_535_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_767, "indvar_flatten_next_reg_767");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, i_mid2_fu_553_p3, "i_mid2_fu_553_p3");
    sc_trace(mVcdFile, i_mid2_reg_772, "i_mid2_reg_772");
    sc_trace(mVcdFile, exitcond_flatten_fu_530_p2, "exitcond_flatten_fu_530_p2");
    sc_trace(mVcdFile, m_mid2_v_v_fu_561_p3, "m_mid2_v_v_fu_561_p3");
    sc_trace(mVcdFile, m_mid2_v_v_reg_778, "m_mid2_v_v_reg_778");
    sc_trace(mVcdFile, m_mid2_fu_572_p2, "m_mid2_fu_572_p2");
    sc_trace(mVcdFile, m_mid2_reg_784, "m_mid2_reg_784");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, tmp_3_mid2_fu_578_p2, "tmp_3_mid2_fu_578_p2");
    sc_trace(mVcdFile, tmp_3_mid2_reg_790, "tmp_3_mid2_reg_790");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, tmp_2_fu_726_p2, "tmp_2_fu_726_p2");
    sc_trace(mVcdFile, tmp_2_reg_795, "tmp_2_reg_795");
    sc_trace(mVcdFile, j_2_fu_592_p2, "j_2_fu_592_p2");
    sc_trace(mVcdFile, j_2_reg_803, "j_2_reg_803");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, tmp_3_fu_602_p2, "tmp_3_fu_602_p2");
    sc_trace(mVcdFile, tmp_3_reg_808, "tmp_3_reg_808");
    sc_trace(mVcdFile, exitcond1_fu_586_p2, "exitcond1_fu_586_p2");
    sc_trace(mVcdFile, tmp_5_fu_620_p1, "tmp_5_fu_620_p1");
    sc_trace(mVcdFile, tmp_5_reg_813, "tmp_5_reg_813");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, next_mul_fu_624_p2, "next_mul_fu_624_p2");
    sc_trace(mVcdFile, next_mul_reg_818, "next_mul_reg_818");
    sc_trace(mVcdFile, i_2_fu_635_p2, "i_2_fu_635_p2");
    sc_trace(mVcdFile, tmp_s_fu_630_p2, "tmp_s_fu_630_p2");
    sc_trace(mVcdFile, exitcond_fu_640_p2, "exitcond_fu_640_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, l_1_fu_646_p2, "l_1_fu_646_p2");
    sc_trace(mVcdFile, l_1_reg_835, "l_1_reg_835");
    sc_trace(mVcdFile, tmp_i_fu_671_p2, "tmp_i_fu_671_p2");
    sc_trace(mVcdFile, tmp_i_reg_845_pp0_iter2_reg, "tmp_i_reg_845_pp0_iter2_reg");
    sc_trace(mVcdFile, i_3_fu_677_p2, "i_3_fu_677_p2");
    sc_trace(mVcdFile, i_3_reg_849, "i_3_reg_849");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, index_buf_q0, "index_buf_q0");
    sc_trace(mVcdFile, index_buf_load_reg_864, "index_buf_load_reg_864");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state49_pp0_stage1_iter0, "ap_block_state49_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state54_pp0_stage1_iter1, "ap_block_state54_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state59_pp0_stage1_iter2, "ap_block_state59_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, temp2_buf_q0, "temp2_buf_q0");
    sc_trace(mVcdFile, temp2_buf_load_reg_869, "temp2_buf_load_reg_869");
    sc_trace(mVcdFile, grp_fu_426_p2, "grp_fu_426_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_874, "tmp_4_i_reg_874");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, grp_fu_437_p2, "grp_fu_437_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_885, "tmp_2_i_reg_885");
    sc_trace(mVcdFile, ap_CS_fsm_state76, "ap_CS_fsm_state76");
    sc_trace(mVcdFile, m_fu_694_p2, "m_fu_694_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state77, "ap_CS_fsm_state77");
    sc_trace(mVcdFile, os_idx_2_fu_705_p2, "os_idx_2_fu_705_p2");
    sc_trace(mVcdFile, os_idx_2_reg_898, "os_idx_2_reg_898");
    sc_trace(mVcdFile, ap_CS_fsm_state78, "ap_CS_fsm_state78");
    sc_trace(mVcdFile, ap_block_state78, "ap_block_state78");
    sc_trace(mVcdFile, exitcond8_fu_700_p2, "exitcond8_fu_700_p2");
    sc_trace(mVcdFile, last_assign_fu_716_p2, "last_assign_fu_716_p2");
    sc_trace(mVcdFile, last_assign_reg_908, "last_assign_reg_908");
    sc_trace(mVcdFile, tmp_9_fu_721_p1, "tmp_9_fu_721_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state48, "ap_condition_pp0_exit_iter0_state48");
    sc_trace(mVcdFile, ap_block_state52_pp0_stage4_iter0, "ap_block_state52_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_state57_pp0_stage4_iter1, "ap_block_state57_pp0_stage4_iter1");
    sc_trace(mVcdFile, ap_block_state62_pp0_stage4_iter2, "ap_block_state62_pp0_stage4_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, input_buf_address0, "input_buf_address0");
    sc_trace(mVcdFile, input_buf_ce0, "input_buf_ce0");
    sc_trace(mVcdFile, input_buf_we0, "input_buf_we0");
    sc_trace(mVcdFile, input_buf_d0, "input_buf_d0");
    sc_trace(mVcdFile, input_buf_q0, "input_buf_q0");
    sc_trace(mVcdFile, index_buf_address0, "index_buf_address0");
    sc_trace(mVcdFile, index_buf_ce0, "index_buf_ce0");
    sc_trace(mVcdFile, index_buf_we0, "index_buf_we0");
    sc_trace(mVcdFile, index_buf_d0, "index_buf_d0");
    sc_trace(mVcdFile, temp2_buf_address0, "temp2_buf_address0");
    sc_trace(mVcdFile, temp2_buf_ce0, "temp2_buf_ce0");
    sc_trace(mVcdFile, temp2_buf_we0, "temp2_buf_we0");
    sc_trace(mVcdFile, result_buf_address0, "result_buf_address0");
    sc_trace(mVcdFile, result_buf_ce0, "result_buf_ce0");
    sc_trace(mVcdFile, result_buf_we0, "result_buf_we0");
    sc_trace(mVcdFile, result_buf_q0, "result_buf_q0");
    sc_trace(mVcdFile, j_reg_303, "j_reg_303");
    sc_trace(mVcdFile, indvar_flatten_reg_315, "indvar_flatten_reg_315");
    sc_trace(mVcdFile, p_reg_326, "p_reg_326");
    sc_trace(mVcdFile, i_reg_337, "i_reg_337");
    sc_trace(mVcdFile, j1_reg_348, "j1_reg_348");
    sc_trace(mVcdFile, m1_reg_359, "m1_reg_359");
    sc_trace(mVcdFile, phi_mul_reg_369, "phi_mul_reg_369");
    sc_trace(mVcdFile, l_reg_380, "l_reg_380");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_phi_mux_i_i_phi_fu_408_p4, "ap_phi_mux_i_i_phi_fu_408_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, os_idx_reg_415, "os_idx_reg_415");
    sc_trace(mVcdFile, tmp_1_fu_516_p1, "tmp_1_fu_516_p1");
    sc_trace(mVcdFile, tmp_3_cast_fu_616_p1, "tmp_3_cast_fu_616_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_661_p1, "tmp_13_cast_fu_661_p1");
    sc_trace(mVcdFile, tmp_6_fu_666_p1, "tmp_6_fu_666_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_683_p1, "tmp_3_i_fu_683_p1");
    sc_trace(mVcdFile, tmp_11_fu_689_p1, "tmp_11_fu_689_p1");
    sc_trace(mVcdFile, tmp_7_fu_711_p1, "tmp_7_fu_711_p1");
    sc_trace(mVcdFile, grp_fu_426_p0, "grp_fu_426_p0");
    sc_trace(mVcdFile, grp_fu_426_p1, "grp_fu_426_p1");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, grp_fu_431_p0, "grp_fu_431_p0");
    sc_trace(mVcdFile, grp_fu_431_p1, "grp_fu_431_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state64, "ap_CS_fsm_state64");
    sc_trace(mVcdFile, ap_CS_fsm_state68, "ap_CS_fsm_state68");
    sc_trace(mVcdFile, grp_fu_448_p1, "grp_fu_448_p1");
    sc_trace(mVcdFile, mul_fu_457_p1, "mul_fu_457_p1");
    sc_trace(mVcdFile, mul_fu_457_p2, "mul_fu_457_p2");
    sc_trace(mVcdFile, grp_fu_448_p2, "grp_fu_448_p2");
    sc_trace(mVcdFile, tmp_4_fu_473_p1, "tmp_4_fu_473_p1");
    sc_trace(mVcdFile, tmp_8_fu_477_p2, "tmp_8_fu_477_p2");
    sc_trace(mVcdFile, TILE_SIZE_fu_483_p2, "TILE_SIZE_fu_483_p2");
    sc_trace(mVcdFile, bound_fu_510_p0, "bound_fu_510_p0");
    sc_trace(mVcdFile, exitcond2_fu_547_p2, "exitcond2_fu_547_p2");
    sc_trace(mVcdFile, p_1_fu_541_p2, "p_1_fu_541_p2");
    sc_trace(mVcdFile, m_mid2_fu_572_p0, "m_mid2_fu_572_p0");
    sc_trace(mVcdFile, tmp_4_cast_fu_598_p1, "tmp_4_cast_fu_598_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_652_p1, "tmp_10_cast_fu_652_p1");
    sc_trace(mVcdFile, tmp_10_fu_656_p2, "tmp_10_fu_656_p2");
    sc_trace(mVcdFile, tmp_2_fu_726_p0, "tmp_2_fu_726_p0");
    sc_trace(mVcdFile, tmp_2_fu_726_p1, "tmp_2_fu_726_p1");
    sc_trace(mVcdFile, grp_fu_426_opcode, "grp_fu_426_opcode");
    sc_trace(mVcdFile, ap_block_pp0_stage1_00001, "ap_block_pp0_stage1_00001");
    sc_trace(mVcdFile, ap_block_state50_pp0_stage2_iter0, "ap_block_state50_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state55_pp0_stage2_iter1, "ap_block_state55_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state60_pp0_stage2_iter2, "ap_block_state60_pp0_stage2_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage2_00001, "ap_block_pp0_stage2_00001");
    sc_trace(mVcdFile, grp_fu_448_ap_start, "grp_fu_448_ap_start");
    sc_trace(mVcdFile, grp_fu_448_ap_done, "grp_fu_448_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_block_state51_pp0_stage3_iter0, "ap_block_state51_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state56_pp0_stage3_iter1, "ap_block_state56_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_state61_pp0_stage3_iter2, "ap_block_state61_pp0_stage3_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_510_p00, "bound_fu_510_p00");
    sc_trace(mVcdFile, m_mid2_fu_572_p00, "m_mid2_fu_572_p00");
    sc_trace(mVcdFile, mul_fu_457_p10, "mul_fu_457_p10");
    sc_trace(mVcdFile, tmp_2_fu_726_p00, "tmp_2_fu_726_p00");
#endif

    }
    mHdltvinHandle.open("kernel_matrix_tiled.hdltvin.dat");
    mHdltvoutHandle.open("kernel_matrix_tiled.hdltvout.dat");
}

kernel_matrix_tiled::~kernel_matrix_tiled() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel_matrix_tiled_CONTROL_BUS_s_axi_U;
    delete input_buf_U;
    delete index_buf_U;
    delete temp2_buf_U;
    delete result_buf_U;
    delete kernel_matrix_tilfYi_U1;
    delete kernel_matrix_tilg8j_U2;
    delete kernel_matrix_tilhbi_U3;
    delete kernel_matrix_tilibs_U4;
    delete kernel_matrix_tiljbC_U5;
}

void kernel_matrix_tiled::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel_matrix_tiled::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void kernel_matrix_tiled::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state48.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
                    esl_seteq<1,1,1>(exitcond_fu_640_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read()))) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state48.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state48.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read()))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
                    esl_seteq<1,1,1>(exitcond_fu_640_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_640_p2.read(), ap_const_lv1_1))) {
        i_i_reg_404 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_i_reg_404 = i_3_reg_849.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_630_p2.read(), ap_const_lv1_0))) {
        i_reg_337 = i_2_fu_635_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_495_p2.read(), ap_const_lv1_1))) {
        i_reg_337 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_630_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_315 = indvar_flatten_next_reg_767.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_495_p2.read(), ap_const_lv1_1))) {
        indvar_flatten_reg_315 = ap_const_lv33_0;
    }
    if ((esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        j1_reg_348 = j_2_reg_803.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        j1_reg_348 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        j_reg_303 = j_1_reg_754.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        j_reg_303 = ap_const_lv10_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_in_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_vld_out.read()))) {
            kernel_in_stream_data_V_0_sel_rd =  (sc_logic) (~kernel_in_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_in_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_ack_in.read()))) {
            kernel_in_stream_data_V_0_sel_wr =  (sc_logic) (~kernel_in_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_in_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_2)))) {
            kernel_in_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_1)))) {
            kernel_in_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(kernel_in_stream_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_ack_out.read()))))) {
            kernel_in_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            kernel_in_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_in_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_in_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_in_stream_dest_V_0_state.read())))) {
            kernel_in_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_in_stream_dest_V_0_state.read())))) {
            kernel_in_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_in_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_dest_V_0_ack_out.read()))))) {
            kernel_in_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            kernel_in_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_index_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_vld_out.read()))) {
            kernel_index_stream_data_V_0_sel_rd =  (sc_logic) (~kernel_index_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_index_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_ack_in.read()))) {
            kernel_index_stream_data_V_0_sel_wr =  (sc_logic) (~kernel_index_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_index_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_index_stream_data_V_0_state.read())))) {
            kernel_index_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_index_stream_data_V_0_state.read())))) {
            kernel_index_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_index_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_index_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_ack_out.read()))))) {
            kernel_index_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            kernel_index_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_index_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_index_stream_dest_V_0_state.read())))) {
            kernel_index_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_index_stream_dest_V_0_state.read())))) {
            kernel_index_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_index_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_index_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_index_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_index_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_dest_V_0_ack_out.read()))))) {
            kernel_index_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            kernel_index_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_vld_out.read()))) {
            kernel_out_stream_data_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_ack_in.read()))) {
            kernel_out_stream_data_V_1_sel_wr =  (sc_logic) (~kernel_out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_data_V_1_state.read())))) {
            kernel_out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_data_V_1_state.read())))) {
            kernel_out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_ack_out.read()))))) {
            kernel_out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_vld_out.read()))) {
            kernel_out_stream_dest_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_dest_V_1_state.read())))) {
            kernel_out_stream_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_dest_V_1_state.read())))) {
            kernel_out_stream_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_dest_V_1_ack_out.read()))))) {
            kernel_out_stream_dest_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_vld_out.read()))) {
            kernel_out_stream_id_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_id_V_1_state.read())))) {
            kernel_out_stream_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_id_V_1_state.read())))) {
            kernel_out_stream_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_id_V_1_ack_out.read()))))) {
            kernel_out_stream_id_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_vld_out.read()))) {
            kernel_out_stream_keep_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_keep_V_1_state.read())))) {
            kernel_out_stream_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_keep_V_1_state.read())))) {
            kernel_out_stream_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_keep_V_1_ack_out.read()))))) {
            kernel_out_stream_keep_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_vld_out.read()))) {
            kernel_out_stream_last_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_ack_in.read()))) {
            kernel_out_stream_last_V_1_sel_wr =  (sc_logic) (~kernel_out_stream_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_last_V_1_state.read())))) {
            kernel_out_stream_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_last_V_1_state.read())))) {
            kernel_out_stream_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_ack_out.read()))))) {
            kernel_out_stream_last_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_vld_out.read()))) {
            kernel_out_stream_strb_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_strb_V_1_state.read())))) {
            kernel_out_stream_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_strb_V_1_state.read())))) {
            kernel_out_stream_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_strb_V_1_ack_out.read()))))) {
            kernel_out_stream_strb_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_vld_out.read()))) {
            kernel_out_stream_user_V_1_sel_rd =  (sc_logic) (~kernel_out_stream_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        kernel_out_stream_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_user_V_1_state.read())))) {
            kernel_out_stream_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_user_V_1_state.read())))) {
            kernel_out_stream_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, kernel_out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, kernel_out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, kernel_out_stream_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, kernel_out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_user_V_1_ack_out.read()))))) {
            kernel_out_stream_user_V_1_state = ap_const_lv2_3;
        } else {
            kernel_out_stream_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_630_p2.read(), ap_const_lv1_1))) {
        l_reg_380 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        l_reg_380 = l_1_reg_835.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_586_p2.read(), ap_const_lv1_1))) {
        m1_reg_359 = m_mid2_reg_784.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read())) {
        m1_reg_359 = m_fu_694_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_530_p2.read(), ap_const_lv1_1))) {
        os_idx_reg_415 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read()))) {
        os_idx_reg_415 = os_idx_2_reg_898.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(tmp_s_fu_630_p2.read(), ap_const_lv1_0))) {
        p_reg_326 = m_mid2_v_v_reg_778.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_495_p2.read(), ap_const_lv1_1))) {
        p_reg_326 = ap_const_lv26_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_586_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_369 = ap_const_lv64_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read())) {
        phi_mul_reg_369 = next_mul_reg_818.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_640_p2.read(), ap_const_lv1_1))) {
        sum_i_reg_392 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845_pp0_iter2_reg.read()))) {
        sum_i_reg_392 = grp_fu_426_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        TILE_SIZE_1_reg_746 = TILE_SIZE_1_fu_488_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        TILE_SIZE_cast_reg_740 = mul_fu_457_p2.read().range(64, 39);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(exitcond3_fu_495_p2.read(), ap_const_lv1_1))) {
        bound_reg_759 = bound_fu_510_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        i_3_reg_849 = i_3_fu_677_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_530_p2.read(), ap_const_lv1_0))) {
        i_mid2_reg_772 = i_mid2_fu_553_p3.read();
        m_mid2_v_v_reg_778 = m_mid2_v_v_fu_561_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845.read()))) {
        index_buf_load_reg_864 = index_buf_q0.read();
        temp2_buf_load_reg_869 = temp2_buf_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        indvar_flatten_next_reg_767 = indvar_flatten_next_fu_535_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        j_1_reg_754 = j_1_fu_501_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        j_2_reg_803 = j_2_fu_592_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_load_A.read())) {
        kernel_in_stream_data_V_0_payload_A = kernel_in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_load_B.read())) {
        kernel_in_stream_data_V_0_payload_B = kernel_in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_load_A.read())) {
        kernel_index_stream_data_V_0_payload_A = kernel_index_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_load_B.read())) {
        kernel_index_stream_data_V_0_payload_B = kernel_index_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_load_A.read())) {
        kernel_out_stream_data_V_1_payload_A = tmp_9_fu_721_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_load_B.read())) {
        kernel_out_stream_data_V_1_payload_B = tmp_9_fu_721_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_load_A.read())) {
        kernel_out_stream_last_V_1_payload_A = last_assign_reg_908.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_load_B.read())) {
        kernel_out_stream_last_V_1_payload_B = last_assign_reg_908.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        l_1_reg_835 = l_1_fu_646_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_0))) {
        last_assign_reg_908 = last_assign_fu_716_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, length_x_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_x_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_x_0_ack_out.read())))) {
        length_x_0_data_reg = length_x.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        length_x_read_reg_732 = length_x_0_data_reg.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        m_mid2_reg_784 = m_mid2_fu_572_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        next_mul_reg_818 = next_mul_fu_624_p2.read();
        tmp_5_reg_813 = tmp_5_fu_620_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && !(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)))) {
        os_idx_2_reg_898 = os_idx_2_fu_705_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845_pp0_iter1_reg.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()))) {
        reg_442 = grp_fu_431_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read())) {
        tmp_2_i_reg_885 = grp_fu_437_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        tmp_2_reg_795 = tmp_2_fu_726_p2.read();
        tmp_3_mid2_reg_790 = tmp_3_mid2_fu_578_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(exitcond1_fu_586_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_808 = tmp_3_fu_602_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        tmp_4_i_reg_874 = grp_fu_426_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_i_reg_845 = tmp_i_fu_671_p2.read();
        tmp_i_reg_845_pp0_iter1_reg = tmp_i_reg_845.read();
        tmp_i_reg_845_pp0_iter2_reg = tmp_i_reg_845_pp0_iter1_reg.read();
    }
}

void kernel_matrix_tiled::thread_TILE_SIZE_1_fu_488_p3() {
    TILE_SIZE_1_fu_488_p3 = (!tmp_8_fu_477_p2.read()[0].is_01())? sc_lv<26>(): ((tmp_8_fu_477_p2.read()[0].to_bool())? TILE_SIZE_cast_reg_740.read(): TILE_SIZE_fu_483_p2.read());
}

void kernel_matrix_tiled::thread_TILE_SIZE_fu_483_p2() {
    TILE_SIZE_fu_483_p2 = (!ap_const_lv26_1.is_01() || !TILE_SIZE_cast_reg_740.read().is_01())? sc_lv<26>(): (sc_biguint<26>(ap_const_lv26_1) + sc_biguint<26>(TILE_SIZE_cast_reg_740.read()));
}

void kernel_matrix_tiled::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[47];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[48];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[49];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[51];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state64() {
    ap_CS_fsm_state64 = ap_CS_fsm.read()[52];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state67() {
    ap_CS_fsm_state67 = ap_CS_fsm.read()[55];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state68() {
    ap_CS_fsm_state68 = ap_CS_fsm.read()[56];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state76() {
    ap_CS_fsm_state76 = ap_CS_fsm.read()[64];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state77() {
    ap_CS_fsm_state77 = ap_CS_fsm.read()[65];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state78() {
    ap_CS_fsm_state78 = ap_CS_fsm.read()[66];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state79() {
    ap_CS_fsm_state79 = ap_CS_fsm.read()[67];
}

void kernel_matrix_tiled::thread_ap_CS_fsm_state80() {
    ap_CS_fsm_state80 = ap_CS_fsm.read()[68];
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage1_00001() {
    ap_block_pp0_stage1_00001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage2_00001() {
    ap_block_pp0_stage2_00001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state48_pp0_stage0_iter0() {
    ap_block_state48_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state49_pp0_stage1_iter0() {
    ap_block_state49_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state50_pp0_stage2_iter0() {
    ap_block_state50_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state51_pp0_stage3_iter0() {
    ap_block_state51_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state52_pp0_stage4_iter0() {
    ap_block_state52_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state53_pp0_stage0_iter1() {
    ap_block_state53_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state54_pp0_stage1_iter1() {
    ap_block_state54_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state55_pp0_stage2_iter1() {
    ap_block_state55_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state56_pp0_stage3_iter1() {
    ap_block_state56_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state57_pp0_stage4_iter1() {
    ap_block_state57_pp0_stage4_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state58_pp0_stage0_iter2() {
    ap_block_state58_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state59_pp0_stage1_iter2() {
    ap_block_state59_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state60_pp0_stage2_iter2() {
    ap_block_state60_pp0_stage2_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state61_pp0_stage3_iter2() {
    ap_block_state61_pp0_stage3_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state62_pp0_stage4_iter2() {
    ap_block_state62_pp0_stage4_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state63_pp0_stage0_iter3() {
    ap_block_state63_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel_matrix_tiled::thread_ap_block_state78() {
    ap_block_state78 = (esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0));
}

void kernel_matrix_tiled::thread_ap_condition_pp0_exit_iter0_state48() {
    if (esl_seteq<1,1,1>(tmp_i_fu_671_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state48 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state48 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel_matrix_tiled::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_ap_phi_mux_i_i_phi_fu_408_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_i_phi_fu_408_p4 = i_3_reg_849.read();
    } else {
        ap_phi_mux_i_i_phi_fu_408_p4 = i_i_reg_404.read();
    }
}

void kernel_matrix_tiled::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void kernel_matrix_tiled::thread_bound_fu_510_p0() {
    bound_fu_510_p0 =  (sc_lv<26>) (bound_fu_510_p00.read());
}

void kernel_matrix_tiled::thread_bound_fu_510_p00() {
    bound_fu_510_p00 = esl_zext<33,26>(TILE_SIZE_1_reg_746.read());
}

void kernel_matrix_tiled::thread_bound_fu_510_p2() {
    bound_fu_510_p2 = (!bound_fu_510_p0.read().is_01() || !ap_const_lv33_64.is_01())? sc_lv<33>(): sc_biguint<26>(bound_fu_510_p0.read()) * sc_biguint<33>(ap_const_lv33_64);
}

void kernel_matrix_tiled::thread_exitcond1_fu_586_p2() {
    exitcond1_fu_586_p2 = (!j1_reg_348.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j1_reg_348.read() == ap_const_lv10_310);
}

void kernel_matrix_tiled::thread_exitcond2_fu_547_p2() {
    exitcond2_fu_547_p2 = (!i_reg_337.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_337.read() == ap_const_lv7_64);
}

void kernel_matrix_tiled::thread_exitcond3_fu_495_p2() {
    exitcond3_fu_495_p2 = (!j_reg_303.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_303.read() == ap_const_lv10_310);
}

void kernel_matrix_tiled::thread_exitcond8_fu_700_p2() {
    exitcond8_fu_700_p2 = (!os_idx_reg_415.read().is_01() || !length_x_read_reg_732.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_reg_415.read() == length_x_read_reg_732.read());
}

void kernel_matrix_tiled::thread_exitcond_flatten_fu_530_p2() {
    exitcond_flatten_fu_530_p2 = (!indvar_flatten_reg_315.read().is_01() || !bound_reg_759.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_315.read() == bound_reg_759.read());
}

void kernel_matrix_tiled::thread_exitcond_fu_640_p2() {
    exitcond_fu_640_p2 = (!l_reg_380.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(l_reg_380.read() == ap_const_lv10_310);
}

void kernel_matrix_tiled::thread_grp_fu_426_opcode() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_00001.read(), ap_const_boolean_0))) {
        grp_fu_426_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_reg_845_pp0_iter2_reg.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_00001.read(), ap_const_boolean_0))) {
        grp_fu_426_opcode = ap_const_lv2_0;
    } else {
        grp_fu_426_opcode = "XX";
    }
}

void kernel_matrix_tiled::thread_grp_fu_426_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_426_p0 = sum_i_reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_426_p0 = index_buf_load_reg_864.read();
    } else {
        grp_fu_426_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_grp_fu_426_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_426_p1 = reg_442.read();
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_426_p1 = temp2_buf_load_reg_869.read();
    } else {
        grp_fu_426_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_grp_fu_431_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read())) {
        grp_fu_431_p0 = sum_i_reg_392.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_431_p0 = tmp_4_i_reg_874.read();
    } else {
        grp_fu_431_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_grp_fu_431_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read())) {
        grp_fu_431_p1 = ap_const_lv32_BD4CCCCD;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        grp_fu_431_p1 = tmp_4_i_reg_874.read();
    } else {
        grp_fu_431_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_grp_fu_448_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_448_ap_start = ap_const_logic_1;
    } else {
        grp_fu_448_ap_start = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_grp_fu_448_p1() {
    grp_fu_448_p1 =  (sc_lv<8>) (ap_const_lv32_64);
}

void kernel_matrix_tiled::thread_i_2_fu_635_p2() {
    i_2_fu_635_p2 = (!i_mid2_reg_772.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_mid2_reg_772.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void kernel_matrix_tiled::thread_i_3_fu_677_p2() {
    i_3_fu_677_p2 = (!ap_phi_mux_i_i_phi_fu_408_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_i_i_phi_fu_408_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix_tiled::thread_i_mid2_fu_553_p3() {
    i_mid2_fu_553_p3 = (!exitcond2_fu_547_p2.read()[0].is_01())? sc_lv<7>(): ((exitcond2_fu_547_p2.read()[0].to_bool())? ap_const_lv7_0: i_reg_337.read());
}

void kernel_matrix_tiled::thread_index_buf_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        index_buf_address0 =  (sc_lv<10>) (tmp_3_i_fu_683_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        index_buf_address0 =  (sc_lv<10>) (tmp_1_fu_516_p1.read());
    } else {
        index_buf_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_index_buf_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())))) {
        index_buf_ce0 = ap_const_logic_1;
    } else {
        index_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_index_buf_d0() {
    index_buf_d0 = kernel_index_stream_data_V_0_data_out.read();
}

void kernel_matrix_tiled::thread_index_buf_we0() {
    if ((esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        index_buf_we0 = ap_const_logic_1;
    } else {
        index_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_indvar_flatten_next_fu_535_p2() {
    indvar_flatten_next_fu_535_p2 = (!indvar_flatten_reg_315.read().is_01() || !ap_const_lv33_1.is_01())? sc_lv<33>(): (sc_biguint<33>(indvar_flatten_reg_315.read()) + sc_biguint<33>(ap_const_lv33_1));
}

void kernel_matrix_tiled::thread_input_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        input_buf_address0 =  (sc_lv<17>) (tmp_13_cast_fu_661_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        input_buf_address0 =  (sc_lv<17>) (tmp_3_cast_fu_616_p1.read());
    } else {
        input_buf_address0 =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_input_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         (esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())))) {
        input_buf_ce0 = ap_const_logic_1;
    } else {
        input_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_input_buf_d0() {
    input_buf_d0 = kernel_in_stream_data_V_0_data_out.read();
}

void kernel_matrix_tiled::thread_input_buf_we0() {
    if ((esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        input_buf_we0 = ap_const_logic_1;
    } else {
        input_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_j_1_fu_501_p2() {
    j_1_fu_501_p2 = (!j_reg_303.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_303.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix_tiled::thread_j_2_fu_592_p2() {
    j_2_fu_592_p2 = (!j1_reg_348.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j1_reg_348.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix_tiled::thread_kernel_in_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        kernel_in_stream_TDATA_blk_n = kernel_in_stream_data_V_0_state.read()[0];
    } else {
        kernel_in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void kernel_matrix_tiled::thread_kernel_in_stream_TREADY() {
    kernel_in_stream_TREADY = kernel_in_stream_dest_V_0_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_ack_in() {
    kernel_in_stream_data_V_0_ack_in = kernel_in_stream_data_V_0_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        kernel_in_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        kernel_in_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_in_stream_data_V_0_sel.read())) {
        kernel_in_stream_data_V_0_data_out = kernel_in_stream_data_V_0_payload_B.read();
    } else {
        kernel_in_stream_data_V_0_data_out = kernel_in_stream_data_V_0_payload_A.read();
    }
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_load_A() {
    kernel_in_stream_data_V_0_load_A = (kernel_in_stream_data_V_0_state_cmp_full.read() & ~kernel_in_stream_data_V_0_sel_wr.read());
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_load_B() {
    kernel_in_stream_data_V_0_load_B = (kernel_in_stream_data_V_0_sel_wr.read() & kernel_in_stream_data_V_0_state_cmp_full.read());
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_sel() {
    kernel_in_stream_data_V_0_sel = kernel_in_stream_data_V_0_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_state_cmp_full() {
    kernel_in_stream_data_V_0_state_cmp_full =  (sc_logic) ((!kernel_in_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(kernel_in_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_vld_in() {
    kernel_in_stream_data_V_0_vld_in = kernel_in_stream_TVALID.read();
}

void kernel_matrix_tiled::thread_kernel_in_stream_data_V_0_vld_out() {
    kernel_in_stream_data_V_0_vld_out = kernel_in_stream_data_V_0_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_in_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        kernel_in_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        kernel_in_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_in_stream_dest_V_0_vld_in() {
    kernel_in_stream_dest_V_0_vld_in = kernel_in_stream_TVALID.read();
}

void kernel_matrix_tiled::thread_kernel_index_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        kernel_index_stream_TDATA_blk_n = kernel_index_stream_data_V_0_state.read()[0];
    } else {
        kernel_index_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void kernel_matrix_tiled::thread_kernel_index_stream_TREADY() {
    kernel_index_stream_TREADY = kernel_index_stream_dest_V_0_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_ack_in() {
    kernel_index_stream_data_V_0_ack_in = kernel_index_stream_data_V_0_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        kernel_index_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        kernel_index_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_index_stream_data_V_0_sel.read())) {
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_B.read();
    } else {
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_A.read();
    }
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_load_A() {
    kernel_index_stream_data_V_0_load_A = (kernel_index_stream_data_V_0_state_cmp_full.read() & ~kernel_index_stream_data_V_0_sel_wr.read());
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_load_B() {
    kernel_index_stream_data_V_0_load_B = (kernel_index_stream_data_V_0_sel_wr.read() & kernel_index_stream_data_V_0_state_cmp_full.read());
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_sel() {
    kernel_index_stream_data_V_0_sel = kernel_index_stream_data_V_0_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_state_cmp_full() {
    kernel_index_stream_data_V_0_state_cmp_full =  (sc_logic) ((!kernel_index_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(kernel_index_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_vld_in() {
    kernel_index_stream_data_V_0_vld_in = kernel_index_stream_TVALID.read();
}

void kernel_matrix_tiled::thread_kernel_index_stream_data_V_0_vld_out() {
    kernel_index_stream_data_V_0_vld_out = kernel_index_stream_data_V_0_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_index_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        kernel_index_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        kernel_index_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_index_stream_dest_V_0_vld_in() {
    kernel_index_stream_dest_V_0_vld_in = kernel_index_stream_TVALID.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TDATA() {
    kernel_out_stream_TDATA = kernel_out_stream_data_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read()))) {
        kernel_out_stream_TDATA_blk_n = kernel_out_stream_data_V_1_state.read()[1];
    } else {
        kernel_out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_TDEST() {
    kernel_out_stream_TDEST = kernel_out_stream_dest_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TID() {
    kernel_out_stream_TID = kernel_out_stream_id_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TKEEP() {
    kernel_out_stream_TKEEP = kernel_out_stream_keep_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TLAST() {
    kernel_out_stream_TLAST = kernel_out_stream_last_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TSTRB() {
    kernel_out_stream_TSTRB = kernel_out_stream_strb_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TUSER() {
    kernel_out_stream_TUSER = kernel_out_stream_user_V_1_data_out.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_TVALID() {
    kernel_out_stream_TVALID = kernel_out_stream_dest_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_ack_in() {
    kernel_out_stream_data_V_1_ack_in = kernel_out_stream_data_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_ack_out() {
    kernel_out_stream_data_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_data_V_1_sel.read())) {
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_B.read();
    } else {
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_A.read();
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_load_A() {
    kernel_out_stream_data_V_1_load_A = (kernel_out_stream_data_V_1_state_cmp_full.read() & ~kernel_out_stream_data_V_1_sel_wr.read());
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_load_B() {
    kernel_out_stream_data_V_1_load_B = (kernel_out_stream_data_V_1_sel_wr.read() & kernel_out_stream_data_V_1_state_cmp_full.read());
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_sel() {
    kernel_out_stream_data_V_1_sel = kernel_out_stream_data_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_state_cmp_full() {
    kernel_out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!kernel_out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(kernel_out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_data_V_1_vld_out() {
    kernel_out_stream_data_V_1_vld_out = kernel_out_stream_data_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_ack_in() {
    kernel_out_stream_dest_V_1_ack_in = kernel_out_stream_dest_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_ack_out() {
    kernel_out_stream_dest_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_data_out() {
    kernel_out_stream_dest_V_1_data_out = ap_const_lv5_0;
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_sel() {
    kernel_out_stream_dest_V_1_sel = kernel_out_stream_dest_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_dest_V_1_vld_out() {
    kernel_out_stream_dest_V_1_vld_out = kernel_out_stream_dest_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_ack_in() {
    kernel_out_stream_id_V_1_ack_in = kernel_out_stream_id_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_ack_out() {
    kernel_out_stream_id_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_data_out() {
    kernel_out_stream_id_V_1_data_out = ap_const_lv5_0;
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_sel() {
    kernel_out_stream_id_V_1_sel = kernel_out_stream_id_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_id_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_id_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_id_V_1_vld_out() {
    kernel_out_stream_id_V_1_vld_out = kernel_out_stream_id_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_ack_in() {
    kernel_out_stream_keep_V_1_ack_in = kernel_out_stream_keep_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_ack_out() {
    kernel_out_stream_keep_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_data_out() {
    kernel_out_stream_keep_V_1_data_out = ap_const_lv4_F;
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_sel() {
    kernel_out_stream_keep_V_1_sel = kernel_out_stream_keep_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_keep_V_1_vld_out() {
    kernel_out_stream_keep_V_1_vld_out = kernel_out_stream_keep_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_ack_in() {
    kernel_out_stream_last_V_1_ack_in = kernel_out_stream_last_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_ack_out() {
    kernel_out_stream_last_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, kernel_out_stream_last_V_1_sel.read())) {
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_B.read();
    } else {
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_A.read();
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_load_A() {
    kernel_out_stream_last_V_1_load_A = (kernel_out_stream_last_V_1_state_cmp_full.read() & ~kernel_out_stream_last_V_1_sel_wr.read());
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_load_B() {
    kernel_out_stream_last_V_1_load_B = (kernel_out_stream_last_V_1_sel_wr.read() & kernel_out_stream_last_V_1_state_cmp_full.read());
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_sel() {
    kernel_out_stream_last_V_1_sel = kernel_out_stream_last_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_state_cmp_full() {
    kernel_out_stream_last_V_1_state_cmp_full =  (sc_logic) ((!kernel_out_stream_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(kernel_out_stream_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_last_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_last_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_last_V_1_vld_out() {
    kernel_out_stream_last_V_1_vld_out = kernel_out_stream_last_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_ack_in() {
    kernel_out_stream_strb_V_1_ack_in = kernel_out_stream_strb_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_ack_out() {
    kernel_out_stream_strb_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_data_out() {
    kernel_out_stream_strb_V_1_data_out = ap_const_lv4_F;
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_sel() {
    kernel_out_stream_strb_V_1_sel = kernel_out_stream_strb_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_strb_V_1_vld_out() {
    kernel_out_stream_strb_V_1_vld_out = kernel_out_stream_strb_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_ack_in() {
    kernel_out_stream_user_V_1_ack_in = kernel_out_stream_user_V_1_state.read()[1];
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_ack_out() {
    kernel_out_stream_user_V_1_ack_out = kernel_out_stream_TREADY.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_data_out() {
    kernel_out_stream_user_V_1_data_out = ap_const_lv4_0;
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_sel() {
    kernel_out_stream_user_V_1_sel = kernel_out_stream_user_V_1_sel_rd.read();
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        kernel_out_stream_user_V_1_vld_in = ap_const_logic_1;
    } else {
        kernel_out_stream_user_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_kernel_out_stream_user_V_1_vld_out() {
    kernel_out_stream_user_V_1_vld_out = kernel_out_stream_user_V_1_state.read()[0];
}

void kernel_matrix_tiled::thread_l_1_fu_646_p2() {
    l_1_fu_646_p2 = (!l_reg_380.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(l_reg_380.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix_tiled::thread_last_assign_fu_716_p2() {
    last_assign_fu_716_p2 = (!os_idx_2_fu_705_p2.read().is_01() || !length_x_read_reg_732.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_2_fu_705_p2.read() == length_x_read_reg_732.read());
}

void kernel_matrix_tiled::thread_length_x_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && 
         esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_1))) {
        length_x_0_ack_out = ap_const_logic_1;
    } else {
        length_x_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_m_fu_694_p2() {
    m_fu_694_p2 = (!m1_reg_359.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(m1_reg_359.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void kernel_matrix_tiled::thread_m_mid2_fu_572_p0() {
    m_mid2_fu_572_p0 =  (sc_lv<26>) (m_mid2_fu_572_p00.read());
}

void kernel_matrix_tiled::thread_m_mid2_fu_572_p00() {
    m_mid2_fu_572_p00 = esl_zext<32,26>(m_mid2_v_v_reg_778.read());
}

void kernel_matrix_tiled::thread_m_mid2_fu_572_p2() {
    m_mid2_fu_572_p2 = (!m_mid2_fu_572_p0.read().is_01() || !ap_const_lv32_64.is_01())? sc_lv<32>(): sc_biguint<26>(m_mid2_fu_572_p0.read()) * sc_biguint<32>(ap_const_lv32_64);
}

void kernel_matrix_tiled::thread_m_mid2_v_v_fu_561_p3() {
    m_mid2_v_v_fu_561_p3 = (!exitcond2_fu_547_p2.read()[0].is_01())? sc_lv<26>(): ((exitcond2_fu_547_p2.read()[0].to_bool())? p_1_fu_541_p2.read(): p_reg_326.read());
}

void kernel_matrix_tiled::thread_mul_fu_457_p1() {
    mul_fu_457_p1 =  (sc_lv<32>) (mul_fu_457_p10.read());
}

void kernel_matrix_tiled::thread_mul_fu_457_p10() {
    mul_fu_457_p10 = esl_zext<65,32>(length_x_read_reg_732.read());
}

void kernel_matrix_tiled::thread_mul_fu_457_p2() {
    mul_fu_457_p2 = (!ap_const_lv65_147AE147B.is_01() || !mul_fu_457_p1.read().is_01())? sc_lv<65>(): sc_biguint<65>(ap_const_lv65_147AE147B) * sc_biguint<32>(mul_fu_457_p1.read());
}

void kernel_matrix_tiled::thread_next_mul_fu_624_p2() {
    next_mul_fu_624_p2 = (!ap_const_lv64_310.is_01() || !phi_mul_reg_369.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_310) + sc_biguint<64>(phi_mul_reg_369.read()));
}

void kernel_matrix_tiled::thread_os_idx_2_fu_705_p2() {
    os_idx_2_fu_705_p2 = (!os_idx_reg_415.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(os_idx_reg_415.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void kernel_matrix_tiled::thread_p_1_fu_541_p2() {
    p_1_fu_541_p2 = (!p_reg_326.read().is_01() || !ap_const_lv26_1.is_01())? sc_lv<26>(): (sc_biguint<26>(p_reg_326.read()) + sc_biguint<26>(ap_const_lv26_1));
}

void kernel_matrix_tiled::thread_result_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read())) {
        result_buf_address0 =  (sc_lv<12>) (tmp_7_fu_711_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read())) {
        result_buf_address0 =  (sc_lv<12>) (tmp_11_fu_689_p1.read());
    } else {
        result_buf_address0 =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_result_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && 
          !(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0))))) {
        result_buf_ce0 = ap_const_logic_1;
    } else {
        result_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_result_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read())) {
        result_buf_we0 = ap_const_logic_1;
    } else {
        result_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_temp2_buf_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        temp2_buf_address0 =  (sc_lv<10>) (tmp_3_i_fu_683_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        temp2_buf_address0 =  (sc_lv<10>) (tmp_6_fu_666_p1.read());
    } else {
        temp2_buf_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void kernel_matrix_tiled::thread_temp2_buf_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
        temp2_buf_ce0 = ap_const_logic_1;
    } else {
        temp2_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_temp2_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        temp2_buf_we0 = ap_const_logic_1;
    } else {
        temp2_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix_tiled::thread_tmp_10_cast_fu_652_p1() {
    tmp_10_cast_fu_652_p1 = esl_zext<18,10>(l_reg_380.read());
}

void kernel_matrix_tiled::thread_tmp_10_fu_656_p2() {
    tmp_10_fu_656_p2 = (!tmp_5_reg_813.read().is_01() || !tmp_10_cast_fu_652_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_5_reg_813.read()) + sc_biguint<18>(tmp_10_cast_fu_652_p1.read()));
}

void kernel_matrix_tiled::thread_tmp_11_fu_689_p1() {
    tmp_11_fu_689_p1 = esl_sext<64,32>(m1_reg_359.read());
}

void kernel_matrix_tiled::thread_tmp_13_cast_fu_661_p1() {
    tmp_13_cast_fu_661_p1 = esl_zext<64,18>(tmp_10_fu_656_p2.read());
}

void kernel_matrix_tiled::thread_tmp_1_fu_516_p1() {
    tmp_1_fu_516_p1 = esl_zext<64,10>(j_reg_303.read());
}

void kernel_matrix_tiled::thread_tmp_2_fu_726_p0() {
    tmp_2_fu_726_p0 =  (sc_lv<7>) (tmp_2_fu_726_p00.read());
}

void kernel_matrix_tiled::thread_tmp_2_fu_726_p00() {
    tmp_2_fu_726_p00 = esl_zext<17,7>(i_mid2_reg_772.read());
}

void kernel_matrix_tiled::thread_tmp_2_fu_726_p1() {
    tmp_2_fu_726_p1 =  (sc_lv<11>) (ap_const_lv17_310);
}

void kernel_matrix_tiled::thread_tmp_3_cast_fu_616_p1() {
    tmp_3_cast_fu_616_p1 = esl_zext<64,17>(tmp_3_reg_808.read());
}

void kernel_matrix_tiled::thread_tmp_3_fu_602_p2() {
    tmp_3_fu_602_p2 = (!tmp_2_reg_795.read().is_01() || !tmp_4_cast_fu_598_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(tmp_2_reg_795.read()) + sc_biguint<17>(tmp_4_cast_fu_598_p1.read()));
}

void kernel_matrix_tiled::thread_tmp_3_i_fu_683_p1() {
    tmp_3_i_fu_683_p1 = esl_zext<64,10>(ap_phi_mux_i_i_phi_fu_408_p4.read());
}

void kernel_matrix_tiled::thread_tmp_3_mid2_fu_578_p2() {
    tmp_3_mid2_fu_578_p2 = (!m_mid2_reg_784.read().is_01() || !ap_const_lv32_64.is_01())? sc_lv<32>(): (sc_biguint<32>(m_mid2_reg_784.read()) + sc_biguint<32>(ap_const_lv32_64));
}

void kernel_matrix_tiled::thread_tmp_4_cast_fu_598_p1() {
    tmp_4_cast_fu_598_p1 = esl_zext<17,10>(j1_reg_348.read());
}

void kernel_matrix_tiled::thread_tmp_4_fu_473_p1() {
    tmp_4_fu_473_p1 = grp_fu_448_p2.read().range(8-1, 0);
}

void kernel_matrix_tiled::thread_tmp_5_fu_620_p1() {
    tmp_5_fu_620_p1 = phi_mul_reg_369.read().range(18-1, 0);
}

void kernel_matrix_tiled::thread_tmp_6_fu_666_p1() {
    tmp_6_fu_666_p1 = esl_zext<64,10>(l_reg_380.read());
}

void kernel_matrix_tiled::thread_tmp_7_fu_711_p1() {
    tmp_7_fu_711_p1 = esl_sext<64,32>(os_idx_reg_415.read());
}

void kernel_matrix_tiled::thread_tmp_8_fu_477_p2() {
    tmp_8_fu_477_p2 = (!tmp_4_fu_473_p1.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_473_p1.read() == ap_const_lv8_0);
}

void kernel_matrix_tiled::thread_tmp_9_fu_721_p1() {
    tmp_9_fu_721_p1 = result_buf_q0.read();
}

void kernel_matrix_tiled::thread_tmp_i_fu_671_p2() {
    tmp_i_fu_671_p2 = (!ap_phi_mux_i_i_phi_fu_408_p4.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_i_phi_fu_408_p4.read() == ap_const_lv10_310);
}

void kernel_matrix_tiled::thread_tmp_s_fu_630_p2() {
    tmp_s_fu_630_p2 = (!m1_reg_359.read().is_01() || !tmp_3_mid2_reg_790.read().is_01())? sc_lv<1>(): (sc_bigint<32>(m1_reg_359.read()) < sc_bigint<32>(tmp_3_mid2_reg_790.read()));
}

void kernel_matrix_tiled::thread_ap_NS_fsm() {
    if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(exitcond3_fu_495_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state40;
        } else {
            ap_NS_fsm = ap_ST_fsm_state39;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        if ((esl_seteq<1,1,1>(kernel_index_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
            ap_NS_fsm = ap_ST_fsm_state38;
        } else {
            ap_NS_fsm = ap_ST_fsm_state39;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()) && esl_seteq<1,1,1>(exitcond_flatten_fu_530_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state78;
        } else {
            ap_NS_fsm = ap_ST_fsm_state41;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(exitcond1_fu_586_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state45;
        } else {
            ap_NS_fsm = ap_ST_fsm_state44;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        if ((esl_seteq<1,1,1>(kernel_in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
            ap_NS_fsm = ap_ST_fsm_state43;
        } else {
            ap_NS_fsm = ap_ST_fsm_state44;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(tmp_s_fu_630_p2.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_state40;
        } else {
            ap_NS_fsm = ap_ST_fsm_state46;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && esl_seteq<1,1,1>(exitcond_fu_640_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        } else {
            ap_NS_fsm = ap_ST_fsm_state47;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage0))
    {
        if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(tmp_i_fu_671_p2.read(), ap_const_lv1_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage1;
        } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_i_fu_671_p2.read(), ap_const_lv1_1)))) {
            ap_NS_fsm = ap_ST_fsm_state64;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage1))
    {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read())) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage1;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage2))
    {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage2_subdone.read())) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage2;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage3))
    {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read())) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage3;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage4))
    {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state72;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state73;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        ap_NS_fsm = ap_ST_fsm_state74;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state74))
    {
        ap_NS_fsm = ap_ST_fsm_state75;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state75))
    {
        ap_NS_fsm = ap_ST_fsm_state76;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state76))
    {
        ap_NS_fsm = ap_ST_fsm_state77;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state77))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state78))
    {
        if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else if ((!(esl_seteq<1,1,1>(kernel_out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(kernel_out_stream_strb_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()) && esl_seteq<1,1,1>(exitcond8_fu_700_p2.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_state79;
        } else {
            ap_NS_fsm = ap_ST_fsm_state78;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state79))
    {
        if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
            ap_NS_fsm = ap_ST_fsm_state80;
        } else {
            ap_NS_fsm = ap_ST_fsm_state79;
        }
    }
    else if (esl_seteq<1,69,69>(ap_CS_fsm.read(), ap_ST_fsm_state80))
    {
        if ((esl_seteq<1,1,1>(kernel_out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read()))) {
            ap_NS_fsm = ap_ST_fsm_state78;
        } else {
            ap_NS_fsm = ap_ST_fsm_state80;
        }
    }
    else
    {
        ap_NS_fsm =  (sc_lv<69>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void kernel_matrix_tiled::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TDATA\" :  \"" << kernel_in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TVALID\" :  \"" << kernel_in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"kernel_in_stream_TREADY\" :  \"" << kernel_in_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TKEEP\" :  \"" << kernel_in_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TSTRB\" :  \"" << kernel_in_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TUSER\" :  \"" << kernel_in_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TLAST\" :  \"" << kernel_in_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TID\" :  \"" << kernel_in_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TDEST\" :  \"" << kernel_in_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TDATA\" :  \"" << kernel_index_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TVALID\" :  \"" << kernel_index_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_index_stream_TREADY\" :  \"" << kernel_index_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TKEEP\" :  \"" << kernel_index_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TSTRB\" :  \"" << kernel_index_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TUSER\" :  \"" << kernel_index_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TLAST\" :  \"" << kernel_index_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TID\" :  \"" << kernel_index_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TDEST\" :  \"" << kernel_index_stream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TDATA\" :  \"" << kernel_out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TVALID\" :  \"" << kernel_out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_out_stream_TREADY\" :  \"" << kernel_out_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TKEEP\" :  \"" << kernel_out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TSTRB\" :  \"" << kernel_out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TUSER\" :  \"" << kernel_out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TLAST\" :  \"" << kernel_out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TID\" :  \"" << kernel_out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TDEST\" :  \"" << kernel_out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

