// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_matrix_tiled,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=268,HLS_SYN_DSP=23,HLS_SYN_FF=2348,HLS_SYN_LUT=3597,HLS_VERSION=2018_2}" *)

module kernel_matrix_tiled (
        ap_clk,
        ap_rst_n,
        kernel_in_stream_TDATA,
        kernel_in_stream_TVALID,
        kernel_in_stream_TREADY,
        kernel_in_stream_TKEEP,
        kernel_in_stream_TSTRB,
        kernel_in_stream_TUSER,
        kernel_in_stream_TLAST,
        kernel_in_stream_TID,
        kernel_in_stream_TDEST,
        kernel_index_stream_TDATA,
        kernel_index_stream_TVALID,
        kernel_index_stream_TREADY,
        kernel_index_stream_TKEEP,
        kernel_index_stream_TSTRB,
        kernel_index_stream_TUSER,
        kernel_index_stream_TLAST,
        kernel_index_stream_TID,
        kernel_index_stream_TDEST,
        kernel_out_stream_TDATA,
        kernel_out_stream_TVALID,
        kernel_out_stream_TREADY,
        kernel_out_stream_TKEEP,
        kernel_out_stream_TSTRB,
        kernel_out_stream_TUSER,
        kernel_out_stream_TLAST,
        kernel_out_stream_TID,
        kernel_out_stream_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_pp0_stage0 = 69'd140737488355328;
parameter    ap_ST_fsm_pp0_stage1 = 69'd281474976710656;
parameter    ap_ST_fsm_pp0_stage2 = 69'd562949953421312;
parameter    ap_ST_fsm_pp0_stage3 = 69'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage4 = 69'd2251799813685248;
parameter    ap_ST_fsm_state64 = 69'd4503599627370496;
parameter    ap_ST_fsm_state65 = 69'd9007199254740992;
parameter    ap_ST_fsm_state66 = 69'd18014398509481984;
parameter    ap_ST_fsm_state67 = 69'd36028797018963968;
parameter    ap_ST_fsm_state68 = 69'd72057594037927936;
parameter    ap_ST_fsm_state69 = 69'd144115188075855872;
parameter    ap_ST_fsm_state70 = 69'd288230376151711744;
parameter    ap_ST_fsm_state71 = 69'd576460752303423488;
parameter    ap_ST_fsm_state72 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state73 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state74 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state75 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state76 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state77 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state78 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state79 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state80 = 69'd295147905179352825856;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] kernel_in_stream_TDATA;
input   kernel_in_stream_TVALID;
output   kernel_in_stream_TREADY;
input  [3:0] kernel_in_stream_TKEEP;
input  [3:0] kernel_in_stream_TSTRB;
input  [3:0] kernel_in_stream_TUSER;
input  [0:0] kernel_in_stream_TLAST;
input  [4:0] kernel_in_stream_TID;
input  [4:0] kernel_in_stream_TDEST;
input  [31:0] kernel_index_stream_TDATA;
input   kernel_index_stream_TVALID;
output   kernel_index_stream_TREADY;
input  [3:0] kernel_index_stream_TKEEP;
input  [3:0] kernel_index_stream_TSTRB;
input  [3:0] kernel_index_stream_TUSER;
input  [0:0] kernel_index_stream_TLAST;
input  [4:0] kernel_index_stream_TID;
input  [4:0] kernel_index_stream_TDEST;
output  [31:0] kernel_out_stream_TDATA;
output   kernel_out_stream_TVALID;
input   kernel_out_stream_TREADY;
output  [3:0] kernel_out_stream_TKEEP;
output  [3:0] kernel_out_stream_TSTRB;
output  [3:0] kernel_out_stream_TUSER;
output  [0:0] kernel_out_stream_TLAST;
output  [4:0] kernel_out_stream_TID;
output  [4:0] kernel_out_stream_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] kernel_in_stream_data_V_0_data_out;
wire    kernel_in_stream_data_V_0_vld_in;
wire    kernel_in_stream_data_V_0_vld_out;
wire    kernel_in_stream_data_V_0_ack_in;
reg    kernel_in_stream_data_V_0_ack_out;
reg   [31:0] kernel_in_stream_data_V_0_payload_A;
reg   [31:0] kernel_in_stream_data_V_0_payload_B;
reg    kernel_in_stream_data_V_0_sel_rd;
reg    kernel_in_stream_data_V_0_sel_wr;
wire    kernel_in_stream_data_V_0_sel;
wire    kernel_in_stream_data_V_0_load_A;
wire    kernel_in_stream_data_V_0_load_B;
reg   [1:0] kernel_in_stream_data_V_0_state;
wire    kernel_in_stream_data_V_0_state_cmp_full;
wire    kernel_in_stream_dest_V_0_vld_in;
reg    kernel_in_stream_dest_V_0_ack_out;
reg   [1:0] kernel_in_stream_dest_V_0_state;
reg   [31:0] kernel_index_stream_data_V_0_data_out;
wire    kernel_index_stream_data_V_0_vld_in;
wire    kernel_index_stream_data_V_0_vld_out;
wire    kernel_index_stream_data_V_0_ack_in;
reg    kernel_index_stream_data_V_0_ack_out;
reg   [31:0] kernel_index_stream_data_V_0_payload_A;
reg   [31:0] kernel_index_stream_data_V_0_payload_B;
reg    kernel_index_stream_data_V_0_sel_rd;
reg    kernel_index_stream_data_V_0_sel_wr;
wire    kernel_index_stream_data_V_0_sel;
wire    kernel_index_stream_data_V_0_load_A;
wire    kernel_index_stream_data_V_0_load_B;
reg   [1:0] kernel_index_stream_data_V_0_state;
wire    kernel_index_stream_data_V_0_state_cmp_full;
wire    kernel_index_stream_dest_V_0_vld_in;
reg    kernel_index_stream_dest_V_0_ack_out;
reg   [1:0] kernel_index_stream_dest_V_0_state;
reg   [31:0] kernel_out_stream_data_V_1_data_out;
reg    kernel_out_stream_data_V_1_vld_in;
wire    kernel_out_stream_data_V_1_vld_out;
wire    kernel_out_stream_data_V_1_ack_in;
wire    kernel_out_stream_data_V_1_ack_out;
reg   [31:0] kernel_out_stream_data_V_1_payload_A;
reg   [31:0] kernel_out_stream_data_V_1_payload_B;
reg    kernel_out_stream_data_V_1_sel_rd;
reg    kernel_out_stream_data_V_1_sel_wr;
wire    kernel_out_stream_data_V_1_sel;
wire    kernel_out_stream_data_V_1_load_A;
wire    kernel_out_stream_data_V_1_load_B;
reg   [1:0] kernel_out_stream_data_V_1_state;
wire    kernel_out_stream_data_V_1_state_cmp_full;
wire   [3:0] kernel_out_stream_keep_V_1_data_out;
reg    kernel_out_stream_keep_V_1_vld_in;
wire    kernel_out_stream_keep_V_1_vld_out;
wire    kernel_out_stream_keep_V_1_ack_in;
wire    kernel_out_stream_keep_V_1_ack_out;
reg    kernel_out_stream_keep_V_1_sel_rd;
wire    kernel_out_stream_keep_V_1_sel;
reg   [1:0] kernel_out_stream_keep_V_1_state;
wire   [3:0] kernel_out_stream_strb_V_1_data_out;
reg    kernel_out_stream_strb_V_1_vld_in;
wire    kernel_out_stream_strb_V_1_vld_out;
wire    kernel_out_stream_strb_V_1_ack_in;
wire    kernel_out_stream_strb_V_1_ack_out;
reg    kernel_out_stream_strb_V_1_sel_rd;
wire    kernel_out_stream_strb_V_1_sel;
reg   [1:0] kernel_out_stream_strb_V_1_state;
wire   [3:0] kernel_out_stream_user_V_1_data_out;
reg    kernel_out_stream_user_V_1_vld_in;
wire    kernel_out_stream_user_V_1_vld_out;
wire    kernel_out_stream_user_V_1_ack_in;
wire    kernel_out_stream_user_V_1_ack_out;
reg    kernel_out_stream_user_V_1_sel_rd;
wire    kernel_out_stream_user_V_1_sel;
reg   [1:0] kernel_out_stream_user_V_1_state;
reg   [0:0] kernel_out_stream_last_V_1_data_out;
reg    kernel_out_stream_last_V_1_vld_in;
wire    kernel_out_stream_last_V_1_vld_out;
wire    kernel_out_stream_last_V_1_ack_in;
wire    kernel_out_stream_last_V_1_ack_out;
reg   [0:0] kernel_out_stream_last_V_1_payload_A;
reg   [0:0] kernel_out_stream_last_V_1_payload_B;
reg    kernel_out_stream_last_V_1_sel_rd;
reg    kernel_out_stream_last_V_1_sel_wr;
wire    kernel_out_stream_last_V_1_sel;
wire    kernel_out_stream_last_V_1_load_A;
wire    kernel_out_stream_last_V_1_load_B;
reg   [1:0] kernel_out_stream_last_V_1_state;
wire    kernel_out_stream_last_V_1_state_cmp_full;
wire   [4:0] kernel_out_stream_id_V_1_data_out;
reg    kernel_out_stream_id_V_1_vld_in;
wire    kernel_out_stream_id_V_1_vld_out;
wire    kernel_out_stream_id_V_1_ack_in;
wire    kernel_out_stream_id_V_1_ack_out;
reg    kernel_out_stream_id_V_1_sel_rd;
wire    kernel_out_stream_id_V_1_sel;
reg   [1:0] kernel_out_stream_id_V_1_state;
wire   [4:0] kernel_out_stream_dest_V_1_data_out;
reg    kernel_out_stream_dest_V_1_vld_in;
wire    kernel_out_stream_dest_V_1_vld_out;
wire    kernel_out_stream_dest_V_1_ack_in;
wire    kernel_out_stream_dest_V_1_ack_out;
reg    kernel_out_stream_dest_V_1_sel_rd;
wire    kernel_out_stream_dest_V_1_sel;
reg   [1:0] kernel_out_stream_dest_V_1_state;
wire   [31:0] length_x;
reg   [31:0] length_x_0_data_reg;
reg    length_x_0_vld_reg;
reg    length_x_0_ack_out;
reg    kernel_in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state44;
reg    kernel_index_stream_TDATA_blk_n;
wire    ap_CS_fsm_state39;
reg    kernel_out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
reg   [31:0] sum_i_reg_392;
reg   [9:0] i_i_reg_404;
wire   [31:0] grp_fu_431_p2;
reg   [31:0] reg_442;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state48_pp0_stage0_iter0;
wire    ap_block_state53_pp0_stage0_iter1;
wire    ap_block_state58_pp0_stage0_iter2;
wire    ap_block_state63_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_i_reg_845;
reg   [0:0] tmp_i_reg_845_pp0_iter1_reg;
wire    ap_CS_fsm_state67;
reg   [31:0] length_x_read_reg_732;
wire    ap_CS_fsm_state2;
reg   [25:0] TILE_SIZE_cast_reg_740;
wire    ap_CS_fsm_state36;
wire   [25:0] TILE_SIZE_1_fu_488_p3;
reg   [25:0] TILE_SIZE_1_reg_746;
wire    ap_CS_fsm_state37;
wire   [9:0] j_1_fu_501_p2;
reg   [9:0] j_1_reg_754;
wire    ap_CS_fsm_state38;
wire   [32:0] bound_fu_510_p2;
reg   [32:0] bound_reg_759;
wire   [0:0] exitcond3_fu_495_p2;
wire   [32:0] indvar_flatten_next_fu_535_p2;
reg   [32:0] indvar_flatten_next_reg_767;
wire    ap_CS_fsm_state40;
wire   [6:0] i_mid2_fu_553_p3;
reg   [6:0] i_mid2_reg_772;
wire   [0:0] exitcond_flatten_fu_530_p2;
wire   [25:0] m_mid2_v_v_fu_561_p3;
reg   [25:0] m_mid2_v_v_reg_778;
wire   [31:0] m_mid2_fu_572_p2;
reg   [31:0] m_mid2_reg_784;
wire    ap_CS_fsm_state41;
wire   [31:0] tmp_3_mid2_fu_578_p2;
reg   [31:0] tmp_3_mid2_reg_790;
wire    ap_CS_fsm_state42;
wire   [16:0] tmp_2_fu_726_p2;
reg   [16:0] tmp_2_reg_795;
wire   [9:0] j_2_fu_592_p2;
reg   [9:0] j_2_reg_803;
wire    ap_CS_fsm_state43;
(* use_dsp48 = "no" *) wire   [16:0] tmp_3_fu_602_p2;
reg   [16:0] tmp_3_reg_808;
wire   [0:0] exitcond1_fu_586_p2;
wire   [17:0] tmp_5_fu_620_p1;
reg   [17:0] tmp_5_reg_813;
wire    ap_CS_fsm_state45;
wire   [63:0] next_mul_fu_624_p2;
reg   [63:0] next_mul_reg_818;
wire   [6:0] i_2_fu_635_p2;
wire   [0:0] tmp_s_fu_630_p2;
wire   [0:0] exitcond_fu_640_p2;
wire    ap_CS_fsm_state46;
wire   [9:0] l_1_fu_646_p2;
reg   [9:0] l_1_reg_835;
wire   [0:0] tmp_i_fu_671_p2;
reg   [0:0] tmp_i_reg_845_pp0_iter2_reg;
wire   [9:0] i_3_fu_677_p2;
reg   [9:0] i_3_reg_849;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] index_buf_q0;
reg   [31:0] index_buf_load_reg_864;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state49_pp0_stage1_iter0;
wire    ap_block_state54_pp0_stage1_iter1;
wire    ap_block_state59_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] temp2_buf_q0;
reg   [31:0] temp2_buf_load_reg_869;
wire   [31:0] grp_fu_426_p2;
reg   [31:0] tmp_4_i_reg_874;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] tmp_2_i_reg_885;
wire    ap_CS_fsm_state76;
wire   [31:0] m_fu_694_p2;
wire    ap_CS_fsm_state77;
wire   [31:0] os_idx_2_fu_705_p2;
reg   [31:0] os_idx_2_reg_898;
wire    ap_CS_fsm_state78;
reg    ap_block_state78;
wire   [0:0] exitcond8_fu_700_p2;
wire   [0:0] last_assign_fu_716_p2;
reg   [0:0] last_assign_reg_908;
wire   [31:0] tmp_9_fu_721_p1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state48;
wire    ap_block_state52_pp0_stage4_iter0;
wire    ap_block_state57_pp0_stage4_iter1;
wire    ap_block_state62_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
reg   [16:0] input_buf_address0;
reg    input_buf_ce0;
reg    input_buf_we0;
wire   [31:0] input_buf_d0;
wire   [31:0] input_buf_q0;
reg   [9:0] index_buf_address0;
reg    index_buf_ce0;
reg    index_buf_we0;
wire   [31:0] index_buf_d0;
reg   [9:0] temp2_buf_address0;
reg    temp2_buf_ce0;
reg    temp2_buf_we0;
reg   [11:0] result_buf_address0;
reg    result_buf_ce0;
reg    result_buf_we0;
wire   [31:0] result_buf_q0;
reg   [9:0] j_reg_303;
reg   [32:0] indvar_flatten_reg_315;
reg   [25:0] p_reg_326;
reg   [6:0] i_reg_337;
reg   [9:0] j1_reg_348;
reg  signed [31:0] m1_reg_359;
reg   [63:0] phi_mul_reg_369;
reg   [9:0] l_reg_380;
wire    ap_CS_fsm_state47;
reg   [9:0] ap_phi_mux_i_i_phi_fu_408_p4;
wire    ap_block_pp0_stage0;
reg  signed [31:0] os_idx_reg_415;
wire   [63:0] tmp_1_fu_516_p1;
wire   [63:0] tmp_3_cast_fu_616_p1;
wire   [63:0] tmp_13_cast_fu_661_p1;
wire   [63:0] tmp_6_fu_666_p1;
wire   [63:0] tmp_3_i_fu_683_p1;
wire  signed [63:0] tmp_11_fu_689_p1;
wire  signed [63:0] tmp_7_fu_711_p1;
reg   [31:0] grp_fu_426_p0;
reg   [31:0] grp_fu_426_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_431_p0;
reg   [31:0] grp_fu_431_p1;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state68;
wire   [7:0] grp_fu_448_p1;
wire   [31:0] mul_fu_457_p1;
wire   [64:0] mul_fu_457_p2;
wire   [7:0] grp_fu_448_p2;
wire   [7:0] tmp_4_fu_473_p1;
wire   [0:0] tmp_8_fu_477_p2;
wire   [25:0] TILE_SIZE_fu_483_p2;
wire   [25:0] bound_fu_510_p0;
wire   [0:0] exitcond2_fu_547_p2;
wire   [25:0] p_1_fu_541_p2;
wire   [25:0] m_mid2_fu_572_p0;
wire   [16:0] tmp_4_cast_fu_598_p1;
wire   [17:0] tmp_10_cast_fu_652_p1;
wire   [17:0] tmp_10_fu_656_p2;
wire   [6:0] tmp_2_fu_726_p0;
wire   [10:0] tmp_2_fu_726_p1;
reg   [1:0] grp_fu_426_opcode;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_state50_pp0_stage2_iter0;
wire    ap_block_state55_pp0_stage2_iter1;
wire    ap_block_state60_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_00001;
reg    grp_fu_448_ap_start;
wire    grp_fu_448_ap_done;
reg   [68:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state51_pp0_stage3_iter0;
wire    ap_block_state56_pp0_stage3_iter1;
wire    ap_block_state61_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [32:0] bound_fu_510_p00;
wire   [31:0] m_mid2_fu_572_p00;
wire   [64:0] mul_fu_457_p10;
wire   [16:0] tmp_2_fu_726_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
#0 kernel_in_stream_data_V_0_sel_rd = 1'b0;
#0 kernel_in_stream_data_V_0_sel_wr = 1'b0;
#0 kernel_in_stream_data_V_0_state = 2'd0;
#0 kernel_in_stream_dest_V_0_state = 2'd0;
#0 kernel_index_stream_data_V_0_sel_rd = 1'b0;
#0 kernel_index_stream_data_V_0_sel_wr = 1'b0;
#0 kernel_index_stream_data_V_0_state = 2'd0;
#0 kernel_index_stream_dest_V_0_state = 2'd0;
#0 kernel_out_stream_data_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_data_V_1_sel_wr = 1'b0;
#0 kernel_out_stream_data_V_1_state = 2'd0;
#0 kernel_out_stream_keep_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_keep_V_1_state = 2'd0;
#0 kernel_out_stream_strb_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_strb_V_1_state = 2'd0;
#0 kernel_out_stream_user_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_user_V_1_state = 2'd0;
#0 kernel_out_stream_last_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_last_V_1_sel_wr = 1'b0;
#0 kernel_out_stream_last_V_1_state = 2'd0;
#0 kernel_out_stream_id_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_id_V_1_state = 2'd0;
#0 kernel_out_stream_dest_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_dest_V_1_state = 2'd0;
#0 length_x_0_data_reg = 32'd0;
#0 length_x_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

kernel_matrix_tiled_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
kernel_matrix_tiled_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .length_x(length_x)
);

kernel_matrix_tilbkb #(
    .DataWidth( 32 ),
    .AddressRange( 78400 ),
    .AddressWidth( 17 ))
input_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_buf_address0),
    .ce0(input_buf_ce0),
    .we0(input_buf_we0),
    .d0(input_buf_d0),
    .q0(input_buf_q0)
);

kernel_matrix_tilcud #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
index_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(index_buf_address0),
    .ce0(index_buf_ce0),
    .we0(index_buf_we0),
    .d0(index_buf_d0),
    .q0(index_buf_q0)
);

kernel_matrix_tilcud #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
temp2_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp2_buf_address0),
    .ce0(temp2_buf_ce0),
    .we0(temp2_buf_we0),
    .d0(input_buf_q0),
    .q0(temp2_buf_q0)
);

kernel_matrix_tileOg #(
    .DataWidth( 32 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
result_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_buf_address0),
    .ce0(result_buf_ce0),
    .we0(result_buf_we0),
    .d0(tmp_2_i_reg_885),
    .q0(result_buf_q0)
);

kernel_matrix_tilfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_tilfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_426_p0),
    .din1(grp_fu_426_p1),
    .opcode(grp_fu_426_opcode),
    .ce(1'b1),
    .dout(grp_fu_426_p2)
);

kernel_matrix_tilg8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_tilg8j_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .ce(1'b1),
    .dout(grp_fu_431_p2)
);

kernel_matrix_tilhbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_tilhbi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(reg_442),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

kernel_matrix_tilibs #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
kernel_matrix_tilibs_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_448_ap_start),
    .done(grp_fu_448_ap_done),
    .din0(length_x_0_data_reg),
    .din1(grp_fu_448_p1),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

kernel_matrix_tiljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 17 ))
kernel_matrix_tiljbC_U5(
    .din0(tmp_2_fu_726_p0),
    .din1(tmp_2_fu_726_p1),
    .dout(tmp_2_fu_726_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_640_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state48)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state48);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_640_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (kernel_in_stream_data_V_0_ack_out == 1'b1))) begin
            kernel_in_stream_data_V_0_sel_rd <= ~kernel_in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((kernel_in_stream_data_V_0_vld_in == 1'b1) & (kernel_in_stream_data_V_0_ack_in == 1'b1))) begin
            kernel_in_stream_data_V_0_sel_wr <= ~kernel_in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_in_stream_data_V_0_vld_in == 1'b0) & (kernel_in_stream_data_V_0_state == 2'd2)) | ((kernel_in_stream_data_V_0_vld_in == 1'b0) & (kernel_in_stream_data_V_0_ack_out == 1'b1) & (kernel_in_stream_data_V_0_state == 2'd3)))) begin
            kernel_in_stream_data_V_0_state <= 2'd2;
        end else if ((((kernel_in_stream_data_V_0_ack_out == 1'b0) & (kernel_in_stream_data_V_0_state == 2'd1)) | ((kernel_in_stream_data_V_0_ack_out == 1'b0) & (kernel_in_stream_data_V_0_vld_in == 1'b1) & (kernel_in_stream_data_V_0_state == 2'd3)))) begin
            kernel_in_stream_data_V_0_state <= 2'd1;
        end else if (((~((kernel_in_stream_data_V_0_vld_in == 1'b0) & (kernel_in_stream_data_V_0_ack_out == 1'b1)) & ~((kernel_in_stream_data_V_0_ack_out == 1'b0) & (kernel_in_stream_data_V_0_vld_in == 1'b1)) & (kernel_in_stream_data_V_0_state == 2'd3)) | ((kernel_in_stream_data_V_0_ack_out == 1'b1) & (kernel_in_stream_data_V_0_state == 2'd1)) | ((kernel_in_stream_data_V_0_vld_in == 1'b1) & (kernel_in_stream_data_V_0_state == 2'd2)))) begin
            kernel_in_stream_data_V_0_state <= 2'd3;
        end else begin
            kernel_in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_in_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_in_stream_dest_V_0_vld_in == 1'b0) & (kernel_in_stream_dest_V_0_state == 2'd2)) | ((kernel_in_stream_dest_V_0_vld_in == 1'b0) & (kernel_in_stream_dest_V_0_ack_out == 1'b1) & (kernel_in_stream_dest_V_0_state == 2'd3)))) begin
            kernel_in_stream_dest_V_0_state <= 2'd2;
        end else if ((((kernel_in_stream_dest_V_0_ack_out == 1'b0) & (kernel_in_stream_dest_V_0_state == 2'd1)) | ((kernel_in_stream_dest_V_0_ack_out == 1'b0) & (kernel_in_stream_dest_V_0_vld_in == 1'b1) & (kernel_in_stream_dest_V_0_state == 2'd3)))) begin
            kernel_in_stream_dest_V_0_state <= 2'd1;
        end else if (((~((kernel_in_stream_dest_V_0_vld_in == 1'b0) & (kernel_in_stream_dest_V_0_ack_out == 1'b1)) & ~((kernel_in_stream_dest_V_0_ack_out == 1'b0) & (kernel_in_stream_dest_V_0_vld_in == 1'b1)) & (kernel_in_stream_dest_V_0_state == 2'd3)) | ((kernel_in_stream_dest_V_0_ack_out == 1'b1) & (kernel_in_stream_dest_V_0_state == 2'd1)) | ((kernel_in_stream_dest_V_0_vld_in == 1'b1) & (kernel_in_stream_dest_V_0_state == 2'd2)))) begin
            kernel_in_stream_dest_V_0_state <= 2'd3;
        end else begin
            kernel_in_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_index_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((kernel_index_stream_data_V_0_ack_out == 1'b1) & (kernel_index_stream_data_V_0_vld_out == 1'b1))) begin
            kernel_index_stream_data_V_0_sel_rd <= ~kernel_index_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_index_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((kernel_index_stream_data_V_0_ack_in == 1'b1) & (kernel_index_stream_data_V_0_vld_in == 1'b1))) begin
            kernel_index_stream_data_V_0_sel_wr <= ~kernel_index_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_index_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_index_stream_data_V_0_vld_in == 1'b0) & (kernel_index_stream_data_V_0_state == 2'd2)) | ((kernel_index_stream_data_V_0_vld_in == 1'b0) & (kernel_index_stream_data_V_0_ack_out == 1'b1) & (kernel_index_stream_data_V_0_state == 2'd3)))) begin
            kernel_index_stream_data_V_0_state <= 2'd2;
        end else if ((((kernel_index_stream_data_V_0_ack_out == 1'b0) & (kernel_index_stream_data_V_0_state == 2'd1)) | ((kernel_index_stream_data_V_0_ack_out == 1'b0) & (kernel_index_stream_data_V_0_vld_in == 1'b1) & (kernel_index_stream_data_V_0_state == 2'd3)))) begin
            kernel_index_stream_data_V_0_state <= 2'd1;
        end else if (((~((kernel_index_stream_data_V_0_vld_in == 1'b0) & (kernel_index_stream_data_V_0_ack_out == 1'b1)) & ~((kernel_index_stream_data_V_0_ack_out == 1'b0) & (kernel_index_stream_data_V_0_vld_in == 1'b1)) & (kernel_index_stream_data_V_0_state == 2'd3)) | ((kernel_index_stream_data_V_0_ack_out == 1'b1) & (kernel_index_stream_data_V_0_state == 2'd1)) | ((kernel_index_stream_data_V_0_vld_in == 1'b1) & (kernel_index_stream_data_V_0_state == 2'd2)))) begin
            kernel_index_stream_data_V_0_state <= 2'd3;
        end else begin
            kernel_index_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_index_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_index_stream_dest_V_0_vld_in == 1'b0) & (kernel_index_stream_dest_V_0_state == 2'd2)) | ((kernel_index_stream_dest_V_0_vld_in == 1'b0) & (kernel_index_stream_dest_V_0_ack_out == 1'b1) & (kernel_index_stream_dest_V_0_state == 2'd3)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd2;
        end else if ((((kernel_index_stream_dest_V_0_ack_out == 1'b0) & (kernel_index_stream_dest_V_0_state == 2'd1)) | ((kernel_index_stream_dest_V_0_ack_out == 1'b0) & (kernel_index_stream_dest_V_0_vld_in == 1'b1) & (kernel_index_stream_dest_V_0_state == 2'd3)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd1;
        end else if (((~((kernel_index_stream_dest_V_0_vld_in == 1'b0) & (kernel_index_stream_dest_V_0_ack_out == 1'b1)) & ~((kernel_index_stream_dest_V_0_ack_out == 1'b0) & (kernel_index_stream_dest_V_0_vld_in == 1'b1)) & (kernel_index_stream_dest_V_0_state == 2'd3)) | ((kernel_index_stream_dest_V_0_ack_out == 1'b1) & (kernel_index_stream_dest_V_0_state == 2'd1)) | ((kernel_index_stream_dest_V_0_vld_in == 1'b1) & (kernel_index_stream_dest_V_0_state == 2'd2)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd3;
        end else begin
            kernel_index_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_data_V_1_ack_out == 1'b1) & (kernel_out_stream_data_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_data_V_1_sel_rd <= ~kernel_out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (kernel_out_stream_data_V_1_vld_in == 1'b1))) begin
            kernel_out_stream_data_V_1_sel_wr <= ~kernel_out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_data_V_1_vld_in == 1'b0) & (kernel_out_stream_data_V_1_state == 2'd2)) | ((kernel_out_stream_data_V_1_vld_in == 1'b0) & (kernel_out_stream_data_V_1_ack_out == 1'b1) & (kernel_out_stream_data_V_1_state == 2'd3)))) begin
            kernel_out_stream_data_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_data_V_1_ack_out == 1'b0) & (kernel_out_stream_data_V_1_state == 2'd1)) | ((kernel_out_stream_data_V_1_ack_out == 1'b0) & (kernel_out_stream_data_V_1_vld_in == 1'b1) & (kernel_out_stream_data_V_1_state == 2'd3)))) begin
            kernel_out_stream_data_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_data_V_1_vld_in == 1'b0) & (kernel_out_stream_data_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_data_V_1_ack_out == 1'b0) & (kernel_out_stream_data_V_1_vld_in == 1'b1)) & (kernel_out_stream_data_V_1_state == 2'd3)) | ((kernel_out_stream_data_V_1_ack_out == 1'b1) & (kernel_out_stream_data_V_1_state == 2'd1)) | ((kernel_out_stream_data_V_1_vld_in == 1'b1) & (kernel_out_stream_data_V_1_state == 2'd2)))) begin
            kernel_out_stream_data_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_dest_V_1_ack_out == 1'b1) & (kernel_out_stream_dest_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_dest_V_1_sel_rd <= ~kernel_out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_dest_V_1_vld_in == 1'b0) & (kernel_out_stream_dest_V_1_state == 2'd2)) | ((kernel_out_stream_dest_V_1_vld_in == 1'b0) & (kernel_out_stream_dest_V_1_ack_out == 1'b1) & (kernel_out_stream_dest_V_1_state == 2'd3)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_dest_V_1_ack_out == 1'b0) & (kernel_out_stream_dest_V_1_state == 2'd1)) | ((kernel_out_stream_dest_V_1_ack_out == 1'b0) & (kernel_out_stream_dest_V_1_vld_in == 1'b1) & (kernel_out_stream_dest_V_1_state == 2'd3)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_dest_V_1_vld_in == 1'b0) & (kernel_out_stream_dest_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_dest_V_1_ack_out == 1'b0) & (kernel_out_stream_dest_V_1_vld_in == 1'b1)) & (kernel_out_stream_dest_V_1_state == 2'd3)) | ((kernel_out_stream_dest_V_1_ack_out == 1'b1) & (kernel_out_stream_dest_V_1_state == 2'd1)) | ((kernel_out_stream_dest_V_1_vld_in == 1'b1) & (kernel_out_stream_dest_V_1_state == 2'd2)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_id_V_1_ack_out == 1'b1) & (kernel_out_stream_id_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_id_V_1_sel_rd <= ~kernel_out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_id_V_1_vld_in == 1'b0) & (kernel_out_stream_id_V_1_state == 2'd2)) | ((kernel_out_stream_id_V_1_vld_in == 1'b0) & (kernel_out_stream_id_V_1_ack_out == 1'b1) & (kernel_out_stream_id_V_1_state == 2'd3)))) begin
            kernel_out_stream_id_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_id_V_1_ack_out == 1'b0) & (kernel_out_stream_id_V_1_state == 2'd1)) | ((kernel_out_stream_id_V_1_ack_out == 1'b0) & (kernel_out_stream_id_V_1_vld_in == 1'b1) & (kernel_out_stream_id_V_1_state == 2'd3)))) begin
            kernel_out_stream_id_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_id_V_1_vld_in == 1'b0) & (kernel_out_stream_id_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_id_V_1_ack_out == 1'b0) & (kernel_out_stream_id_V_1_vld_in == 1'b1)) & (kernel_out_stream_id_V_1_state == 2'd3)) | ((kernel_out_stream_id_V_1_ack_out == 1'b1) & (kernel_out_stream_id_V_1_state == 2'd1)) | ((kernel_out_stream_id_V_1_vld_in == 1'b1) & (kernel_out_stream_id_V_1_state == 2'd2)))) begin
            kernel_out_stream_id_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_keep_V_1_ack_out == 1'b1) & (kernel_out_stream_keep_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_keep_V_1_sel_rd <= ~kernel_out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_keep_V_1_vld_in == 1'b0) & (kernel_out_stream_keep_V_1_state == 2'd2)) | ((kernel_out_stream_keep_V_1_vld_in == 1'b0) & (kernel_out_stream_keep_V_1_ack_out == 1'b1) & (kernel_out_stream_keep_V_1_state == 2'd3)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_keep_V_1_ack_out == 1'b0) & (kernel_out_stream_keep_V_1_state == 2'd1)) | ((kernel_out_stream_keep_V_1_ack_out == 1'b0) & (kernel_out_stream_keep_V_1_vld_in == 1'b1) & (kernel_out_stream_keep_V_1_state == 2'd3)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_keep_V_1_vld_in == 1'b0) & (kernel_out_stream_keep_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_keep_V_1_ack_out == 1'b0) & (kernel_out_stream_keep_V_1_vld_in == 1'b1)) & (kernel_out_stream_keep_V_1_state == 2'd3)) | ((kernel_out_stream_keep_V_1_ack_out == 1'b1) & (kernel_out_stream_keep_V_1_state == 2'd1)) | ((kernel_out_stream_keep_V_1_vld_in == 1'b1) & (kernel_out_stream_keep_V_1_state == 2'd2)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_last_V_1_ack_out == 1'b1) & (kernel_out_stream_last_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_last_V_1_sel_rd <= ~kernel_out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((kernel_out_stream_last_V_1_ack_in == 1'b1) & (kernel_out_stream_last_V_1_vld_in == 1'b1))) begin
            kernel_out_stream_last_V_1_sel_wr <= ~kernel_out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_last_V_1_vld_in == 1'b0) & (kernel_out_stream_last_V_1_state == 2'd2)) | ((kernel_out_stream_last_V_1_vld_in == 1'b0) & (kernel_out_stream_last_V_1_ack_out == 1'b1) & (kernel_out_stream_last_V_1_state == 2'd3)))) begin
            kernel_out_stream_last_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_last_V_1_ack_out == 1'b0) & (kernel_out_stream_last_V_1_state == 2'd1)) | ((kernel_out_stream_last_V_1_ack_out == 1'b0) & (kernel_out_stream_last_V_1_vld_in == 1'b1) & (kernel_out_stream_last_V_1_state == 2'd3)))) begin
            kernel_out_stream_last_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_last_V_1_vld_in == 1'b0) & (kernel_out_stream_last_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_last_V_1_ack_out == 1'b0) & (kernel_out_stream_last_V_1_vld_in == 1'b1)) & (kernel_out_stream_last_V_1_state == 2'd3)) | ((kernel_out_stream_last_V_1_ack_out == 1'b1) & (kernel_out_stream_last_V_1_state == 2'd1)) | ((kernel_out_stream_last_V_1_vld_in == 1'b1) & (kernel_out_stream_last_V_1_state == 2'd2)))) begin
            kernel_out_stream_last_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_strb_V_1_ack_out == 1'b1) & (kernel_out_stream_strb_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_strb_V_1_sel_rd <= ~kernel_out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_strb_V_1_vld_in == 1'b0) & (kernel_out_stream_strb_V_1_state == 2'd2)) | ((kernel_out_stream_strb_V_1_vld_in == 1'b0) & (kernel_out_stream_strb_V_1_ack_out == 1'b1) & (kernel_out_stream_strb_V_1_state == 2'd3)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_strb_V_1_ack_out == 1'b0) & (kernel_out_stream_strb_V_1_state == 2'd1)) | ((kernel_out_stream_strb_V_1_ack_out == 1'b0) & (kernel_out_stream_strb_V_1_vld_in == 1'b1) & (kernel_out_stream_strb_V_1_state == 2'd3)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_strb_V_1_vld_in == 1'b0) & (kernel_out_stream_strb_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_strb_V_1_ack_out == 1'b0) & (kernel_out_stream_strb_V_1_vld_in == 1'b1)) & (kernel_out_stream_strb_V_1_state == 2'd3)) | ((kernel_out_stream_strb_V_1_ack_out == 1'b1) & (kernel_out_stream_strb_V_1_state == 2'd1)) | ((kernel_out_stream_strb_V_1_vld_in == 1'b1) & (kernel_out_stream_strb_V_1_state == 2'd2)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_user_V_1_ack_out == 1'b1) & (kernel_out_stream_user_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_user_V_1_sel_rd <= ~kernel_out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        kernel_out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_user_V_1_vld_in == 1'b0) & (kernel_out_stream_user_V_1_state == 2'd2)) | ((kernel_out_stream_user_V_1_vld_in == 1'b0) & (kernel_out_stream_user_V_1_ack_out == 1'b1) & (kernel_out_stream_user_V_1_state == 2'd3)))) begin
            kernel_out_stream_user_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_user_V_1_ack_out == 1'b0) & (kernel_out_stream_user_V_1_state == 2'd1)) | ((kernel_out_stream_user_V_1_ack_out == 1'b0) & (kernel_out_stream_user_V_1_vld_in == 1'b1) & (kernel_out_stream_user_V_1_state == 2'd3)))) begin
            kernel_out_stream_user_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_user_V_1_vld_in == 1'b0) & (kernel_out_stream_user_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_user_V_1_ack_out == 1'b0) & (kernel_out_stream_user_V_1_vld_in == 1'b1)) & (kernel_out_stream_user_V_1_state == 2'd3)) | ((kernel_out_stream_user_V_1_ack_out == 1'b1) & (kernel_out_stream_user_V_1_state == 2'd1)) | ((kernel_out_stream_user_V_1_vld_in == 1'b1) & (kernel_out_stream_user_V_1_state == 2'd2)))) begin
            kernel_out_stream_user_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_640_p2 == 1'd1))) begin
        i_i_reg_404 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_845 == 1'd0))) begin
        i_i_reg_404 <= i_3_reg_849;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_s_fu_630_p2 == 1'd0))) begin
        i_reg_337 <= i_2_fu_635_p2;
    end else if (((1'b1 == ap_CS_fsm_state38) & (exitcond3_fu_495_p2 == 1'd1))) begin
        i_reg_337 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_s_fu_630_p2 == 1'd0))) begin
        indvar_flatten_reg_315 <= indvar_flatten_next_reg_767;
    end else if (((1'b1 == ap_CS_fsm_state38) & (exitcond3_fu_495_p2 == 1'd1))) begin
        indvar_flatten_reg_315 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        j1_reg_348 <= j_2_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        j1_reg_348 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        j_reg_303 <= j_1_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        j_reg_303 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_s_fu_630_p2 == 1'd1))) begin
        l_reg_380 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        l_reg_380 <= l_1_reg_835;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (exitcond1_fu_586_p2 == 1'd1))) begin
        m1_reg_359 <= m_mid2_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        m1_reg_359 <= m_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (exitcond_flatten_fu_530_p2 == 1'd1))) begin
        os_idx_reg_415 <= 32'd0;
    end else if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
        os_idx_reg_415 <= os_idx_2_reg_898;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (tmp_s_fu_630_p2 == 1'd0))) begin
        p_reg_326 <= m_mid2_v_v_reg_778;
    end else if (((1'b1 == ap_CS_fsm_state38) & (exitcond3_fu_495_p2 == 1'd1))) begin
        p_reg_326 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (exitcond1_fu_586_p2 == 1'd1))) begin
        phi_mul_reg_369 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        phi_mul_reg_369 <= next_mul_reg_818;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_640_p2 == 1'd1))) begin
        sum_i_reg_392 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_845_pp0_iter2_reg == 1'd0))) begin
        sum_i_reg_392 <= grp_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        TILE_SIZE_1_reg_746 <= TILE_SIZE_1_fu_488_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        TILE_SIZE_cast_reg_740 <= {{mul_fu_457_p2[64:39]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (exitcond3_fu_495_p2 == 1'd1))) begin
        bound_reg_759[32 : 2] <= bound_fu_510_p2[32 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_3_reg_849 <= i_3_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (exitcond_flatten_fu_530_p2 == 1'd0))) begin
        i_mid2_reg_772 <= i_mid2_fu_553_p3;
        m_mid2_v_v_reg_778 <= m_mid2_v_v_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_i_reg_845 == 1'd0))) begin
        index_buf_load_reg_864 <= index_buf_q0;
        temp2_buf_load_reg_869 <= temp2_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        indvar_flatten_next_reg_767 <= indvar_flatten_next_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        j_1_reg_754 <= j_1_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_2_reg_803 <= j_2_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_in_stream_data_V_0_load_A == 1'b1)) begin
        kernel_in_stream_data_V_0_payload_A <= kernel_in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_in_stream_data_V_0_load_B == 1'b1)) begin
        kernel_in_stream_data_V_0_payload_B <= kernel_in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_index_stream_data_V_0_load_A == 1'b1)) begin
        kernel_index_stream_data_V_0_payload_A <= kernel_index_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_index_stream_data_V_0_load_B == 1'b1)) begin
        kernel_index_stream_data_V_0_payload_B <= kernel_index_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_data_V_1_load_A == 1'b1)) begin
        kernel_out_stream_data_V_1_payload_A <= tmp_9_fu_721_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_data_V_1_load_B == 1'b1)) begin
        kernel_out_stream_data_V_1_payload_B <= tmp_9_fu_721_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_last_V_1_load_A == 1'b1)) begin
        kernel_out_stream_last_V_1_payload_A <= last_assign_reg_908;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_last_V_1_load_B == 1'b1)) begin
        kernel_out_stream_last_V_1_payload_B <= last_assign_reg_908;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        l_1_reg_835 <= l_1_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd0))) begin
        last_assign_reg_908 <= last_assign_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_x_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_x_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_x_0_vld_reg == 1'b1)))) begin
        length_x_0_data_reg <= length_x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        length_x_read_reg_732 <= length_x_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        m_mid2_reg_784[31 : 2] <= m_mid2_fu_572_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        next_mul_reg_818 <= next_mul_fu_624_p2;
        tmp_5_reg_813 <= tmp_5_fu_620_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
        os_idx_2_reg_898 <= os_idx_2_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_845_pp0_iter1_reg == 1'd0)))) begin
        reg_442 <= grp_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_2_i_reg_885 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_2_reg_795 <= tmp_2_fu_726_p2;
        tmp_3_mid2_reg_790[31 : 2] <= tmp_3_mid2_fu_578_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (exitcond1_fu_586_p2 == 1'd0))) begin
        tmp_3_reg_808 <= tmp_3_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_i_reg_845_pp0_iter1_reg == 1'd0))) begin
        tmp_4_i_reg_874 <= grp_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_reg_845 <= tmp_i_fu_671_p2;
        tmp_i_reg_845_pp0_iter1_reg <= tmp_i_reg_845;
        tmp_i_reg_845_pp0_iter2_reg <= tmp_i_reg_845_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((tmp_i_fu_671_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_845 == 1'd0))) begin
        ap_phi_mux_i_i_phi_fu_408_p4 = i_3_reg_849;
    end else begin
        ap_phi_mux_i_i_phi_fu_408_p4 = i_i_reg_404;
    end
end

always @ (*) begin
    if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_00001) & (tmp_i_reg_845 == 1'd0))) begin
        grp_fu_426_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_00001) & (tmp_i_reg_845_pp0_iter2_reg == 1'd0))) begin
        grp_fu_426_opcode = 2'd0;
    end else begin
        grp_fu_426_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_426_p0 = sum_i_reg_392;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_426_p0 = index_buf_load_reg_864;
    end else begin
        grp_fu_426_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_426_p1 = reg_442;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_426_p1 = temp2_buf_load_reg_869;
    end else begin
        grp_fu_426_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_431_p0 = sum_i_reg_392;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_431_p0 = tmp_4_i_reg_874;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        grp_fu_431_p1 = 32'd3175926989;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_431_p1 = tmp_4_i_reg_874;
    end else begin
        grp_fu_431_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_448_ap_start = 1'b1;
    end else begin
        grp_fu_448_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        index_buf_address0 = tmp_3_i_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        index_buf_address0 = tmp_1_fu_516_p1;
    end else begin
        index_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
        index_buf_ce0 = 1'b1;
    end else begin
        index_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        index_buf_we0 = 1'b1;
    end else begin
        index_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        input_buf_address0 = tmp_13_cast_fu_661_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        input_buf_address0 = tmp_3_cast_fu_616_p1;
    end else begin
        input_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | ((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        input_buf_ce0 = 1'b1;
    end else begin
        input_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        input_buf_we0 = 1'b1;
    end else begin
        input_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        kernel_in_stream_TDATA_blk_n = kernel_in_stream_data_V_0_state[1'd0];
    end else begin
        kernel_in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        kernel_in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        kernel_in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((kernel_in_stream_data_V_0_sel == 1'b1)) begin
        kernel_in_stream_data_V_0_data_out = kernel_in_stream_data_V_0_payload_B;
    end else begin
        kernel_in_stream_data_V_0_data_out = kernel_in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        kernel_in_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        kernel_in_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        kernel_index_stream_TDATA_blk_n = kernel_index_stream_data_V_0_state[1'd0];
    end else begin
        kernel_index_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        kernel_index_stream_data_V_0_ack_out = 1'b1;
    end else begin
        kernel_index_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((kernel_index_stream_data_V_0_sel == 1'b1)) begin
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_B;
    end else begin
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        kernel_index_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        kernel_index_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_TDATA_blk_n = kernel_out_stream_data_V_1_state[1'd1];
    end else begin
        kernel_out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((kernel_out_stream_data_V_1_sel == 1'b1)) begin
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_B;
    end else begin
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((kernel_out_stream_last_V_1_sel == 1'b1)) begin
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_B;
    end else begin
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        kernel_out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd1))) begin
        length_x_0_ack_out = 1'b1;
    end else begin
        length_x_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        result_buf_address0 = tmp_7_fu_711_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        result_buf_address0 = tmp_11_fu_689_p1;
    end else begin
        result_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78)))) begin
        result_buf_ce0 = 1'b1;
    end else begin
        result_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        result_buf_we0 = 1'b1;
    end else begin
        result_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        temp2_buf_address0 = tmp_3_i_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        temp2_buf_address0 = tmp_6_fu_666_p1;
    end else begin
        temp2_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        temp2_buf_ce0 = 1'b1;
    end else begin
        temp2_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        temp2_buf_we0 = 1'b1;
    end else begin
        temp2_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (exitcond3_fu_495_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((kernel_index_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (exitcond_flatten_fu_530_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (exitcond1_fu_586_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((kernel_in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (tmp_s_fu_630_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_fu_671_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_i_fu_671_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state78 : begin
            if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond8_fu_700_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign TILE_SIZE_1_fu_488_p3 = ((tmp_8_fu_477_p2[0:0] === 1'b1) ? TILE_SIZE_cast_reg_740 : TILE_SIZE_fu_483_p2);

assign TILE_SIZE_fu_483_p2 = (26'd1 + TILE_SIZE_cast_reg_740);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd68];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state78 = ((kernel_out_stream_keep_V_1_ack_in == 1'b0) | (kernel_out_stream_data_V_1_ack_in == 1'b0) | (kernel_out_stream_dest_V_1_ack_in == 1'b0) | (kernel_out_stream_id_V_1_ack_in == 1'b0) | (kernel_out_stream_last_V_1_ack_in == 1'b0) | (kernel_out_stream_user_V_1_ack_in == 1'b0) | (kernel_out_stream_strb_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_510_p0 = bound_fu_510_p00;

assign bound_fu_510_p00 = TILE_SIZE_1_reg_746;

assign bound_fu_510_p2 = (bound_fu_510_p0 * $signed('h64));

assign exitcond1_fu_586_p2 = ((j1_reg_348 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond2_fu_547_p2 = ((i_reg_337 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3_fu_495_p2 = ((j_reg_303 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond8_fu_700_p2 = ((os_idx_reg_415 == length_x_read_reg_732) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_530_p2 = ((indvar_flatten_reg_315 == bound_reg_759) ? 1'b1 : 1'b0);

assign exitcond_fu_640_p2 = ((l_reg_380 == 10'd784) ? 1'b1 : 1'b0);

assign grp_fu_448_p1 = 32'd100;

assign i_2_fu_635_p2 = (i_mid2_reg_772 + 7'd1);

assign i_3_fu_677_p2 = (ap_phi_mux_i_i_phi_fu_408_p4 + 10'd1);

assign i_mid2_fu_553_p3 = ((exitcond2_fu_547_p2[0:0] === 1'b1) ? 7'd0 : i_reg_337);

assign index_buf_d0 = kernel_index_stream_data_V_0_data_out;

assign indvar_flatten_next_fu_535_p2 = (indvar_flatten_reg_315 + 33'd1);

assign input_buf_d0 = kernel_in_stream_data_V_0_data_out;

assign j_1_fu_501_p2 = (j_reg_303 + 10'd1);

assign j_2_fu_592_p2 = (j1_reg_348 + 10'd1);

assign kernel_in_stream_TREADY = kernel_in_stream_dest_V_0_state[1'd1];

assign kernel_in_stream_data_V_0_ack_in = kernel_in_stream_data_V_0_state[1'd1];

assign kernel_in_stream_data_V_0_load_A = (kernel_in_stream_data_V_0_state_cmp_full & ~kernel_in_stream_data_V_0_sel_wr);

assign kernel_in_stream_data_V_0_load_B = (kernel_in_stream_data_V_0_state_cmp_full & kernel_in_stream_data_V_0_sel_wr);

assign kernel_in_stream_data_V_0_sel = kernel_in_stream_data_V_0_sel_rd;

assign kernel_in_stream_data_V_0_state_cmp_full = ((kernel_in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_in_stream_data_V_0_vld_in = kernel_in_stream_TVALID;

assign kernel_in_stream_data_V_0_vld_out = kernel_in_stream_data_V_0_state[1'd0];

assign kernel_in_stream_dest_V_0_vld_in = kernel_in_stream_TVALID;

assign kernel_index_stream_TREADY = kernel_index_stream_dest_V_0_state[1'd1];

assign kernel_index_stream_data_V_0_ack_in = kernel_index_stream_data_V_0_state[1'd1];

assign kernel_index_stream_data_V_0_load_A = (kernel_index_stream_data_V_0_state_cmp_full & ~kernel_index_stream_data_V_0_sel_wr);

assign kernel_index_stream_data_V_0_load_B = (kernel_index_stream_data_V_0_state_cmp_full & kernel_index_stream_data_V_0_sel_wr);

assign kernel_index_stream_data_V_0_sel = kernel_index_stream_data_V_0_sel_rd;

assign kernel_index_stream_data_V_0_state_cmp_full = ((kernel_index_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_index_stream_data_V_0_vld_in = kernel_index_stream_TVALID;

assign kernel_index_stream_data_V_0_vld_out = kernel_index_stream_data_V_0_state[1'd0];

assign kernel_index_stream_dest_V_0_vld_in = kernel_index_stream_TVALID;

assign kernel_out_stream_TDATA = kernel_out_stream_data_V_1_data_out;

assign kernel_out_stream_TDEST = kernel_out_stream_dest_V_1_data_out;

assign kernel_out_stream_TID = kernel_out_stream_id_V_1_data_out;

assign kernel_out_stream_TKEEP = kernel_out_stream_keep_V_1_data_out;

assign kernel_out_stream_TLAST = kernel_out_stream_last_V_1_data_out;

assign kernel_out_stream_TSTRB = kernel_out_stream_strb_V_1_data_out;

assign kernel_out_stream_TUSER = kernel_out_stream_user_V_1_data_out;

assign kernel_out_stream_TVALID = kernel_out_stream_dest_V_1_state[1'd0];

assign kernel_out_stream_data_V_1_ack_in = kernel_out_stream_data_V_1_state[1'd1];

assign kernel_out_stream_data_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_data_V_1_load_A = (kernel_out_stream_data_V_1_state_cmp_full & ~kernel_out_stream_data_V_1_sel_wr);

assign kernel_out_stream_data_V_1_load_B = (kernel_out_stream_data_V_1_state_cmp_full & kernel_out_stream_data_V_1_sel_wr);

assign kernel_out_stream_data_V_1_sel = kernel_out_stream_data_V_1_sel_rd;

assign kernel_out_stream_data_V_1_state_cmp_full = ((kernel_out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_out_stream_data_V_1_vld_out = kernel_out_stream_data_V_1_state[1'd0];

assign kernel_out_stream_dest_V_1_ack_in = kernel_out_stream_dest_V_1_state[1'd1];

assign kernel_out_stream_dest_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_dest_V_1_data_out = 5'd0;

assign kernel_out_stream_dest_V_1_sel = kernel_out_stream_dest_V_1_sel_rd;

assign kernel_out_stream_dest_V_1_vld_out = kernel_out_stream_dest_V_1_state[1'd0];

assign kernel_out_stream_id_V_1_ack_in = kernel_out_stream_id_V_1_state[1'd1];

assign kernel_out_stream_id_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_id_V_1_data_out = 5'd0;

assign kernel_out_stream_id_V_1_sel = kernel_out_stream_id_V_1_sel_rd;

assign kernel_out_stream_id_V_1_vld_out = kernel_out_stream_id_V_1_state[1'd0];

assign kernel_out_stream_keep_V_1_ack_in = kernel_out_stream_keep_V_1_state[1'd1];

assign kernel_out_stream_keep_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_keep_V_1_data_out = 4'd15;

assign kernel_out_stream_keep_V_1_sel = kernel_out_stream_keep_V_1_sel_rd;

assign kernel_out_stream_keep_V_1_vld_out = kernel_out_stream_keep_V_1_state[1'd0];

assign kernel_out_stream_last_V_1_ack_in = kernel_out_stream_last_V_1_state[1'd1];

assign kernel_out_stream_last_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_last_V_1_load_A = (kernel_out_stream_last_V_1_state_cmp_full & ~kernel_out_stream_last_V_1_sel_wr);

assign kernel_out_stream_last_V_1_load_B = (kernel_out_stream_last_V_1_state_cmp_full & kernel_out_stream_last_V_1_sel_wr);

assign kernel_out_stream_last_V_1_sel = kernel_out_stream_last_V_1_sel_rd;

assign kernel_out_stream_last_V_1_state_cmp_full = ((kernel_out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_out_stream_last_V_1_vld_out = kernel_out_stream_last_V_1_state[1'd0];

assign kernel_out_stream_strb_V_1_ack_in = kernel_out_stream_strb_V_1_state[1'd1];

assign kernel_out_stream_strb_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_strb_V_1_data_out = 4'd15;

assign kernel_out_stream_strb_V_1_sel = kernel_out_stream_strb_V_1_sel_rd;

assign kernel_out_stream_strb_V_1_vld_out = kernel_out_stream_strb_V_1_state[1'd0];

assign kernel_out_stream_user_V_1_ack_in = kernel_out_stream_user_V_1_state[1'd1];

assign kernel_out_stream_user_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_user_V_1_data_out = 4'd0;

assign kernel_out_stream_user_V_1_sel = kernel_out_stream_user_V_1_sel_rd;

assign kernel_out_stream_user_V_1_vld_out = kernel_out_stream_user_V_1_state[1'd0];

assign l_1_fu_646_p2 = (l_reg_380 + 10'd1);

assign last_assign_fu_716_p2 = ((os_idx_2_fu_705_p2 == length_x_read_reg_732) ? 1'b1 : 1'b0);

assign m_fu_694_p2 = ($signed(m1_reg_359) + $signed(32'd1));

assign m_mid2_fu_572_p0 = m_mid2_fu_572_p00;

assign m_mid2_fu_572_p00 = m_mid2_v_v_reg_778;

assign m_mid2_fu_572_p2 = (m_mid2_fu_572_p0 * $signed('h64));

assign m_mid2_v_v_fu_561_p3 = ((exitcond2_fu_547_p2[0:0] === 1'b1) ? p_1_fu_541_p2 : p_reg_326);

assign mul_fu_457_p1 = mul_fu_457_p10;

assign mul_fu_457_p10 = length_x_read_reg_732;

assign mul_fu_457_p2 = (65'd5497558139 * mul_fu_457_p1);

assign next_mul_fu_624_p2 = (64'd784 + phi_mul_reg_369);

assign os_idx_2_fu_705_p2 = ($signed(os_idx_reg_415) + $signed(32'd1));

assign p_1_fu_541_p2 = (p_reg_326 + 26'd1);

assign tmp_10_cast_fu_652_p1 = l_reg_380;

assign tmp_10_fu_656_p2 = (tmp_5_reg_813 + tmp_10_cast_fu_652_p1);

assign tmp_11_fu_689_p1 = m1_reg_359;

assign tmp_13_cast_fu_661_p1 = tmp_10_fu_656_p2;

assign tmp_1_fu_516_p1 = j_reg_303;

assign tmp_2_fu_726_p0 = tmp_2_fu_726_p00;

assign tmp_2_fu_726_p00 = i_mid2_reg_772;

assign tmp_2_fu_726_p1 = 17'd784;

assign tmp_3_cast_fu_616_p1 = tmp_3_reg_808;

assign tmp_3_fu_602_p2 = (tmp_2_reg_795 + tmp_4_cast_fu_598_p1);

assign tmp_3_i_fu_683_p1 = ap_phi_mux_i_i_phi_fu_408_p4;

assign tmp_3_mid2_fu_578_p2 = (m_mid2_reg_784 + 32'd100);

assign tmp_4_cast_fu_598_p1 = j1_reg_348;

assign tmp_4_fu_473_p1 = grp_fu_448_p2[7:0];

assign tmp_5_fu_620_p1 = phi_mul_reg_369[17:0];

assign tmp_6_fu_666_p1 = l_reg_380;

assign tmp_7_fu_711_p1 = os_idx_reg_415;

assign tmp_8_fu_477_p2 = ((tmp_4_fu_473_p1 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_721_p1 = result_buf_q0;

assign tmp_i_fu_671_p2 = ((ap_phi_mux_i_i_phi_fu_408_p4 == 10'd784) ? 1'b1 : 1'b0);

assign tmp_s_fu_630_p2 = (($signed(m1_reg_359) < $signed(tmp_3_mid2_reg_790)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    bound_reg_759[1:0] <= 2'b00;
    m_mid2_reg_784[1:0] <= 2'b00;
    tmp_3_mid2_reg_790[1:0] <= 2'b00;
end

endmodule //kernel_matrix_tiled
