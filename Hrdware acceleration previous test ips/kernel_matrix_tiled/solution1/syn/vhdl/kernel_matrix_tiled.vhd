-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_matrix_tiled is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    kernel_in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_in_stream_TVALID : IN STD_LOGIC;
    kernel_in_stream_TREADY : OUT STD_LOGIC;
    kernel_in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    kernel_in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    kernel_in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    kernel_index_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_index_stream_TVALID : IN STD_LOGIC;
    kernel_index_stream_TREADY : OUT STD_LOGIC;
    kernel_index_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_index_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_index_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    kernel_index_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    kernel_index_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    kernel_index_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    kernel_out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_out_stream_TVALID : OUT STD_LOGIC;
    kernel_out_stream_TREADY : IN STD_LOGIC;
    kernel_out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    kernel_out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_matrix_tiled is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_matrix_tiled,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=268,HLS_SYN_DSP=23,HLS_SYN_FF=2348,HLS_SYN_LUT=3597,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv33_64 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001100100";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv64_310 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_310 : STD_LOGIC_VECTOR (16 downto 0) := "00000001100010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal kernel_in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_in_stream_data_V_0_vld_in : STD_LOGIC;
    signal kernel_in_stream_data_V_0_vld_out : STD_LOGIC;
    signal kernel_in_stream_data_V_0_ack_in : STD_LOGIC;
    signal kernel_in_stream_data_V_0_ack_out : STD_LOGIC;
    signal kernel_in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal kernel_in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal kernel_in_stream_data_V_0_sel : STD_LOGIC;
    signal kernel_in_stream_data_V_0_load_A : STD_LOGIC;
    signal kernel_in_stream_data_V_0_load_B : STD_LOGIC;
    signal kernel_in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal kernel_in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal kernel_in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal kernel_in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_index_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_index_stream_data_V_0_vld_in : STD_LOGIC;
    signal kernel_index_stream_data_V_0_vld_out : STD_LOGIC;
    signal kernel_index_stream_data_V_0_ack_in : STD_LOGIC;
    signal kernel_index_stream_data_V_0_ack_out : STD_LOGIC;
    signal kernel_index_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_index_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_index_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal kernel_index_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal kernel_index_stream_data_V_0_sel : STD_LOGIC;
    signal kernel_index_stream_data_V_0_load_A : STD_LOGIC;
    signal kernel_index_stream_data_V_0_load_B : STD_LOGIC;
    signal kernel_index_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_index_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal kernel_index_stream_dest_V_0_vld_in : STD_LOGIC;
    signal kernel_index_stream_dest_V_0_ack_out : STD_LOGIC;
    signal kernel_index_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_out_stream_data_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_data_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_data_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_data_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal kernel_out_stream_data_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_data_V_1_load_A : STD_LOGIC;
    signal kernel_out_stream_data_V_1_load_B : STD_LOGIC;
    signal kernel_out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_keep_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_strb_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_out_stream_user_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_user_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_user_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_user_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_user_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_out_stream_last_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_last_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_last_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_last_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal kernel_out_stream_last_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_last_V_1_load_A : STD_LOGIC;
    signal kernel_out_stream_last_V_1_load_B : STD_LOGIC;
    signal kernel_out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal kernel_out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_out_stream_id_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_id_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_id_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_id_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_id_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal kernel_out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal kernel_out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal kernel_out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal kernel_out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal kernel_out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal kernel_out_stream_dest_V_1_sel : STD_LOGIC;
    signal kernel_out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal length_x : STD_LOGIC_VECTOR (31 downto 0);
    signal length_x_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_x_0_vld_reg : STD_LOGIC := '0';
    signal length_x_0_ack_out : STD_LOGIC;
    signal kernel_in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal kernel_index_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal kernel_out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal sum_i_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_404 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state48_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_i_reg_845 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_845_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal length_x_read_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal TILE_SIZE_cast_reg_740 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal TILE_SIZE_1_fu_488_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal TILE_SIZE_1_reg_746 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal j_1_fu_501_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_754 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal bound_fu_510_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal bound_reg_759 : STD_LOGIC_VECTOR (32 downto 0);
    signal exitcond3_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_535_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_next_reg_767 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_mid2_fu_553_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_mid2_reg_772 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_mid2_v_v_fu_561_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal m_mid2_v_v_reg_778 : STD_LOGIC_VECTOR (25 downto 0);
    signal m_mid2_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_mid2_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_3_mid2_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_mid2_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_2_fu_726_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_reg_795 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_2_fu_592_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_803 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_3_fu_602_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_3_fu_602_p2 : signal is "no";
    signal tmp_3_reg_808 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond1_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_620_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_reg_813 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal next_mul_fu_624_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_635_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal l_1_fu_646_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal l_1_reg_835 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_845_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_677_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_849 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal index_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_buf_load_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state49_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal temp2_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_load_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal m_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal os_idx_2_fu_705_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal os_idx_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_block_state78 : BOOLEAN;
    signal exitcond8_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_721_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state48 : STD_LOGIC;
    signal ap_block_state52_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state57_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state62_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal input_buf_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_buf_ce0 : STD_LOGIC;
    signal input_buf_we0 : STD_LOGIC;
    signal input_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_buf_ce0 : STD_LOGIC;
    signal index_buf_we0 : STD_LOGIC;
    signal index_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp2_buf_ce0 : STD_LOGIC;
    signal temp2_buf_we0 : STD_LOGIC;
    signal result_buf_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_buf_ce0 : STD_LOGIC;
    signal result_buf_we0 : STD_LOGIC;
    signal result_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_303 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_reg_315 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_reg_326 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal j1_reg_348 : STD_LOGIC_VECTOR (9 downto 0);
    signal m1_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_reg_380 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_phi_mux_i_i_phi_fu_408_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal os_idx_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_457_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal TILE_SIZE_fu_483_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal bound_fu_510_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal exitcond2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_541_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal m_mid2_fu_572_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_cast_fu_598_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_cast_fu_652_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_656_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_726_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_426_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_state50_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state55_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal grp_fu_448_ap_start : STD_LOGIC;
    signal grp_fu_448_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state51_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state56_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state61_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_510_p00 : STD_LOGIC_VECTOR (32 downto 0);
    signal m_mid2_fu_572_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_457_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_2_fu_726_p00 : STD_LOGIC_VECTOR (16 downto 0);

    component kernel_matrix_tilfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tilg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tilhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tilibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component kernel_matrix_tiljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component kernel_matrix_tilbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tilcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tileOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_tiled_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        length_x : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_matrix_tiled_CONTROL_BUS_s_axi_U : component kernel_matrix_tiled_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        length_x => length_x);

    input_buf_U : component kernel_matrix_tilbkb
    generic map (
        DataWidth => 32,
        AddressRange => 78400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_buf_address0,
        ce0 => input_buf_ce0,
        we0 => input_buf_we0,
        d0 => input_buf_d0,
        q0 => input_buf_q0);

    index_buf_U : component kernel_matrix_tilcud
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => index_buf_address0,
        ce0 => index_buf_ce0,
        we0 => index_buf_we0,
        d0 => index_buf_d0,
        q0 => index_buf_q0);

    temp2_buf_U : component kernel_matrix_tilcud
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp2_buf_address0,
        ce0 => temp2_buf_ce0,
        we0 => temp2_buf_we0,
        d0 => input_buf_q0,
        q0 => temp2_buf_q0);

    result_buf_U : component kernel_matrix_tileOg
    generic map (
        DataWidth => 32,
        AddressRange => 2500,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_buf_address0,
        ce0 => result_buf_ce0,
        we0 => result_buf_we0,
        d0 => tmp_2_i_reg_885,
        q0 => result_buf_q0);

    kernel_matrix_tilfYi_U1 : component kernel_matrix_tilfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        opcode => grp_fu_426_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_426_p2);

    kernel_matrix_tilg8j_U2 : component kernel_matrix_tilg8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    kernel_matrix_tilhbi_U3 : component kernel_matrix_tilhbi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => reg_442,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    kernel_matrix_tilibs_U4 : component kernel_matrix_tilibs
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_448_ap_start,
        done => grp_fu_448_ap_done,
        din0 => length_x_0_data_reg,
        din1 => grp_fu_448_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_448_p2);

    kernel_matrix_tiljbC_U5 : component kernel_matrix_tiljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => tmp_2_fu_726_p0,
        din1 => tmp_2_fu_726_p1,
        dout => tmp_2_fu_726_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond_fu_640_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state48)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state48);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond_fu_640_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    kernel_in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (kernel_in_stream_data_V_0_ack_out = ap_const_logic_1))) then 
                                        kernel_in_stream_data_V_0_sel_rd <= not(kernel_in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((kernel_in_stream_data_V_0_vld_in = ap_const_logic_1) and (kernel_in_stream_data_V_0_ack_in = ap_const_logic_1))) then 
                                        kernel_in_stream_data_V_0_sel_wr <= not(kernel_in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    kernel_in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((kernel_in_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_data_V_0_state = ap_const_lv2_2)) or ((kernel_in_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_data_V_0_ack_out = ap_const_logic_1) and (kernel_in_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    kernel_in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((kernel_in_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_data_V_0_state = ap_const_lv2_1)) or ((kernel_in_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_data_V_0_vld_in = ap_const_logic_1) and (kernel_in_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    kernel_in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((kernel_in_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((kernel_in_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_data_V_0_vld_in = ap_const_logic_1))) and (kernel_in_stream_data_V_0_state = ap_const_lv2_3)) or ((kernel_in_stream_data_V_0_ack_out = ap_const_logic_1) and (kernel_in_stream_data_V_0_state = ap_const_lv2_1)) or ((kernel_in_stream_data_V_0_vld_in = ap_const_logic_1) and (kernel_in_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    kernel_in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    kernel_in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((kernel_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_2)) or ((kernel_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_dest_V_0_ack_out = ap_const_logic_1) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    kernel_in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((kernel_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_1)) or ((kernel_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_dest_V_0_vld_in = ap_const_logic_1) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    kernel_in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((kernel_in_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_in_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((kernel_in_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_in_stream_dest_V_0_vld_in = ap_const_logic_1))) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_3)) or ((kernel_in_stream_dest_V_0_ack_out = ap_const_logic_1) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_1)) or ((kernel_in_stream_dest_V_0_vld_in = ap_const_logic_1) and (kernel_in_stream_dest_V_0_state = ap_const_lv2_2)))) then 
                    kernel_in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    kernel_in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_index_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_index_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_index_stream_data_V_0_ack_out = ap_const_logic_1) and (kernel_index_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        kernel_index_stream_data_V_0_sel_rd <= not(kernel_index_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_index_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_index_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((kernel_index_stream_data_V_0_ack_in = ap_const_logic_1) and (kernel_index_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        kernel_index_stream_data_V_0_sel_wr <= not(kernel_index_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    kernel_index_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_index_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((kernel_index_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_data_V_0_state = ap_const_lv2_2)) or ((kernel_index_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_data_V_0_ack_out = ap_const_logic_1) and (kernel_index_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    kernel_index_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((kernel_index_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_data_V_0_state = ap_const_lv2_1)) or ((kernel_index_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_data_V_0_vld_in = ap_const_logic_1) and (kernel_index_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    kernel_index_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((kernel_index_stream_data_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((kernel_index_stream_data_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_data_V_0_vld_in = ap_const_logic_1))) and (kernel_index_stream_data_V_0_state = ap_const_lv2_3)) or ((kernel_index_stream_data_V_0_ack_out = ap_const_logic_1) and (kernel_index_stream_data_V_0_state = ap_const_lv2_1)) or ((kernel_index_stream_data_V_0_vld_in = ap_const_logic_1) and (kernel_index_stream_data_V_0_state = ap_const_lv2_2)))) then 
                    kernel_index_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    kernel_index_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_index_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_index_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((kernel_index_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_2)) or ((kernel_index_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_dest_V_0_ack_out = ap_const_logic_1) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    kernel_index_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((kernel_index_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_1)) or ((kernel_index_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_dest_V_0_vld_in = ap_const_logic_1) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_3)))) then 
                    kernel_index_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((kernel_index_stream_dest_V_0_vld_in = ap_const_logic_0) and (kernel_index_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((kernel_index_stream_dest_V_0_ack_out = ap_const_logic_0) and (kernel_index_stream_dest_V_0_vld_in = ap_const_logic_1))) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_3)) or ((kernel_index_stream_dest_V_0_ack_out = ap_const_logic_1) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_1)) or ((kernel_index_stream_dest_V_0_vld_in = ap_const_logic_1) and (kernel_index_stream_dest_V_0_state = ap_const_lv2_2)))) then 
                    kernel_index_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    kernel_index_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_data_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_data_V_1_sel_rd <= not(kernel_out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (kernel_out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        kernel_out_stream_data_V_1_sel_wr <= not(kernel_out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_data_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_data_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_data_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_data_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_data_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_data_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_data_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_data_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_data_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_data_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_data_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_data_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_data_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_data_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_data_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_data_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_data_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_data_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_dest_V_1_sel_rd <= not(kernel_out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_dest_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_dest_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_dest_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_dest_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_dest_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_dest_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_dest_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_dest_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_id_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_id_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_id_V_1_sel_rd <= not(kernel_out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_id_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_id_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_id_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_id_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_id_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_id_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_id_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_id_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_id_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_id_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_id_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_id_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_id_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_id_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_id_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_id_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_id_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_id_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_id_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_keep_V_1_sel_rd <= not(kernel_out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_keep_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_keep_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_keep_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_keep_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_keep_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_keep_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_keep_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_keep_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_last_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_last_V_1_sel_rd <= not(kernel_out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((kernel_out_stream_last_V_1_ack_in = ap_const_logic_1) and (kernel_out_stream_last_V_1_vld_in = ap_const_logic_1))) then 
                                        kernel_out_stream_last_V_1_sel_wr <= not(kernel_out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_last_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_last_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_last_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_last_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_last_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_last_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_last_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_last_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_last_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_last_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_last_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_last_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_last_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_last_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_last_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_last_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_last_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_last_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_strb_V_1_sel_rd <= not(kernel_out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_strb_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_strb_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_strb_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_strb_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_strb_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_strb_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_strb_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_strb_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((kernel_out_stream_user_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        kernel_out_stream_user_V_1_sel_rd <= not(kernel_out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    kernel_out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                kernel_out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((kernel_out_stream_user_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_user_V_1_state = ap_const_lv2_2)) or ((kernel_out_stream_user_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_user_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_user_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((kernel_out_stream_user_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_user_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_user_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_user_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_user_V_1_state = ap_const_lv2_3)))) then 
                    kernel_out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((kernel_out_stream_user_V_1_vld_in = ap_const_logic_0) and (kernel_out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((kernel_out_stream_user_V_1_ack_out = ap_const_logic_0) and (kernel_out_stream_user_V_1_vld_in = ap_const_logic_1))) and (kernel_out_stream_user_V_1_state = ap_const_lv2_3)) or ((kernel_out_stream_user_V_1_ack_out = ap_const_logic_1) and (kernel_out_stream_user_V_1_state = ap_const_lv2_1)) or ((kernel_out_stream_user_V_1_vld_in = ap_const_logic_1) and (kernel_out_stream_user_V_1_state = ap_const_lv2_2)))) then 
                    kernel_out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    kernel_out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond_fu_640_p2 = ap_const_lv1_1))) then 
                i_i_reg_404 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_reg_845 = ap_const_lv1_0))) then 
                i_i_reg_404 <= i_3_reg_849;
            end if; 
        end if;
    end process;

    i_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_s_fu_630_p2 = ap_const_lv1_0))) then 
                i_reg_337 <= i_2_fu_635_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond3_fu_495_p2 = ap_const_lv1_1))) then 
                i_reg_337 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_s_fu_630_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_315 <= indvar_flatten_next_reg_767;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond3_fu_495_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_315 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    j1_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                j1_reg_348 <= j_2_reg_803;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                j1_reg_348 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                j_reg_303 <= j_1_reg_754;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                j_reg_303 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    l_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_s_fu_630_p2 = ap_const_lv1_1))) then 
                l_reg_380 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                l_reg_380 <= l_1_reg_835;
            end if; 
        end if;
    end process;

    length_x_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    m1_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond1_fu_586_p2 = ap_const_lv1_1))) then 
                m1_reg_359 <= m_mid2_reg_784;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                m1_reg_359 <= m_fu_694_p2;
            end if; 
        end if;
    end process;

    os_idx_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond_flatten_fu_530_p2 = ap_const_lv1_1))) then 
                os_idx_reg_415 <= ap_const_lv32_0;
            elsif (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                os_idx_reg_415 <= os_idx_2_reg_898;
            end if; 
        end if;
    end process;

    p_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_s_fu_630_p2 = ap_const_lv1_0))) then 
                p_reg_326 <= m_mid2_v_v_reg_778;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond3_fu_495_p2 = ap_const_lv1_1))) then 
                p_reg_326 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond1_fu_586_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_369 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                phi_mul_reg_369 <= next_mul_reg_818;
            end if; 
        end if;
    end process;

    sum_i_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond_fu_640_p2 = ap_const_lv1_1))) then 
                sum_i_reg_392 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_reg_845_pp0_iter2_reg = ap_const_lv1_0))) then 
                sum_i_reg_392 <= grp_fu_426_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                TILE_SIZE_1_reg_746 <= TILE_SIZE_1_fu_488_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                TILE_SIZE_cast_reg_740 <= mul_fu_457_p2(64 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond3_fu_495_p2 = ap_const_lv1_1))) then
                    bound_reg_759(32 downto 2) <= bound_fu_510_p2(32 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_3_reg_849 <= i_3_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond_flatten_fu_530_p2 = ap_const_lv1_0))) then
                i_mid2_reg_772 <= i_mid2_fu_553_p3;
                m_mid2_v_v_reg_778 <= m_mid2_v_v_fu_561_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_i_reg_845 = ap_const_lv1_0))) then
                index_buf_load_reg_864 <= index_buf_q0;
                temp2_buf_load_reg_869 <= temp2_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                indvar_flatten_next_reg_767 <= indvar_flatten_next_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                j_1_reg_754 <= j_1_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                j_2_reg_803 <= j_2_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_in_stream_data_V_0_load_A = ap_const_logic_1)) then
                kernel_in_stream_data_V_0_payload_A <= kernel_in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_in_stream_data_V_0_load_B = ap_const_logic_1)) then
                kernel_in_stream_data_V_0_payload_B <= kernel_in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_index_stream_data_V_0_load_A = ap_const_logic_1)) then
                kernel_index_stream_data_V_0_payload_A <= kernel_index_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_index_stream_data_V_0_load_B = ap_const_logic_1)) then
                kernel_index_stream_data_V_0_payload_B <= kernel_index_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_out_stream_data_V_1_load_A = ap_const_logic_1)) then
                kernel_out_stream_data_V_1_payload_A <= tmp_9_fu_721_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_out_stream_data_V_1_load_B = ap_const_logic_1)) then
                kernel_out_stream_data_V_1_payload_B <= tmp_9_fu_721_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_out_stream_last_V_1_load_A = ap_const_logic_1)) then
                kernel_out_stream_last_V_1_payload_A <= last_assign_reg_908;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((kernel_out_stream_last_V_1_load_B = ap_const_logic_1)) then
                kernel_out_stream_last_V_1_payload_B <= last_assign_reg_908;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                l_1_reg_835 <= l_1_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_0))) then
                last_assign_reg_908 <= last_assign_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_x_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_x_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_x_0_vld_reg = ap_const_logic_1)))) then
                length_x_0_data_reg <= length_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                length_x_read_reg_732 <= length_x_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                    m_mid2_reg_784(31 downto 2) <= m_mid2_fu_572_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                next_mul_reg_818 <= next_mul_fu_624_p2;
                tmp_5_reg_813 <= tmp_5_fu_620_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                os_idx_2_reg_898 <= os_idx_2_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_reg_845_pp0_iter1_reg = ap_const_lv1_0)))) then
                reg_442 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                tmp_2_i_reg_885 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_2_reg_795 <= tmp_2_fu_726_p2;
                    tmp_3_mid2_reg_790(31 downto 2) <= tmp_3_mid2_fu_578_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond1_fu_586_p2 = ap_const_lv1_0))) then
                tmp_3_reg_808 <= tmp_3_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_i_reg_845_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_4_i_reg_874 <= grp_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_reg_845 <= tmp_i_fu_671_p2;
                tmp_i_reg_845_pp0_iter1_reg <= tmp_i_reg_845;
                tmp_i_reg_845_pp0_iter2_reg <= tmp_i_reg_845_pp0_iter1_reg;
            end if;
        end if;
    end process;
    bound_reg_759(1 downto 0) <= "00";
    m_mid2_reg_784(1 downto 0) <= "00";
    tmp_3_mid2_reg_790(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, kernel_in_stream_data_V_0_vld_out, kernel_index_stream_data_V_0_vld_out, kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in, ap_CS_fsm_state44, ap_CS_fsm_state39, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state38, exitcond3_fu_495_p2, ap_CS_fsm_state40, exitcond_flatten_fu_530_p2, ap_CS_fsm_state43, exitcond1_fu_586_p2, ap_CS_fsm_state45, tmp_s_fu_630_p2, exitcond_fu_640_p2, ap_CS_fsm_state46, tmp_i_fu_671_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_state78, exitcond8_fu_700_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond3_fu_495_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (exitcond_flatten_fu_530_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond1_fu_586_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (tmp_s_fu_630_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (exitcond_fu_640_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_i_fu_671_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_i_fu_671_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state78 => 
                if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    TILE_SIZE_1_fu_488_p3 <= 
        TILE_SIZE_cast_reg_740 when (tmp_8_fu_477_p2(0) = '1') else 
        TILE_SIZE_fu_483_p2;
    TILE_SIZE_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv26_1) + unsigned(TILE_SIZE_cast_reg_740));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(47);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(48);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(49);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(51);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state64 <= ap_CS_fsm(52);
    ap_CS_fsm_state67 <= ap_CS_fsm(55);
    ap_CS_fsm_state68 <= ap_CS_fsm(56);
    ap_CS_fsm_state76 <= ap_CS_fsm(64);
    ap_CS_fsm_state77 <= ap_CS_fsm(65);
    ap_CS_fsm_state78 <= ap_CS_fsm(66);
    ap_CS_fsm_state79 <= ap_CS_fsm(67);
    ap_CS_fsm_state80 <= ap_CS_fsm(68);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state78_assign_proc : process(kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in)
    begin
                ap_block_state78 <= ((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state48_assign_proc : process(tmp_i_fu_671_p2)
    begin
        if ((tmp_i_fu_671_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in, ap_CS_fsm_state78, exitcond8_fu_700_p2)
    begin
        if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_408_p4_assign_proc : process(i_i_reg_404, ap_CS_fsm_pp0_stage0, tmp_i_reg_845, i_3_reg_849, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_i_reg_845 = ap_const_lv1_0))) then 
            ap_phi_mux_i_i_phi_fu_408_p4 <= i_3_reg_849;
        else 
            ap_phi_mux_i_i_phi_fu_408_p4 <= i_i_reg_404;
        end if; 
    end process;


    ap_ready_assign_proc : process(kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in, ap_CS_fsm_state78, exitcond8_fu_700_p2)
    begin
        if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_510_p0 <= bound_fu_510_p00(26 - 1 downto 0);
    bound_fu_510_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TILE_SIZE_1_reg_746),33));
    bound_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_510_p0) * unsigned(ap_const_lv33_64), 33));
    exitcond1_fu_586_p2 <= "1" when (j1_reg_348 = ap_const_lv10_310) else "0";
    exitcond2_fu_547_p2 <= "1" when (i_reg_337 = ap_const_lv7_64) else "0";
    exitcond3_fu_495_p2 <= "1" when (j_reg_303 = ap_const_lv10_310) else "0";
    exitcond8_fu_700_p2 <= "1" when (os_idx_reg_415 = length_x_read_reg_732) else "0";
    exitcond_flatten_fu_530_p2 <= "1" when (indvar_flatten_reg_315 = bound_reg_759) else "0";
    exitcond_fu_640_p2 <= "1" when (l_reg_380 = ap_const_lv10_310) else "0";

    grp_fu_426_opcode_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_i_reg_845, tmp_i_reg_845_pp0_iter2_reg, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_00001, ap_block_pp0_stage2_00001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (tmp_i_reg_845 = ap_const_lv1_0))) then 
            grp_fu_426_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (tmp_i_reg_845_pp0_iter2_reg = ap_const_lv1_0))) then 
            grp_fu_426_opcode <= ap_const_lv2_0;
        else 
            grp_fu_426_opcode <= "XX";
        end if; 
    end process;


    grp_fu_426_p0_assign_proc : process(sum_i_reg_392, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, index_buf_load_reg_864, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_426_p0 <= sum_i_reg_392;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_426_p0 <= index_buf_load_reg_864;
        else 
            grp_fu_426_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_426_p1_assign_proc : process(reg_442, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, temp2_buf_load_reg_869, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_426_p1 <= reg_442;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_426_p1 <= temp2_buf_load_reg_869;
        else 
            grp_fu_426_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(sum_i_reg_392, tmp_4_i_reg_874, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_431_p0 <= sum_i_reg_392;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_431_p0 <= tmp_4_i_reg_874;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p1_assign_proc : process(tmp_4_i_reg_874, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_fu_431_p1 <= ap_const_lv32_BD4CCCCD;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_431_p1 <= tmp_4_i_reg_874;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_448_ap_start <= ap_const_logic_1;
        else 
            grp_fu_448_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_448_p1 <= ap_const_lv32_64(8 - 1 downto 0);
    i_2_fu_635_p2 <= std_logic_vector(unsigned(i_mid2_reg_772) + unsigned(ap_const_lv7_1));
    i_3_fu_677_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_i_phi_fu_408_p4) + unsigned(ap_const_lv10_1));
    i_mid2_fu_553_p3 <= 
        ap_const_lv7_0 when (exitcond2_fu_547_p2(0) = '1') else 
        i_reg_337;

    index_buf_address0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_1_fu_516_p1, tmp_3_i_fu_683_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            index_buf_address0 <= tmp_3_i_fu_683_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            index_buf_address0 <= tmp_1_fu_516_p1(10 - 1 downto 0);
        else 
            index_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    index_buf_ce0_assign_proc : process(kernel_index_stream_data_V_0_vld_out, ap_CS_fsm_state39, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            index_buf_ce0 <= ap_const_logic_1;
        else 
            index_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    index_buf_d0 <= kernel_index_stream_data_V_0_data_out;

    index_buf_we0_assign_proc : process(kernel_index_stream_data_V_0_vld_out, ap_CS_fsm_state39)
    begin
        if (((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            index_buf_we0 <= ap_const_logic_1;
        else 
            index_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_535_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_315) + unsigned(ap_const_lv33_1));

    input_buf_address0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state46, tmp_3_cast_fu_616_p1, tmp_13_cast_fu_661_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            input_buf_address0 <= tmp_13_cast_fu_661_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            input_buf_address0 <= tmp_3_cast_fu_616_p1(17 - 1 downto 0);
        else 
            input_buf_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_buf_ce0_assign_proc : process(kernel_in_stream_data_V_0_vld_out, ap_CS_fsm_state44, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            input_buf_ce0 <= ap_const_logic_1;
        else 
            input_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_d0 <= kernel_in_stream_data_V_0_data_out;

    input_buf_we0_assign_proc : process(kernel_in_stream_data_V_0_vld_out, ap_CS_fsm_state44)
    begin
        if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            input_buf_we0 <= ap_const_logic_1;
        else 
            input_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_501_p2 <= std_logic_vector(unsigned(j_reg_303) + unsigned(ap_const_lv10_1));
    j_2_fu_592_p2 <= std_logic_vector(unsigned(j1_reg_348) + unsigned(ap_const_lv10_1));

    kernel_in_stream_TDATA_blk_n_assign_proc : process(kernel_in_stream_data_V_0_state, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            kernel_in_stream_TDATA_blk_n <= kernel_in_stream_data_V_0_state(0);
        else 
            kernel_in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    kernel_in_stream_TREADY <= kernel_in_stream_dest_V_0_state(1);
    kernel_in_stream_data_V_0_ack_in <= kernel_in_stream_data_V_0_state(1);

    kernel_in_stream_data_V_0_ack_out_assign_proc : process(kernel_in_stream_data_V_0_vld_out, ap_CS_fsm_state44)
    begin
        if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            kernel_in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            kernel_in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    kernel_in_stream_data_V_0_data_out_assign_proc : process(kernel_in_stream_data_V_0_payload_A, kernel_in_stream_data_V_0_payload_B, kernel_in_stream_data_V_0_sel)
    begin
        if ((kernel_in_stream_data_V_0_sel = ap_const_logic_1)) then 
            kernel_in_stream_data_V_0_data_out <= kernel_in_stream_data_V_0_payload_B;
        else 
            kernel_in_stream_data_V_0_data_out <= kernel_in_stream_data_V_0_payload_A;
        end if; 
    end process;

    kernel_in_stream_data_V_0_load_A <= (kernel_in_stream_data_V_0_state_cmp_full and not(kernel_in_stream_data_V_0_sel_wr));
    kernel_in_stream_data_V_0_load_B <= (kernel_in_stream_data_V_0_state_cmp_full and kernel_in_stream_data_V_0_sel_wr);
    kernel_in_stream_data_V_0_sel <= kernel_in_stream_data_V_0_sel_rd;
    kernel_in_stream_data_V_0_state_cmp_full <= '0' when (kernel_in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    kernel_in_stream_data_V_0_vld_in <= kernel_in_stream_TVALID;
    kernel_in_stream_data_V_0_vld_out <= kernel_in_stream_data_V_0_state(0);

    kernel_in_stream_dest_V_0_ack_out_assign_proc : process(kernel_in_stream_data_V_0_vld_out, ap_CS_fsm_state44)
    begin
        if (((kernel_in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            kernel_in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            kernel_in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    kernel_in_stream_dest_V_0_vld_in <= kernel_in_stream_TVALID;

    kernel_index_stream_TDATA_blk_n_assign_proc : process(kernel_index_stream_data_V_0_state, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            kernel_index_stream_TDATA_blk_n <= kernel_index_stream_data_V_0_state(0);
        else 
            kernel_index_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    kernel_index_stream_TREADY <= kernel_index_stream_dest_V_0_state(1);
    kernel_index_stream_data_V_0_ack_in <= kernel_index_stream_data_V_0_state(1);

    kernel_index_stream_data_V_0_ack_out_assign_proc : process(kernel_index_stream_data_V_0_vld_out, ap_CS_fsm_state39)
    begin
        if (((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            kernel_index_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            kernel_index_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    kernel_index_stream_data_V_0_data_out_assign_proc : process(kernel_index_stream_data_V_0_payload_A, kernel_index_stream_data_V_0_payload_B, kernel_index_stream_data_V_0_sel)
    begin
        if ((kernel_index_stream_data_V_0_sel = ap_const_logic_1)) then 
            kernel_index_stream_data_V_0_data_out <= kernel_index_stream_data_V_0_payload_B;
        else 
            kernel_index_stream_data_V_0_data_out <= kernel_index_stream_data_V_0_payload_A;
        end if; 
    end process;

    kernel_index_stream_data_V_0_load_A <= (kernel_index_stream_data_V_0_state_cmp_full and not(kernel_index_stream_data_V_0_sel_wr));
    kernel_index_stream_data_V_0_load_B <= (kernel_index_stream_data_V_0_state_cmp_full and kernel_index_stream_data_V_0_sel_wr);
    kernel_index_stream_data_V_0_sel <= kernel_index_stream_data_V_0_sel_rd;
    kernel_index_stream_data_V_0_state_cmp_full <= '0' when (kernel_index_stream_data_V_0_state = ap_const_lv2_1) else '1';
    kernel_index_stream_data_V_0_vld_in <= kernel_index_stream_TVALID;
    kernel_index_stream_data_V_0_vld_out <= kernel_index_stream_data_V_0_state(0);

    kernel_index_stream_dest_V_0_ack_out_assign_proc : process(kernel_index_stream_data_V_0_vld_out, ap_CS_fsm_state39)
    begin
        if (((kernel_index_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            kernel_index_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            kernel_index_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    kernel_index_stream_dest_V_0_vld_in <= kernel_index_stream_TVALID;
    kernel_out_stream_TDATA <= kernel_out_stream_data_V_1_data_out;

    kernel_out_stream_TDATA_blk_n_assign_proc : process(kernel_out_stream_data_V_1_state, ap_CS_fsm_state79, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_TDATA_blk_n <= kernel_out_stream_data_V_1_state(1);
        else 
            kernel_out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    kernel_out_stream_TDEST <= kernel_out_stream_dest_V_1_data_out;
    kernel_out_stream_TID <= kernel_out_stream_id_V_1_data_out;
    kernel_out_stream_TKEEP <= kernel_out_stream_keep_V_1_data_out;
    kernel_out_stream_TLAST <= kernel_out_stream_last_V_1_data_out;
    kernel_out_stream_TSTRB <= kernel_out_stream_strb_V_1_data_out;
    kernel_out_stream_TUSER <= kernel_out_stream_user_V_1_data_out;
    kernel_out_stream_TVALID <= kernel_out_stream_dest_V_1_state(0);
    kernel_out_stream_data_V_1_ack_in <= kernel_out_stream_data_V_1_state(1);
    kernel_out_stream_data_V_1_ack_out <= kernel_out_stream_TREADY;

    kernel_out_stream_data_V_1_data_out_assign_proc : process(kernel_out_stream_data_V_1_payload_A, kernel_out_stream_data_V_1_payload_B, kernel_out_stream_data_V_1_sel)
    begin
        if ((kernel_out_stream_data_V_1_sel = ap_const_logic_1)) then 
            kernel_out_stream_data_V_1_data_out <= kernel_out_stream_data_V_1_payload_B;
        else 
            kernel_out_stream_data_V_1_data_out <= kernel_out_stream_data_V_1_payload_A;
        end if; 
    end process;

    kernel_out_stream_data_V_1_load_A <= (kernel_out_stream_data_V_1_state_cmp_full and not(kernel_out_stream_data_V_1_sel_wr));
    kernel_out_stream_data_V_1_load_B <= (kernel_out_stream_data_V_1_state_cmp_full and kernel_out_stream_data_V_1_sel_wr);
    kernel_out_stream_data_V_1_sel <= kernel_out_stream_data_V_1_sel_rd;
    kernel_out_stream_data_V_1_state_cmp_full <= '0' when (kernel_out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    kernel_out_stream_data_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_data_V_1_vld_out <= kernel_out_stream_data_V_1_state(0);
    kernel_out_stream_dest_V_1_ack_in <= kernel_out_stream_dest_V_1_state(1);
    kernel_out_stream_dest_V_1_ack_out <= kernel_out_stream_TREADY;
    kernel_out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    kernel_out_stream_dest_V_1_sel <= kernel_out_stream_dest_V_1_sel_rd;

    kernel_out_stream_dest_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_dest_V_1_vld_out <= kernel_out_stream_dest_V_1_state(0);
    kernel_out_stream_id_V_1_ack_in <= kernel_out_stream_id_V_1_state(1);
    kernel_out_stream_id_V_1_ack_out <= kernel_out_stream_TREADY;
    kernel_out_stream_id_V_1_data_out <= ap_const_lv5_0;
    kernel_out_stream_id_V_1_sel <= kernel_out_stream_id_V_1_sel_rd;

    kernel_out_stream_id_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_id_V_1_vld_out <= kernel_out_stream_id_V_1_state(0);
    kernel_out_stream_keep_V_1_ack_in <= kernel_out_stream_keep_V_1_state(1);
    kernel_out_stream_keep_V_1_ack_out <= kernel_out_stream_TREADY;
    kernel_out_stream_keep_V_1_data_out <= ap_const_lv4_F;
    kernel_out_stream_keep_V_1_sel <= kernel_out_stream_keep_V_1_sel_rd;

    kernel_out_stream_keep_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_keep_V_1_vld_out <= kernel_out_stream_keep_V_1_state(0);
    kernel_out_stream_last_V_1_ack_in <= kernel_out_stream_last_V_1_state(1);
    kernel_out_stream_last_V_1_ack_out <= kernel_out_stream_TREADY;

    kernel_out_stream_last_V_1_data_out_assign_proc : process(kernel_out_stream_last_V_1_payload_A, kernel_out_stream_last_V_1_payload_B, kernel_out_stream_last_V_1_sel)
    begin
        if ((kernel_out_stream_last_V_1_sel = ap_const_logic_1)) then 
            kernel_out_stream_last_V_1_data_out <= kernel_out_stream_last_V_1_payload_B;
        else 
            kernel_out_stream_last_V_1_data_out <= kernel_out_stream_last_V_1_payload_A;
        end if; 
    end process;

    kernel_out_stream_last_V_1_load_A <= (kernel_out_stream_last_V_1_state_cmp_full and not(kernel_out_stream_last_V_1_sel_wr));
    kernel_out_stream_last_V_1_load_B <= (kernel_out_stream_last_V_1_state_cmp_full and kernel_out_stream_last_V_1_sel_wr);
    kernel_out_stream_last_V_1_sel <= kernel_out_stream_last_V_1_sel_rd;
    kernel_out_stream_last_V_1_state_cmp_full <= '0' when (kernel_out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    kernel_out_stream_last_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_last_V_1_vld_out <= kernel_out_stream_last_V_1_state(0);
    kernel_out_stream_strb_V_1_ack_in <= kernel_out_stream_strb_V_1_state(1);
    kernel_out_stream_strb_V_1_ack_out <= kernel_out_stream_TREADY;
    kernel_out_stream_strb_V_1_data_out <= ap_const_lv4_F;
    kernel_out_stream_strb_V_1_sel <= kernel_out_stream_strb_V_1_sel_rd;

    kernel_out_stream_strb_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_strb_V_1_vld_out <= kernel_out_stream_strb_V_1_state(0);
    kernel_out_stream_user_V_1_ack_in <= kernel_out_stream_user_V_1_state(1);
    kernel_out_stream_user_V_1_ack_out <= kernel_out_stream_TREADY;
    kernel_out_stream_user_V_1_data_out <= ap_const_lv4_0;
    kernel_out_stream_user_V_1_sel <= kernel_out_stream_user_V_1_sel_rd;

    kernel_out_stream_user_V_1_vld_in_assign_proc : process(kernel_out_stream_data_V_1_ack_in, ap_CS_fsm_state79)
    begin
        if (((kernel_out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            kernel_out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            kernel_out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    kernel_out_stream_user_V_1_vld_out <= kernel_out_stream_user_V_1_state(0);
    l_1_fu_646_p2 <= std_logic_vector(unsigned(l_reg_380) + unsigned(ap_const_lv10_1));
    last_assign_fu_716_p2 <= "1" when (os_idx_2_fu_705_p2 = length_x_read_reg_732) else "0";

    length_x_0_ack_out_assign_proc : process(kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in, ap_CS_fsm_state78, exitcond8_fu_700_p2)
    begin
        if ((not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond8_fu_700_p2 = ap_const_lv1_1))) then 
            length_x_0_ack_out <= ap_const_logic_1;
        else 
            length_x_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_694_p2 <= std_logic_vector(signed(m1_reg_359) + signed(ap_const_lv32_1));
    m_mid2_fu_572_p0 <= m_mid2_fu_572_p00(26 - 1 downto 0);
    m_mid2_fu_572_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_mid2_v_v_reg_778),32));
    m_mid2_fu_572_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_mid2_fu_572_p0) * unsigned(ap_const_lv32_64), 32));
    m_mid2_v_v_fu_561_p3 <= 
        p_1_fu_541_p2 when (exitcond2_fu_547_p2(0) = '1') else 
        p_reg_326;
    mul_fu_457_p1 <= mul_fu_457_p10(32 - 1 downto 0);
    mul_fu_457_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_x_read_reg_732),65));
    mul_fu_457_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv65_147AE147B) * unsigned(mul_fu_457_p1), 65));
    next_mul_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv64_310) + unsigned(phi_mul_reg_369));
    os_idx_2_fu_705_p2 <= std_logic_vector(signed(os_idx_reg_415) + signed(ap_const_lv32_1));
    p_1_fu_541_p2 <= std_logic_vector(unsigned(p_reg_326) + unsigned(ap_const_lv26_1));

    result_buf_address0_assign_proc : process(ap_CS_fsm_state77, ap_CS_fsm_state78, tmp_11_fu_689_p1, tmp_7_fu_711_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            result_buf_address0 <= tmp_7_fu_711_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            result_buf_address0 <= tmp_11_fu_689_p1(12 - 1 downto 0);
        else 
            result_buf_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    result_buf_ce0_assign_proc : process(kernel_out_stream_data_V_1_ack_in, kernel_out_stream_keep_V_1_ack_in, kernel_out_stream_strb_V_1_ack_in, kernel_out_stream_user_V_1_ack_in, kernel_out_stream_last_V_1_ack_in, kernel_out_stream_id_V_1_ack_in, kernel_out_stream_dest_V_1_ack_in, ap_CS_fsm_state77, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (not(((kernel_out_stream_keep_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_data_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_dest_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_id_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_last_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_user_V_1_ack_in = ap_const_logic_0) or (kernel_out_stream_strb_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            result_buf_ce0 <= ap_const_logic_1;
        else 
            result_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_buf_we0_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            result_buf_we0 <= ap_const_logic_1;
        else 
            result_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state47, ap_block_pp0_stage0, tmp_6_fu_666_p1, tmp_3_i_fu_683_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            temp2_buf_address0 <= tmp_3_i_fu_683_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            temp2_buf_address0 <= tmp_6_fu_666_p1(10 - 1 downto 0);
        else 
            temp2_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp2_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            temp2_buf_ce0 <= ap_const_logic_1;
        else 
            temp2_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_buf_we0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            temp2_buf_we0 <= ap_const_logic_1;
        else 
            temp2_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_380),18));
    tmp_10_fu_656_p2 <= std_logic_vector(unsigned(tmp_5_reg_813) + unsigned(tmp_10_cast_fu_652_p1));
        tmp_11_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m1_reg_359),64));

    tmp_13_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_656_p2),64));
    tmp_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_303),64));
    tmp_2_fu_726_p0 <= tmp_2_fu_726_p00(7 - 1 downto 0);
    tmp_2_fu_726_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_reg_772),17));
    tmp_2_fu_726_p1 <= ap_const_lv17_310(11 - 1 downto 0);
    tmp_3_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_808),64));
    tmp_3_fu_602_p2 <= std_logic_vector(unsigned(tmp_2_reg_795) + unsigned(tmp_4_cast_fu_598_p1));
    tmp_3_i_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_i_phi_fu_408_p4),64));
    tmp_3_mid2_fu_578_p2 <= std_logic_vector(unsigned(m_mid2_reg_784) + unsigned(ap_const_lv32_64));
    tmp_4_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_348),17));
    tmp_4_fu_473_p1 <= grp_fu_448_p2(8 - 1 downto 0);
    tmp_5_fu_620_p1 <= phi_mul_reg_369(18 - 1 downto 0);
    tmp_6_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_380),64));
        tmp_7_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(os_idx_reg_415),64));

    tmp_8_fu_477_p2 <= "1" when (tmp_4_fu_473_p1 = ap_const_lv8_0) else "0";
    tmp_9_fu_721_p1 <= result_buf_q0;
    tmp_i_fu_671_p2 <= "1" when (ap_phi_mux_i_i_phi_fu_408_p4 = ap_const_lv10_310) else "0";
    tmp_s_fu_630_p2 <= "1" when (signed(m1_reg_359) < signed(tmp_3_mid2_reg_790)) else "0";
end behav;
