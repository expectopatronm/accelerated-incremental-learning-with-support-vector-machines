// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_LOOP_1_proc10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        kernel_index_stream_TDATA,
        kernel_index_stream_TVALID,
        kernel_index_stream_TREADY,
        kernel_index_stream_TSTRB,
        kernel_index_stream_TKEEP,
        kernel_index_stream_TUSER,
        kernel_index_stream_TLAST,
        kernel_index_stream_TID,
        kernel_index_stream_TDEST,
        index_buf_address0,
        index_buf_ce0,
        index_buf_we0,
        index_buf_d0,
        length_x,
        tile_size,
        remaining_size,
        length_x_out_din,
        length_x_out_full_n,
        length_x_out_write,
        tile_size_out_din,
        tile_size_out_full_n,
        tile_size_out_write,
        remaining_size_out_din,
        remaining_size_out_full_n,
        remaining_size_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] kernel_index_stream_TDATA;
input   kernel_index_stream_TVALID;
output   kernel_index_stream_TREADY;
input  [3:0] kernel_index_stream_TSTRB;
input  [3:0] kernel_index_stream_TKEEP;
input  [3:0] kernel_index_stream_TUSER;
input  [0:0] kernel_index_stream_TLAST;
input  [4:0] kernel_index_stream_TID;
input  [4:0] kernel_index_stream_TDEST;
output  [9:0] index_buf_address0;
output   index_buf_ce0;
output   index_buf_we0;
output  [31:0] index_buf_d0;
input  [31:0] length_x;
input  [31:0] tile_size;
input  [31:0] remaining_size;
output  [31:0] length_x_out_din;
input   length_x_out_full_n;
output   length_x_out_write;
output  [31:0] tile_size_out_din;
input   tile_size_out_full_n;
output   tile_size_out_write;
output  [31:0] remaining_size_out_din;
input   remaining_size_out_full_n;
output   remaining_size_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg index_buf_ce0;
reg index_buf_we0;
reg length_x_out_write;
reg tile_size_out_write;
reg remaining_size_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] kernel_index_stream_data_V_0_data_out;
wire    kernel_index_stream_data_V_0_vld_in;
wire    kernel_index_stream_data_V_0_vld_out;
wire    kernel_index_stream_data_V_0_ack_in;
reg    kernel_index_stream_data_V_0_ack_out;
reg   [31:0] kernel_index_stream_data_V_0_payload_A;
reg   [31:0] kernel_index_stream_data_V_0_payload_B;
reg    kernel_index_stream_data_V_0_sel_rd;
reg    kernel_index_stream_data_V_0_sel_wr;
wire    kernel_index_stream_data_V_0_sel;
wire    kernel_index_stream_data_V_0_load_A;
wire    kernel_index_stream_data_V_0_load_B;
reg   [1:0] kernel_index_stream_data_V_0_state;
wire    kernel_index_stream_data_V_0_state_cmp_full;
wire    kernel_index_stream_dest_V_0_vld_in;
wire    kernel_index_stream_dest_V_0_vld_out;
reg    kernel_index_stream_dest_V_0_ack_out;
reg   [1:0] kernel_index_stream_dest_V_0_state;
reg    kernel_index_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond5_i_i_i_i_reg_187;
reg    length_x_out_blk_n;
reg    tile_size_out_blk_n;
reg    remaining_size_out_blk_n;
reg   [9:0] j_0_i_i_i_i_reg_149;
wire   [0:0] exitcond5_i_i_i_i_fu_161_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] is_idx1_fu_167_p2;
reg   [9:0] is_idx1_reg_191;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [9:0] ap_phi_mux_j_0_i_i_i_i_phi_fu_153_p4;
wire   [63:0] tmp_2_i_i_i_fu_173_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 kernel_index_stream_data_V_0_sel_rd = 1'b0;
#0 kernel_index_stream_data_V_0_sel_wr = 1'b0;
#0 kernel_index_stream_data_V_0_state = 2'd0;
#0 kernel_index_stream_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_index_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((kernel_index_stream_data_V_0_ack_out == 1'b1) & (kernel_index_stream_data_V_0_vld_out == 1'b1))) begin
            kernel_index_stream_data_V_0_sel_rd <= ~kernel_index_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_index_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((kernel_index_stream_data_V_0_ack_in == 1'b1) & (kernel_index_stream_data_V_0_vld_in == 1'b1))) begin
            kernel_index_stream_data_V_0_sel_wr <= ~kernel_index_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_index_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_index_stream_data_V_0_state == 2'd2) & (kernel_index_stream_data_V_0_vld_in == 1'b0)) | ((kernel_index_stream_data_V_0_state == 2'd3) & (kernel_index_stream_data_V_0_vld_in == 1'b0) & (kernel_index_stream_data_V_0_ack_out == 1'b1)))) begin
            kernel_index_stream_data_V_0_state <= 2'd2;
        end else if ((((kernel_index_stream_data_V_0_state == 2'd1) & (kernel_index_stream_data_V_0_ack_out == 1'b0)) | ((kernel_index_stream_data_V_0_state == 2'd3) & (kernel_index_stream_data_V_0_ack_out == 1'b0) & (kernel_index_stream_data_V_0_vld_in == 1'b1)))) begin
            kernel_index_stream_data_V_0_state <= 2'd1;
        end else if (((~((kernel_index_stream_data_V_0_vld_in == 1'b0) & (kernel_index_stream_data_V_0_ack_out == 1'b1)) & ~((kernel_index_stream_data_V_0_ack_out == 1'b0) & (kernel_index_stream_data_V_0_vld_in == 1'b1)) & (kernel_index_stream_data_V_0_state == 2'd3)) | ((kernel_index_stream_data_V_0_state == 2'd1) & (kernel_index_stream_data_V_0_ack_out == 1'b1)) | ((kernel_index_stream_data_V_0_state == 2'd2) & (kernel_index_stream_data_V_0_vld_in == 1'b1)))) begin
            kernel_index_stream_data_V_0_state <= 2'd3;
        end else begin
            kernel_index_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_index_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((kernel_index_stream_dest_V_0_state == 2'd2) & (kernel_index_stream_dest_V_0_vld_in == 1'b0)) | ((kernel_index_stream_dest_V_0_state == 2'd3) & (kernel_index_stream_dest_V_0_vld_in == 1'b0) & (kernel_index_stream_dest_V_0_ack_out == 1'b1)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd2;
        end else if ((((kernel_index_stream_dest_V_0_state == 2'd1) & (kernel_index_stream_dest_V_0_ack_out == 1'b0)) | ((kernel_index_stream_dest_V_0_state == 2'd3) & (kernel_index_stream_dest_V_0_ack_out == 1'b0) & (kernel_index_stream_dest_V_0_vld_in == 1'b1)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd1;
        end else if (((~((kernel_index_stream_dest_V_0_vld_in == 1'b0) & (kernel_index_stream_dest_V_0_ack_out == 1'b1)) & ~((kernel_index_stream_dest_V_0_ack_out == 1'b0) & (kernel_index_stream_dest_V_0_vld_in == 1'b1)) & (kernel_index_stream_dest_V_0_state == 2'd3)) | ((kernel_index_stream_dest_V_0_state == 2'd1) & (kernel_index_stream_dest_V_0_ack_out == 1'b1)) | ((kernel_index_stream_dest_V_0_state == 2'd2) & (kernel_index_stream_dest_V_0_vld_in == 1'b1)))) begin
            kernel_index_stream_dest_V_0_state <= 2'd3;
        end else begin
            kernel_index_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_i_i_i_i_reg_149 <= is_idx1_reg_191;
    end else if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_i_i_i_i_reg_149 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond5_i_i_i_i_reg_187 <= exitcond5_i_i_i_i_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_idx1_reg_191 <= is_idx1_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_index_stream_data_V_0_load_A == 1'b1)) begin
        kernel_index_stream_data_V_0_payload_A <= kernel_index_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_index_stream_data_V_0_load_B == 1'b1)) begin
        kernel_index_stream_data_V_0_payload_B <= kernel_index_stream_TDATA;
    end
end

always @ (*) begin
    if ((exitcond5_i_i_i_i_fu_161_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_i_i_i_i_phi_fu_153_p4 = is_idx1_reg_191;
    end else begin
        ap_phi_mux_j_0_i_i_i_i_phi_fu_153_p4 = j_0_i_i_i_i_reg_149;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_buf_ce0 = 1'b1;
    end else begin
        index_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_buf_we0 = 1'b1;
    end else begin
        index_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_index_stream_TDATA_blk_n = kernel_index_stream_data_V_0_state[1'd0];
    end else begin
        kernel_index_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_index_stream_data_V_0_ack_out = 1'b1;
    end else begin
        kernel_index_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((kernel_index_stream_data_V_0_sel == 1'b1)) begin
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_B;
    end else begin
        kernel_index_stream_data_V_0_data_out = kernel_index_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond5_i_i_i_i_reg_187 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_index_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        kernel_index_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_x_out_blk_n = length_x_out_full_n;
    end else begin
        length_x_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_x_out_write = 1'b1;
    end else begin
        length_x_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        remaining_size_out_blk_n = remaining_size_out_full_n;
    end else begin
        remaining_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        remaining_size_out_write = 1'b1;
    end else begin
        remaining_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_size_out_blk_n = tile_size_out_full_n;
    end else begin
        tile_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tile_size_out_write = 1'b1;
    end else begin
        tile_size_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_i_i_i_i_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond5_i_i_i_i_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond5_i_i_i_i_reg_187 == 1'd0) & (kernel_index_stream_dest_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond5_i_i_i_i_reg_187 == 1'd0) & (kernel_index_stream_dest_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (remaining_size_out_full_n == 1'b0) | (tile_size_out_full_n == 1'b0) | (length_x_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond5_i_i_i_i_reg_187 == 1'd0) & (kernel_index_stream_dest_V_0_vld_out == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond5_i_i_i_i_fu_161_p2 = ((ap_phi_mux_j_0_i_i_i_i_phi_fu_153_p4 == 10'd784) ? 1'b1 : 1'b0);

assign index_buf_address0 = tmp_2_i_i_i_fu_173_p1;

assign index_buf_d0 = kernel_index_stream_data_V_0_data_out;

assign is_idx1_fu_167_p2 = (ap_phi_mux_j_0_i_i_i_i_phi_fu_153_p4 + 10'd1);

assign kernel_index_stream_TREADY = kernel_index_stream_dest_V_0_state[1'd1];

assign kernel_index_stream_data_V_0_ack_in = kernel_index_stream_data_V_0_state[1'd1];

assign kernel_index_stream_data_V_0_load_A = (kernel_index_stream_data_V_0_state_cmp_full & ~kernel_index_stream_data_V_0_sel_wr);

assign kernel_index_stream_data_V_0_load_B = (kernel_index_stream_data_V_0_state_cmp_full & kernel_index_stream_data_V_0_sel_wr);

assign kernel_index_stream_data_V_0_sel = kernel_index_stream_data_V_0_sel_rd;

assign kernel_index_stream_data_V_0_state_cmp_full = ((kernel_index_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_index_stream_data_V_0_vld_in = kernel_index_stream_TVALID;

assign kernel_index_stream_data_V_0_vld_out = kernel_index_stream_data_V_0_state[1'd0];

assign kernel_index_stream_dest_V_0_vld_in = kernel_index_stream_TVALID;

assign kernel_index_stream_dest_V_0_vld_out = kernel_index_stream_dest_V_0_state[1'd0];

assign length_x_out_din = length_x;

assign remaining_size_out_din = remaining_size;

assign tile_size_out_din = tile_size;

assign tmp_2_i_i_i_fu_173_p1 = j_0_i_i_i_i_reg_149;

endmodule //Loop_LOOP_1_proc10
