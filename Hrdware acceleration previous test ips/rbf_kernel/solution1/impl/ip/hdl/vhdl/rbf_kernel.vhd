-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rbf_kernel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    in_stream1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream2_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream2_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream2_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    in_stream1_TVALID : IN STD_LOGIC;
    in_stream1_TREADY : OUT STD_LOGIC;
    in_stream2_TVALID : IN STD_LOGIC;
    in_stream2_TREADY : OUT STD_LOGIC;
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of rbf_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rbf_kernel,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=14.512000,HLS_SYN_LAT=3544,HLS_SYN_TPT=3150,HLS_SYN_MEM=4,HLS_SYN_DSP=19,HLS_SYN_FF=2803,HLS_SYN_LUT=4118,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal temp_buf_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_buf_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_buf_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_buf_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_in_stream1_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_1_proc_U0_temp_buf_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_temp_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_1_proc_U0_temp_buf_ce1 : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_we1 : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_in_stream2_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_1_proc_U0_temp2_buf_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc_U0_temp2_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_1_proc_U0_temp2_buf_ce1 : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_we1 : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_temp2_buf : STD_LOGIC;
    signal Loop_1_proc_U0_temp2_buf_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp2_buf : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp2_buf : STD_LOGIC;
    signal ap_channel_done_temp_buf : STD_LOGIC;
    signal Loop_1_proc_U0_temp_buf_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_temp_buf : STD_LOGIC := '0';
    signal ap_sync_channel_write_temp_buf : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_start : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_done : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_temp_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_LOOP_12_proc_U0_temp_buf_ce0 : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_temp_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_LOOP_12_proc_U0_temp_buf_ce1 : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_temp2_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_LOOP_12_proc_U0_temp2_buf_ce0 : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_temp2_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Loop_LOOP_12_proc_U0_temp2_buf_ce1 : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_sum_3_loc_channel : STD_LOGIC;
    signal sum_3_loc_channel_full_n : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_ap_start : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_ap_done : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_ap_continue : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_ap_idle : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_ap_ready : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_out_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TVALID : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_out_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TUSER : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal Block_Rbf_kernel_fun_U0_out_stream_TDEST : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal temp_buf_i_full_n : STD_LOGIC;
    signal temp_buf_t_empty_n : STD_LOGIC;
    signal temp2_buf_i_full_n : STD_LOGIC;
    signal temp2_buf_t_empty_n : STD_LOGIC;
    signal sum_3_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_LOOP_12_proc_U0_start_write : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_start_full_n : STD_LOGIC;
    signal Block_Rbf_kernel_fun_U0_start_write : STD_LOGIC;

    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_stream1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream1_TVALID : IN STD_LOGIC;
        in_stream1_TREADY : OUT STD_LOGIC;
        in_stream1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream1_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream1_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        in_stream1_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        temp_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_buf_ce0 : OUT STD_LOGIC;
        temp_buf_we0 : OUT STD_LOGIC;
        temp_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_buf_ce1 : OUT STD_LOGIC;
        temp_buf_we1 : OUT STD_LOGIC;
        temp_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_stream2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream2_TVALID : IN STD_LOGIC;
        in_stream2_TREADY : OUT STD_LOGIC;
        in_stream2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream2_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
        in_stream2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_stream2_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        in_stream2_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
        temp2_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp2_buf_ce0 : OUT STD_LOGIC;
        temp2_buf_we0 : OUT STD_LOGIC;
        temp2_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp2_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp2_buf_ce1 : OUT STD_LOGIC;
        temp2_buf_we1 : OUT STD_LOGIC;
        temp2_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_LOOP_12_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_buf_ce0 : OUT STD_LOGIC;
        temp_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp_buf_ce1 : OUT STD_LOGIC;
        temp_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp2_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp2_buf_ce0 : OUT STD_LOGIC;
        temp2_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        temp2_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        temp2_buf_ce1 : OUT STD_LOGIC;
        temp2_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Block_Rbf_kernel_fun IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_TVALID : OUT STD_LOGIC;
        out_stream_TREADY : IN STD_LOGIC;
        out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component rbf_kernel_temp_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component rbf_kernel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    rbf_kernel_CONTROL_BUS_s_axi_U : component rbf_kernel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    temp_buf_U : component rbf_kernel_temp_buf
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_temp_buf_address0,
        i_ce0 => Loop_1_proc_U0_temp_buf_ce0,
        i_we0 => Loop_1_proc_U0_temp_buf_we0,
        i_d0 => Loop_1_proc_U0_temp_buf_d0,
        i_q0 => temp_buf_i_q0,
        i_address1 => Loop_1_proc_U0_temp_buf_address1,
        i_ce1 => Loop_1_proc_U0_temp_buf_ce1,
        i_we1 => Loop_1_proc_U0_temp_buf_we1,
        i_d1 => Loop_1_proc_U0_temp_buf_d1,
        i_q1 => temp_buf_i_q1,
        t_address0 => Loop_LOOP_12_proc_U0_temp_buf_address0,
        t_ce0 => Loop_LOOP_12_proc_U0_temp_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp_buf_t_q0,
        t_address1 => Loop_LOOP_12_proc_U0_temp_buf_address1,
        t_ce1 => Loop_LOOP_12_proc_U0_temp_buf_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => temp_buf_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp_buf_i_full_n,
        i_write => ap_channel_done_temp_buf,
        t_empty_n => temp_buf_t_empty_n,
        t_read => Loop_LOOP_12_proc_U0_ap_ready);

    temp2_buf_U : component rbf_kernel_temp_buf
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_temp2_buf_address0,
        i_ce0 => Loop_1_proc_U0_temp2_buf_ce0,
        i_we0 => Loop_1_proc_U0_temp2_buf_we0,
        i_d0 => Loop_1_proc_U0_temp2_buf_d0,
        i_q0 => temp2_buf_i_q0,
        i_address1 => Loop_1_proc_U0_temp2_buf_address1,
        i_ce1 => Loop_1_proc_U0_temp2_buf_ce1,
        i_we1 => Loop_1_proc_U0_temp2_buf_we1,
        i_d1 => Loop_1_proc_U0_temp2_buf_d1,
        i_q1 => temp2_buf_i_q1,
        t_address0 => Loop_LOOP_12_proc_U0_temp2_buf_address0,
        t_ce0 => Loop_LOOP_12_proc_U0_temp2_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => temp2_buf_t_q0,
        t_address1 => Loop_LOOP_12_proc_U0_temp2_buf_address1,
        t_ce1 => Loop_LOOP_12_proc_U0_temp2_buf_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => temp2_buf_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => temp2_buf_i_full_n,
        i_write => ap_channel_done_temp2_buf,
        t_empty_n => temp2_buf_t_empty_n,
        t_read => Loop_LOOP_12_proc_U0_ap_ready);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        in_stream1_TDATA => in_stream1_TDATA,
        in_stream1_TVALID => in_stream1_TVALID,
        in_stream1_TREADY => Loop_1_proc_U0_in_stream1_TREADY,
        in_stream1_TSTRB => in_stream1_TSTRB,
        in_stream1_TKEEP => in_stream1_TKEEP,
        in_stream1_TUSER => in_stream1_TUSER,
        in_stream1_TLAST => in_stream1_TLAST,
        in_stream1_TID => in_stream1_TID,
        in_stream1_TDEST => in_stream1_TDEST,
        temp_buf_address0 => Loop_1_proc_U0_temp_buf_address0,
        temp_buf_ce0 => Loop_1_proc_U0_temp_buf_ce0,
        temp_buf_we0 => Loop_1_proc_U0_temp_buf_we0,
        temp_buf_d0 => Loop_1_proc_U0_temp_buf_d0,
        temp_buf_address1 => Loop_1_proc_U0_temp_buf_address1,
        temp_buf_ce1 => Loop_1_proc_U0_temp_buf_ce1,
        temp_buf_we1 => Loop_1_proc_U0_temp_buf_we1,
        temp_buf_d1 => Loop_1_proc_U0_temp_buf_d1,
        in_stream2_TDATA => in_stream2_TDATA,
        in_stream2_TVALID => in_stream2_TVALID,
        in_stream2_TREADY => Loop_1_proc_U0_in_stream2_TREADY,
        in_stream2_TSTRB => in_stream2_TSTRB,
        in_stream2_TKEEP => in_stream2_TKEEP,
        in_stream2_TUSER => in_stream2_TUSER,
        in_stream2_TLAST => in_stream2_TLAST,
        in_stream2_TID => in_stream2_TID,
        in_stream2_TDEST => in_stream2_TDEST,
        temp2_buf_address0 => Loop_1_proc_U0_temp2_buf_address0,
        temp2_buf_ce0 => Loop_1_proc_U0_temp2_buf_ce0,
        temp2_buf_we0 => Loop_1_proc_U0_temp2_buf_we0,
        temp2_buf_d0 => Loop_1_proc_U0_temp2_buf_d0,
        temp2_buf_address1 => Loop_1_proc_U0_temp2_buf_address1,
        temp2_buf_ce1 => Loop_1_proc_U0_temp2_buf_ce1,
        temp2_buf_we1 => Loop_1_proc_U0_temp2_buf_we1,
        temp2_buf_d1 => Loop_1_proc_U0_temp2_buf_d1);

    Loop_LOOP_12_proc_U0 : component Loop_LOOP_12_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_LOOP_12_proc_U0_ap_start,
        ap_done => Loop_LOOP_12_proc_U0_ap_done,
        ap_continue => Loop_LOOP_12_proc_U0_ap_continue,
        ap_idle => Loop_LOOP_12_proc_U0_ap_idle,
        ap_ready => Loop_LOOP_12_proc_U0_ap_ready,
        temp_buf_address0 => Loop_LOOP_12_proc_U0_temp_buf_address0,
        temp_buf_ce0 => Loop_LOOP_12_proc_U0_temp_buf_ce0,
        temp_buf_q0 => temp_buf_t_q0,
        temp_buf_address1 => Loop_LOOP_12_proc_U0_temp_buf_address1,
        temp_buf_ce1 => Loop_LOOP_12_proc_U0_temp_buf_ce1,
        temp_buf_q1 => temp_buf_t_q1,
        temp2_buf_address0 => Loop_LOOP_12_proc_U0_temp2_buf_address0,
        temp2_buf_ce0 => Loop_LOOP_12_proc_U0_temp2_buf_ce0,
        temp2_buf_q0 => temp2_buf_t_q0,
        temp2_buf_address1 => Loop_LOOP_12_proc_U0_temp2_buf_address1,
        temp2_buf_ce1 => Loop_LOOP_12_proc_U0_temp2_buf_ce1,
        temp2_buf_q1 => temp2_buf_t_q1,
        ap_return => Loop_LOOP_12_proc_U0_ap_return);

    Block_Rbf_kernel_fun_U0 : component Block_Rbf_kernel_fun
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Rbf_kernel_fun_U0_ap_start,
        ap_done => Block_Rbf_kernel_fun_U0_ap_done,
        ap_continue => Block_Rbf_kernel_fun_U0_ap_continue,
        ap_idle => Block_Rbf_kernel_fun_U0_ap_idle,
        ap_ready => Block_Rbf_kernel_fun_U0_ap_ready,
        p_read => sum_3_loc_channel_dout,
        out_stream_TDATA => Block_Rbf_kernel_fun_U0_out_stream_TDATA,
        out_stream_TVALID => Block_Rbf_kernel_fun_U0_out_stream_TVALID,
        out_stream_TREADY => out_stream_TREADY,
        out_stream_TKEEP => Block_Rbf_kernel_fun_U0_out_stream_TKEEP,
        out_stream_TSTRB => Block_Rbf_kernel_fun_U0_out_stream_TSTRB,
        out_stream_TUSER => Block_Rbf_kernel_fun_U0_out_stream_TUSER,
        out_stream_TLAST => Block_Rbf_kernel_fun_U0_out_stream_TLAST,
        out_stream_TID => Block_Rbf_kernel_fun_U0_out_stream_TID,
        out_stream_TDEST => Block_Rbf_kernel_fun_U0_out_stream_TDEST);

    sum_3_loc_channel_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_LOOP_12_proc_U0_ap_return,
        if_full_n => sum_3_loc_channel_full_n,
        if_write => Loop_LOOP_12_proc_U0_ap_done,
        if_dout => sum_3_loc_channel_dout,
        if_empty_n => sum_3_loc_channel_empty_n,
        if_read => Block_Rbf_kernel_fun_U0_ap_ready);





    ap_sync_reg_channel_write_temp2_buf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_temp2_buf <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp2_buf <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp2_buf <= ap_sync_channel_write_temp2_buf;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_temp_buf_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_temp_buf <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_temp_buf <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_temp_buf <= ap_sync_channel_write_temp_buf;
                end if; 
            end if;
        end if;
    end process;

    Block_Rbf_kernel_fun_U0_ap_continue <= ap_const_logic_1;
    Block_Rbf_kernel_fun_U0_ap_start <= sum_3_loc_channel_empty_n;
    Block_Rbf_kernel_fun_U0_start_full_n <= ap_const_logic_1;
    Block_Rbf_kernel_fun_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_ap_continue <= (ap_sync_channel_write_temp_buf and ap_sync_channel_write_temp2_buf);
    Loop_1_proc_U0_ap_start <= ap_start;
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_temp2_buf_full_n <= temp2_buf_i_full_n;
    Loop_1_proc_U0_temp_buf_full_n <= temp_buf_i_full_n;
    Loop_LOOP_12_proc_U0_ap_continue <= sum_3_loc_channel_full_n;
    Loop_LOOP_12_proc_U0_ap_start <= (temp_buf_t_empty_n and temp2_buf_t_empty_n);
    Loop_LOOP_12_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_LOOP_12_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_sum_3_loc_channel <= Loop_LOOP_12_proc_U0_ap_done;
    ap_channel_done_temp2_buf <= ((ap_sync_reg_channel_write_temp2_buf xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_temp_buf <= ((ap_sync_reg_channel_write_temp_buf xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_done <= Block_Rbf_kernel_fun_U0_ap_done;
    ap_idle <= ((sum_3_loc_channel_empty_n xor ap_const_logic_1) and (temp2_buf_t_empty_n xor ap_const_logic_1) and (temp_buf_t_empty_n xor ap_const_logic_1) and Loop_LOOP_12_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle and Block_Rbf_kernel_fun_U0_ap_idle);
    ap_ready <= Loop_1_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_temp2_buf <= ((ap_channel_done_temp2_buf and Loop_1_proc_U0_temp2_buf_full_n) or ap_sync_reg_channel_write_temp2_buf);
    ap_sync_channel_write_temp_buf <= ((ap_channel_done_temp_buf and Loop_1_proc_U0_temp_buf_full_n) or ap_sync_reg_channel_write_temp_buf);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Block_Rbf_kernel_fun_U0_ap_done;
    ap_sync_ready <= Loop_1_proc_U0_ap_ready;
    in_stream1_TREADY <= Loop_1_proc_U0_in_stream1_TREADY;
    in_stream2_TREADY <= Loop_1_proc_U0_in_stream2_TREADY;
    out_stream_TDATA <= Block_Rbf_kernel_fun_U0_out_stream_TDATA;
    out_stream_TDEST <= Block_Rbf_kernel_fun_U0_out_stream_TDEST;
    out_stream_TID <= Block_Rbf_kernel_fun_U0_out_stream_TID;
    out_stream_TKEEP <= Block_Rbf_kernel_fun_U0_out_stream_TKEEP;
    out_stream_TLAST <= Block_Rbf_kernel_fun_U0_out_stream_TLAST;
    out_stream_TSTRB <= Block_Rbf_kernel_fun_U0_out_stream_TSTRB;
    out_stream_TUSER <= Block_Rbf_kernel_fun_U0_out_stream_TUSER;
    out_stream_TVALID <= Block_Rbf_kernel_fun_U0_out_stream_TVALID;
end behav;
