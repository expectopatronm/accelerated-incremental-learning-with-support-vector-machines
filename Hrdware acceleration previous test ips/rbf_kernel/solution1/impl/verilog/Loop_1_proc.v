// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_stream1_TDATA,
        in_stream1_TVALID,
        in_stream1_TREADY,
        in_stream1_TSTRB,
        in_stream1_TKEEP,
        in_stream1_TUSER,
        in_stream1_TLAST,
        in_stream1_TID,
        in_stream1_TDEST,
        temp_buf_address0,
        temp_buf_ce0,
        temp_buf_we0,
        temp_buf_d0,
        temp_buf_address1,
        temp_buf_ce1,
        temp_buf_we1,
        temp_buf_d1,
        in_stream2_TDATA,
        in_stream2_TVALID,
        in_stream2_TREADY,
        in_stream2_TSTRB,
        in_stream2_TKEEP,
        in_stream2_TUSER,
        in_stream2_TLAST,
        in_stream2_TID,
        in_stream2_TDEST,
        temp2_buf_address0,
        temp2_buf_ce0,
        temp2_buf_we0,
        temp2_buf_d0,
        temp2_buf_address1,
        temp2_buf_ce1,
        temp2_buf_we1,
        temp2_buf_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream1_TDATA;
input   in_stream1_TVALID;
output   in_stream1_TREADY;
input  [3:0] in_stream1_TSTRB;
input  [3:0] in_stream1_TKEEP;
input  [3:0] in_stream1_TUSER;
input  [0:0] in_stream1_TLAST;
input  [4:0] in_stream1_TID;
input  [4:0] in_stream1_TDEST;
output  [9:0] temp_buf_address0;
output   temp_buf_ce0;
output   temp_buf_we0;
output  [31:0] temp_buf_d0;
output  [9:0] temp_buf_address1;
output   temp_buf_ce1;
output   temp_buf_we1;
output  [31:0] temp_buf_d1;
input  [31:0] in_stream2_TDATA;
input   in_stream2_TVALID;
output   in_stream2_TREADY;
input  [3:0] in_stream2_TSTRB;
input  [3:0] in_stream2_TKEEP;
input  [3:0] in_stream2_TUSER;
input  [0:0] in_stream2_TLAST;
input  [4:0] in_stream2_TID;
input  [4:0] in_stream2_TDEST;
output  [9:0] temp2_buf_address0;
output   temp2_buf_ce0;
output   temp2_buf_we0;
output  [31:0] temp2_buf_d0;
output  [9:0] temp2_buf_address1;
output   temp2_buf_ce1;
output   temp2_buf_we1;
output  [31:0] temp2_buf_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg temp_buf_ce0;
reg temp_buf_we0;
reg temp_buf_ce1;
reg temp_buf_we1;
reg temp2_buf_ce0;
reg temp2_buf_we0;
reg temp2_buf_ce1;
reg temp2_buf_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] in_stream1_data_V_0_data_out;
wire    in_stream1_data_V_0_vld_in;
wire    in_stream1_data_V_0_vld_out;
wire    in_stream1_data_V_0_ack_in;
reg    in_stream1_data_V_0_ack_out;
reg   [31:0] in_stream1_data_V_0_payload_A;
reg   [31:0] in_stream1_data_V_0_payload_B;
reg    in_stream1_data_V_0_sel_rd;
reg    in_stream1_data_V_0_sel_wr;
wire    in_stream1_data_V_0_sel;
wire    in_stream1_data_V_0_load_A;
wire    in_stream1_data_V_0_load_B;
reg   [1:0] in_stream1_data_V_0_state;
wire    in_stream1_data_V_0_state_cmp_full;
wire    in_stream1_dest_V_0_vld_in;
wire    in_stream1_dest_V_0_vld_out;
reg    in_stream1_dest_V_0_ack_out;
reg   [1:0] in_stream1_dest_V_0_state;
reg   [31:0] in_stream2_data_V_0_data_out;
wire    in_stream2_data_V_0_vld_in;
wire    in_stream2_data_V_0_vld_out;
wire    in_stream2_data_V_0_ack_in;
reg    in_stream2_data_V_0_ack_out;
reg   [31:0] in_stream2_data_V_0_payload_A;
reg   [31:0] in_stream2_data_V_0_payload_B;
reg    in_stream2_data_V_0_sel_rd;
reg    in_stream2_data_V_0_sel_wr;
wire    in_stream2_data_V_0_sel;
wire    in_stream2_data_V_0_load_A;
wire    in_stream2_data_V_0_load_B;
reg   [1:0] in_stream2_data_V_0_state;
wire    in_stream2_data_V_0_state_cmp_full;
wire    in_stream2_dest_V_0_vld_in;
wire    in_stream2_dest_V_0_vld_out;
reg    in_stream2_dest_V_0_ack_out;
reg   [1:0] in_stream2_dest_V_0_state;
reg    in_stream1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_reg_241;
reg    in_stream2_TDATA_blk_n;
reg   [8:0] is_idx1_0_i_i_reg_164;
reg   [9:0] i_0_i_i_reg_175;
wire   [0:0] exitcond_i_i_fu_187_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] is_idx1_fu_193_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] i_fu_235_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] tmp_2_i_fu_208_p1;
wire   [63:0] tmp_4_i_fu_220_p1;
wire   [9:0] tmp_3_i_fu_214_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 in_stream1_data_V_0_sel_rd = 1'b0;
#0 in_stream1_data_V_0_sel_wr = 1'b0;
#0 in_stream1_data_V_0_state = 2'd0;
#0 in_stream1_dest_V_0_state = 2'd0;
#0 in_stream2_data_V_0_sel_rd = 1'b0;
#0 in_stream2_data_V_0_sel_wr = 1'b0;
#0 in_stream2_data_V_0_state = 2'd0;
#0 in_stream2_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream1_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream1_data_V_0_ack_out == 1'b1) & (in_stream1_data_V_0_vld_out == 1'b1))) begin
            in_stream1_data_V_0_sel_rd <= ~in_stream1_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream1_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream1_data_V_0_ack_in == 1'b1) & (in_stream1_data_V_0_vld_in == 1'b1))) begin
            in_stream1_data_V_0_sel_wr <= ~in_stream1_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream1_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream1_data_V_0_state == 2'd2) & (in_stream1_data_V_0_vld_in == 1'b0)) | ((in_stream1_data_V_0_state == 2'd3) & (in_stream1_data_V_0_vld_in == 1'b0) & (in_stream1_data_V_0_ack_out == 1'b1)))) begin
            in_stream1_data_V_0_state <= 2'd2;
        end else if ((((in_stream1_data_V_0_state == 2'd1) & (in_stream1_data_V_0_ack_out == 1'b0)) | ((in_stream1_data_V_0_state == 2'd3) & (in_stream1_data_V_0_ack_out == 1'b0) & (in_stream1_data_V_0_vld_in == 1'b1)))) begin
            in_stream1_data_V_0_state <= 2'd1;
        end else if (((~((in_stream1_data_V_0_vld_in == 1'b0) & (in_stream1_data_V_0_ack_out == 1'b1)) & ~((in_stream1_data_V_0_ack_out == 1'b0) & (in_stream1_data_V_0_vld_in == 1'b1)) & (in_stream1_data_V_0_state == 2'd3)) | ((in_stream1_data_V_0_state == 2'd1) & (in_stream1_data_V_0_ack_out == 1'b1)) | ((in_stream1_data_V_0_state == 2'd2) & (in_stream1_data_V_0_vld_in == 1'b1)))) begin
            in_stream1_data_V_0_state <= 2'd3;
        end else begin
            in_stream1_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream1_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream1_dest_V_0_state == 2'd2) & (in_stream1_dest_V_0_vld_in == 1'b0)) | ((in_stream1_dest_V_0_state == 2'd3) & (in_stream1_dest_V_0_vld_in == 1'b0) & (in_stream1_dest_V_0_ack_out == 1'b1)))) begin
            in_stream1_dest_V_0_state <= 2'd2;
        end else if ((((in_stream1_dest_V_0_state == 2'd1) & (in_stream1_dest_V_0_ack_out == 1'b0)) | ((in_stream1_dest_V_0_state == 2'd3) & (in_stream1_dest_V_0_ack_out == 1'b0) & (in_stream1_dest_V_0_vld_in == 1'b1)))) begin
            in_stream1_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream1_dest_V_0_vld_in == 1'b0) & (in_stream1_dest_V_0_ack_out == 1'b1)) & ~((in_stream1_dest_V_0_ack_out == 1'b0) & (in_stream1_dest_V_0_vld_in == 1'b1)) & (in_stream1_dest_V_0_state == 2'd3)) | ((in_stream1_dest_V_0_state == 2'd1) & (in_stream1_dest_V_0_ack_out == 1'b1)) | ((in_stream1_dest_V_0_state == 2'd2) & (in_stream1_dest_V_0_vld_in == 1'b1)))) begin
            in_stream1_dest_V_0_state <= 2'd3;
        end else begin
            in_stream1_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream2_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream2_data_V_0_ack_out == 1'b1) & (in_stream2_data_V_0_vld_out == 1'b1))) begin
            in_stream2_data_V_0_sel_rd <= ~in_stream2_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream2_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream2_data_V_0_ack_in == 1'b1) & (in_stream2_data_V_0_vld_in == 1'b1))) begin
            in_stream2_data_V_0_sel_wr <= ~in_stream2_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream2_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream2_data_V_0_state == 2'd2) & (in_stream2_data_V_0_vld_in == 1'b0)) | ((in_stream2_data_V_0_state == 2'd3) & (in_stream2_data_V_0_vld_in == 1'b0) & (in_stream2_data_V_0_ack_out == 1'b1)))) begin
            in_stream2_data_V_0_state <= 2'd2;
        end else if ((((in_stream2_data_V_0_state == 2'd1) & (in_stream2_data_V_0_ack_out == 1'b0)) | ((in_stream2_data_V_0_state == 2'd3) & (in_stream2_data_V_0_ack_out == 1'b0) & (in_stream2_data_V_0_vld_in == 1'b1)))) begin
            in_stream2_data_V_0_state <= 2'd1;
        end else if (((~((in_stream2_data_V_0_vld_in == 1'b0) & (in_stream2_data_V_0_ack_out == 1'b1)) & ~((in_stream2_data_V_0_ack_out == 1'b0) & (in_stream2_data_V_0_vld_in == 1'b1)) & (in_stream2_data_V_0_state == 2'd3)) | ((in_stream2_data_V_0_state == 2'd1) & (in_stream2_data_V_0_ack_out == 1'b1)) | ((in_stream2_data_V_0_state == 2'd2) & (in_stream2_data_V_0_vld_in == 1'b1)))) begin
            in_stream2_data_V_0_state <= 2'd3;
        end else begin
            in_stream2_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream2_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream2_dest_V_0_state == 2'd2) & (in_stream2_dest_V_0_vld_in == 1'b0)) | ((in_stream2_dest_V_0_state == 2'd3) & (in_stream2_dest_V_0_vld_in == 1'b0) & (in_stream2_dest_V_0_ack_out == 1'b1)))) begin
            in_stream2_dest_V_0_state <= 2'd2;
        end else if ((((in_stream2_dest_V_0_state == 2'd1) & (in_stream2_dest_V_0_ack_out == 1'b0)) | ((in_stream2_dest_V_0_state == 2'd3) & (in_stream2_dest_V_0_ack_out == 1'b0) & (in_stream2_dest_V_0_vld_in == 1'b1)))) begin
            in_stream2_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream2_dest_V_0_vld_in == 1'b0) & (in_stream2_dest_V_0_ack_out == 1'b1)) & ~((in_stream2_dest_V_0_ack_out == 1'b0) & (in_stream2_dest_V_0_vld_in == 1'b1)) & (in_stream2_dest_V_0_state == 2'd3)) | ((in_stream2_dest_V_0_state == 2'd1) & (in_stream2_dest_V_0_ack_out == 1'b1)) | ((in_stream2_dest_V_0_state == 2'd2) & (in_stream2_dest_V_0_vld_in == 1'b1)))) begin
            in_stream2_dest_V_0_state <= 2'd3;
        end else begin
            in_stream2_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_i_reg_175 <= i_fu_235_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_175 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        is_idx1_0_i_i_reg_164 <= is_idx1_fu_193_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        is_idx1_0_i_i_reg_164 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_i_i_reg_241 <= exitcond_i_i_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream1_data_V_0_load_A == 1'b1)) begin
        in_stream1_data_V_0_payload_A <= in_stream1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream1_data_V_0_load_B == 1'b1)) begin
        in_stream1_data_V_0_payload_B <= in_stream1_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream2_data_V_0_load_A == 1'b1)) begin
        in_stream2_data_V_0_payload_A <= in_stream2_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream2_data_V_0_load_B == 1'b1)) begin
        in_stream2_data_V_0_payload_B <= in_stream2_TDATA;
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_187_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream1_TDATA_blk_n = in_stream1_data_V_0_state[1'd0];
    end else begin
        in_stream1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream1_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream1_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream1_data_V_0_sel == 1'b1)) begin
        in_stream1_data_V_0_data_out = in_stream1_data_V_0_payload_B;
    end else begin
        in_stream1_data_V_0_data_out = in_stream1_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream1_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream1_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream2_TDATA_blk_n = in_stream2_data_V_0_state[1'd0];
    end else begin
        in_stream2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream2_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream2_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream2_data_V_0_sel == 1'b1)) begin
        in_stream2_data_V_0_data_out = in_stream2_data_V_0_payload_B;
    end else begin
        in_stream2_data_V_0_data_out = in_stream2_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream2_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream2_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_buf_ce0 = 1'b1;
    end else begin
        temp2_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_buf_ce1 = 1'b1;
    end else begin
        temp2_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_buf_we0 = 1'b1;
    end else begin
        temp2_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_buf_we1 = 1'b1;
    end else begin
        temp2_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_buf_ce0 = 1'b1;
    end else begin
        temp_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_buf_ce1 = 1'b1;
    end else begin
        temp_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_buf_we0 = 1'b1;
    end else begin
        temp_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_i_reg_241 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_buf_we1 = 1'b1;
    end else begin
        temp_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_187_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_i_fu_187_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_i_reg_241 == 1'd0) & (in_stream2_dest_V_0_vld_out == 1'b0)) | ((exitcond_i_i_reg_241 == 1'd0) & (in_stream1_dest_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_i_reg_241 == 1'd0) & (in_stream2_dest_V_0_vld_out == 1'b0)) | ((exitcond_i_i_reg_241 == 1'd0) & (in_stream1_dest_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_i_i_reg_241 == 1'd0) & (in_stream2_dest_V_0_vld_out == 1'b0)) | ((exitcond_i_i_reg_241 == 1'd0) & (in_stream1_dest_V_0_vld_out == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_i_i_fu_187_p2 = ((is_idx1_0_i_i_reg_164 == 9'd392) ? 1'b1 : 1'b0);

assign i_fu_235_p2 = (i_0_i_i_reg_175 + 10'd2);

assign in_stream1_TREADY = in_stream1_dest_V_0_state[1'd1];

assign in_stream1_data_V_0_ack_in = in_stream1_data_V_0_state[1'd1];

assign in_stream1_data_V_0_load_A = (in_stream1_data_V_0_state_cmp_full & ~in_stream1_data_V_0_sel_wr);

assign in_stream1_data_V_0_load_B = (in_stream1_data_V_0_state_cmp_full & in_stream1_data_V_0_sel_wr);

assign in_stream1_data_V_0_sel = in_stream1_data_V_0_sel_rd;

assign in_stream1_data_V_0_state_cmp_full = ((in_stream1_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream1_data_V_0_vld_in = in_stream1_TVALID;

assign in_stream1_data_V_0_vld_out = in_stream1_data_V_0_state[1'd0];

assign in_stream1_dest_V_0_vld_in = in_stream1_TVALID;

assign in_stream1_dest_V_0_vld_out = in_stream1_dest_V_0_state[1'd0];

assign in_stream2_TREADY = in_stream2_dest_V_0_state[1'd1];

assign in_stream2_data_V_0_ack_in = in_stream2_data_V_0_state[1'd1];

assign in_stream2_data_V_0_load_A = (in_stream2_data_V_0_state_cmp_full & ~in_stream2_data_V_0_sel_wr);

assign in_stream2_data_V_0_load_B = (in_stream2_data_V_0_state_cmp_full & in_stream2_data_V_0_sel_wr);

assign in_stream2_data_V_0_sel = in_stream2_data_V_0_sel_rd;

assign in_stream2_data_V_0_state_cmp_full = ((in_stream2_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream2_data_V_0_vld_in = in_stream2_TVALID;

assign in_stream2_data_V_0_vld_out = in_stream2_data_V_0_state[1'd0];

assign in_stream2_dest_V_0_vld_in = in_stream2_TVALID;

assign in_stream2_dest_V_0_vld_out = in_stream2_dest_V_0_state[1'd0];

assign is_idx1_fu_193_p2 = (is_idx1_0_i_i_reg_164 + 9'd1);

assign temp2_buf_address0 = tmp_2_i_fu_208_p1;

assign temp2_buf_address1 = tmp_4_i_fu_220_p1;

assign temp2_buf_d0 = in_stream2_data_V_0_data_out;

assign temp2_buf_d1 = 32'd0;

assign temp_buf_address0 = tmp_2_i_fu_208_p1;

assign temp_buf_address1 = tmp_4_i_fu_220_p1;

assign temp_buf_d0 = in_stream1_data_V_0_data_out;

assign temp_buf_d1 = 32'd0;

assign tmp_2_i_fu_208_p1 = i_0_i_i_reg_175;

assign tmp_3_i_fu_214_p2 = (i_0_i_i_reg_175 | 10'd1);

assign tmp_4_i_fu_220_p1 = tmp_3_i_fu_214_p2;

endmodule //Loop_1_proc
