-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_Rbf_kernel_fun is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of Block_Rbf_kernel_fun is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_keep_V_1_sel : STD_LOGIC;
    signal out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_strb_V_1_sel : STD_LOGIC;
    signal out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_id_V_1_sel : STD_LOGIC;
    signal out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_dest_V_1_sel : STD_LOGIC;
    signal out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_81_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_stream_data_V_tm_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_81_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_87_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component rbf_kernel_fmul_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rbf_kernel_fexp_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rbf_kernel_fmul_3eOg_U27 : component rbf_kernel_fmul_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read,
        din1 => ap_const_lv32_BD4CCCCD,
        ce => grp_fu_81_ce,
        dout => grp_fu_81_p2);

    rbf_kernel_fexp_3fYi_U28 : component rbf_kernel_fexp_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => tmp_8_i_reg_102,
        ce => grp_fu_87_ce,
        dout => grp_fu_87_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_out = ap_const_logic_1) and (out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_data_V_1_state = ap_const_lv2_3)) or ((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_dest_V_1_sel_rd <= not(out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_dest_V_1_state = ap_const_lv2_1) and (out_stream_dest_V_1_ack_out = ap_const_logic_0)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_dest_V_1_state = ap_const_lv2_1) and (out_stream_dest_V_1_ack_out = ap_const_logic_1)) or ((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_id_V_1_ack_out = ap_const_logic_1) and (out_stream_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_id_V_1_sel_rd <= not(out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_id_V_1_state = ap_const_lv2_1) and (out_stream_id_V_1_ack_out = ap_const_logic_0)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_id_V_1_state = ap_const_lv2_3)) or ((out_stream_id_V_1_state = ap_const_lv2_1) and (out_stream_id_V_1_ack_out = ap_const_logic_1)) or ((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_keep_V_1_sel_rd <= not(out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_keep_V_1_state = ap_const_lv2_1) and (out_stream_keep_V_1_ack_out = ap_const_logic_0)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_keep_V_1_state = ap_const_lv2_1) and (out_stream_keep_V_1_ack_out = ap_const_logic_1)) or ((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_out = ap_const_logic_1) and (out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_last_V_1_state = ap_const_lv2_3)) or ((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_strb_V_1_sel_rd <= not(out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_strb_V_1_state = ap_const_lv2_1) and (out_stream_strb_V_1_ack_out = ap_const_logic_0)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_strb_V_1_state = ap_const_lv2_1) and (out_stream_strb_V_1_ack_out = ap_const_logic_1)) or ((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_user_V_1_ack_out = ap_const_logic_1) and (out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_user_V_1_state = ap_const_lv2_3)) or ((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_data_V_1_payload_A <= out_stream_data_V_tm_fu_92_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_data_V_1_payload_B <= out_stream_data_V_tm_fu_92_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_8_i_reg_102 <= grp_fu_81_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state14_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in)
    begin
                ap_block_state14 <= ((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state14)
    begin
        if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state14)
    begin
        if ((not(((out_stream_data_V_1_ack_in = ap_const_logic_0) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_81_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_81_ce <= ap_const_logic_1;
        else 
            grp_fu_81_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_87_ce_assign_proc : process(ap_CS_fsm_state1, out_stream_dest_V_1_ack_in, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((out_stream_dest_V_1_ack_in = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_87_ce <= ap_const_logic_0;
        else 
            grp_fu_87_ce <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_dest_V_1_data_out;
    out_stream_TID <= out_stream_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_dest_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((out_stream_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_state_cmp_full and out_stream_data_V_1_sel_wr);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_data_V_tm_fu_92_p1 <= grp_fu_87_p2;
    out_stream_dest_V_1_ack_in <= out_stream_dest_V_1_state(1);
    out_stream_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    out_stream_dest_V_1_sel <= out_stream_dest_V_1_sel_rd;

    out_stream_dest_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_1_vld_out <= out_stream_dest_V_1_state(0);
    out_stream_id_V_1_ack_in <= out_stream_id_V_1_state(1);
    out_stream_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_id_V_1_sel <= out_stream_id_V_1_sel_rd;

    out_stream_id_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_1_vld_out <= out_stream_id_V_1_state(0);
    out_stream_keep_V_1_ack_in <= out_stream_keep_V_1_state(1);
    out_stream_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_keep_V_1_data_out <= ap_const_lv4_F;
    out_stream_keep_V_1_sel <= out_stream_keep_V_1_sel_rd;

    out_stream_keep_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_1_vld_out <= out_stream_keep_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;
    out_stream_last_V_1_data_out <= ap_const_lv1_1;
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;

    out_stream_last_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_strb_V_1_ack_in <= out_stream_strb_V_1_state(1);
    out_stream_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_strb_V_1_data_out <= ap_const_lv4_F;
    out_stream_strb_V_1_sel <= out_stream_strb_V_1_sel_rd;

    out_stream_strb_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_1_vld_out <= out_stream_strb_V_1_state(0);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_user_V_1_data_out <= ap_const_lv4_0;
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;

    out_stream_user_V_1_vld_in_assign_proc : process(out_stream_dest_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((out_stream_dest_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);
end behav;
