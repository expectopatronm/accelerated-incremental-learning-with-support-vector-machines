// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rbf_kernel_HH_
#define _rbf_kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_1_proc.h"
#include "Loop_LOOP_12_proc.h"
#include "Block_Rbf_kernel_fun.h"
#include "rbf_kernel_temp_buf.h"
#include "fifo_w32_d2_A.h"
#include "rbf_kernel_CONTROL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32>
struct rbf_kernel : public sc_module {
    // Port declarations 47
    sc_in< sc_logic > s_axi_CONTROL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CONTROL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH/8> > s_axi_CONTROL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CONTROL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CONTROL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_BUS_ADDR_WIDTH> > s_axi_CONTROL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CONTROL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_BUS_DATA_WIDTH> > s_axi_CONTROL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CONTROL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CONTROL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CONTROL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<32> > in_stream1_TDATA;
    sc_in< sc_lv<4> > in_stream1_TKEEP;
    sc_in< sc_lv<4> > in_stream1_TSTRB;
    sc_in< sc_lv<4> > in_stream1_TUSER;
    sc_in< sc_lv<1> > in_stream1_TLAST;
    sc_in< sc_lv<5> > in_stream1_TID;
    sc_in< sc_lv<5> > in_stream1_TDEST;
    sc_in< sc_lv<32> > in_stream2_TDATA;
    sc_in< sc_lv<4> > in_stream2_TKEEP;
    sc_in< sc_lv<4> > in_stream2_TSTRB;
    sc_in< sc_lv<4> > in_stream2_TUSER;
    sc_in< sc_lv<1> > in_stream2_TLAST;
    sc_in< sc_lv<5> > in_stream2_TID;
    sc_in< sc_lv<5> > in_stream2_TDEST;
    sc_out< sc_lv<32> > out_stream_TDATA;
    sc_out< sc_lv<4> > out_stream_TKEEP;
    sc_out< sc_lv<4> > out_stream_TSTRB;
    sc_out< sc_lv<4> > out_stream_TUSER;
    sc_out< sc_lv<1> > out_stream_TLAST;
    sc_out< sc_lv<5> > out_stream_TID;
    sc_out< sc_lv<5> > out_stream_TDEST;
    sc_in< sc_logic > in_stream1_TVALID;
    sc_out< sc_logic > in_stream1_TREADY;
    sc_in< sc_logic > in_stream2_TVALID;
    sc_out< sc_logic > in_stream2_TREADY;
    sc_out< sc_logic > out_stream_TVALID;
    sc_in< sc_logic > out_stream_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const1;


    // Module declarations
    rbf_kernel(sc_module_name name);
    SC_HAS_PROCESS(rbf_kernel);

    ~rbf_kernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    rbf_kernel_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>* rbf_kernel_CONTROL_BUS_s_axi_U;
    rbf_kernel_temp_buf* temp_buf_U;
    rbf_kernel_temp_buf* temp2_buf_U;
    Loop_1_proc* Loop_1_proc_U0;
    Loop_LOOP_12_proc* Loop_LOOP_12_proc_U0;
    Block_Rbf_kernel_fun* Block_Rbf_kernel_fun_U0;
    fifo_w32_d2_A* sum_3_loc_channel_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > temp_buf_i_q0;
    sc_signal< sc_lv<32> > temp_buf_i_q1;
    sc_signal< sc_lv<32> > temp_buf_t_q0;
    sc_signal< sc_lv<32> > temp_buf_t_q1;
    sc_signal< sc_lv<32> > temp2_buf_i_q0;
    sc_signal< sc_lv<32> > temp2_buf_i_q1;
    sc_signal< sc_lv<32> > temp2_buf_t_q0;
    sc_signal< sc_lv<32> > temp2_buf_t_q1;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_1_proc_U0_ap_ready;
    sc_signal< sc_logic > Loop_1_proc_U0_in_stream1_TREADY;
    sc_signal< sc_lv<10> > Loop_1_proc_U0_temp_buf_address0;
    sc_signal< sc_logic > Loop_1_proc_U0_temp_buf_ce0;
    sc_signal< sc_logic > Loop_1_proc_U0_temp_buf_we0;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_temp_buf_d0;
    sc_signal< sc_lv<10> > Loop_1_proc_U0_temp_buf_address1;
    sc_signal< sc_logic > Loop_1_proc_U0_temp_buf_ce1;
    sc_signal< sc_logic > Loop_1_proc_U0_temp_buf_we1;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_temp_buf_d1;
    sc_signal< sc_logic > Loop_1_proc_U0_in_stream2_TREADY;
    sc_signal< sc_lv<10> > Loop_1_proc_U0_temp2_buf_address0;
    sc_signal< sc_logic > Loop_1_proc_U0_temp2_buf_ce0;
    sc_signal< sc_logic > Loop_1_proc_U0_temp2_buf_we0;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_temp2_buf_d0;
    sc_signal< sc_lv<10> > Loop_1_proc_U0_temp2_buf_address1;
    sc_signal< sc_logic > Loop_1_proc_U0_temp2_buf_ce1;
    sc_signal< sc_logic > Loop_1_proc_U0_temp2_buf_we1;
    sc_signal< sc_lv<32> > Loop_1_proc_U0_temp2_buf_d1;
    sc_signal< sc_logic > ap_channel_done_temp2_buf;
    sc_signal< sc_logic > Loop_1_proc_U0_temp2_buf_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp2_buf;
    sc_signal< sc_logic > ap_sync_channel_write_temp2_buf;
    sc_signal< sc_logic > ap_channel_done_temp_buf;
    sc_signal< sc_logic > Loop_1_proc_U0_temp_buf_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_temp_buf;
    sc_signal< sc_logic > ap_sync_channel_write_temp_buf;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_ap_ready;
    sc_signal< sc_lv<10> > Loop_LOOP_12_proc_U0_temp_buf_address0;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_temp_buf_ce0;
    sc_signal< sc_lv<10> > Loop_LOOP_12_proc_U0_temp_buf_address1;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_temp_buf_ce1;
    sc_signal< sc_lv<10> > Loop_LOOP_12_proc_U0_temp2_buf_address0;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_temp2_buf_ce0;
    sc_signal< sc_lv<10> > Loop_LOOP_12_proc_U0_temp2_buf_address1;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_temp2_buf_ce1;
    sc_signal< sc_lv<32> > Loop_LOOP_12_proc_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_sum_3_loc_channel;
    sc_signal< sc_logic > sum_3_loc_channel_full_n;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_ap_start;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_ap_done;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_ap_continue;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_ap_idle;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_Rbf_kernel_fun_U0_out_stream_TDATA;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_out_stream_TVALID;
    sc_signal< sc_lv<4> > Block_Rbf_kernel_fun_U0_out_stream_TKEEP;
    sc_signal< sc_lv<4> > Block_Rbf_kernel_fun_U0_out_stream_TSTRB;
    sc_signal< sc_lv<4> > Block_Rbf_kernel_fun_U0_out_stream_TUSER;
    sc_signal< sc_lv<1> > Block_Rbf_kernel_fun_U0_out_stream_TLAST;
    sc_signal< sc_lv<5> > Block_Rbf_kernel_fun_U0_out_stream_TID;
    sc_signal< sc_lv<5> > Block_Rbf_kernel_fun_U0_out_stream_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > temp_buf_i_full_n;
    sc_signal< sc_logic > temp_buf_t_empty_n;
    sc_signal< sc_logic > temp2_buf_i_full_n;
    sc_signal< sc_logic > temp2_buf_t_empty_n;
    sc_signal< sc_lv<32> > sum_3_loc_channel_dout;
    sc_signal< sc_logic > sum_3_loc_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Loop_1_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_1_proc_U0_start_write;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_LOOP_12_proc_U0_start_write;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_start_full_n;
    sc_signal< sc_logic > Block_Rbf_kernel_fun_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_Block_Rbf_kernel_fun_U0_ap_continue();
    void thread_Block_Rbf_kernel_fun_U0_ap_start();
    void thread_Block_Rbf_kernel_fun_U0_start_full_n();
    void thread_Block_Rbf_kernel_fun_U0_start_write();
    void thread_Loop_1_proc_U0_ap_continue();
    void thread_Loop_1_proc_U0_ap_start();
    void thread_Loop_1_proc_U0_start_full_n();
    void thread_Loop_1_proc_U0_start_write();
    void thread_Loop_1_proc_U0_temp2_buf_full_n();
    void thread_Loop_1_proc_U0_temp_buf_full_n();
    void thread_Loop_LOOP_12_proc_U0_ap_continue();
    void thread_Loop_LOOP_12_proc_U0_ap_start();
    void thread_Loop_LOOP_12_proc_U0_start_full_n();
    void thread_Loop_LOOP_12_proc_U0_start_write();
    void thread_ap_channel_done_sum_3_loc_channel();
    void thread_ap_channel_done_temp2_buf();
    void thread_ap_channel_done_temp_buf();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_channel_write_temp2_buf();
    void thread_ap_sync_channel_write_temp_buf();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_stream1_TREADY();
    void thread_in_stream2_TREADY();
    void thread_out_stream_TDATA();
    void thread_out_stream_TDEST();
    void thread_out_stream_TID();
    void thread_out_stream_TKEEP();
    void thread_out_stream_TLAST();
    void thread_out_stream_TSTRB();
    void thread_out_stream_TUSER();
    void thread_out_stream_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
