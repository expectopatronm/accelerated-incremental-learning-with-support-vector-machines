// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_Rbf_kernel_fun_HH_
#define _Block_Rbf_kernel_fun_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rbf_kernel_fmul_3eOg.h"
#include "rbf_kernel_fexp_3fYi.h"

namespace ap_rtl {

struct Block_Rbf_kernel_fun : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > p_read;
    sc_out< sc_lv<32> > out_stream_TDATA;
    sc_out< sc_logic > out_stream_TVALID;
    sc_in< sc_logic > out_stream_TREADY;
    sc_out< sc_lv<4> > out_stream_TKEEP;
    sc_out< sc_lv<4> > out_stream_TSTRB;
    sc_out< sc_lv<4> > out_stream_TUSER;
    sc_out< sc_lv<1> > out_stream_TLAST;
    sc_out< sc_lv<5> > out_stream_TID;
    sc_out< sc_lv<5> > out_stream_TDEST;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    Block_Rbf_kernel_fun(sc_module_name name);
    SC_HAS_PROCESS(Block_Rbf_kernel_fun);

    ~Block_Rbf_kernel_fun();

    sc_trace_file* mVcdFile;

    rbf_kernel_fmul_3eOg<1,4,32,32,32>* rbf_kernel_fmul_3eOg_U27;
    rbf_kernel_fexp_3fYi<1,9,32,32,32>* rbf_kernel_fexp_3fYi_U28;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > out_stream_data_V_1_data_out;
    sc_signal< sc_logic > out_stream_data_V_1_vld_in;
    sc_signal< sc_logic > out_stream_data_V_1_vld_out;
    sc_signal< sc_logic > out_stream_data_V_1_ack_in;
    sc_signal< sc_logic > out_stream_data_V_1_ack_out;
    sc_signal< sc_lv<32> > out_stream_data_V_1_payload_A;
    sc_signal< sc_lv<32> > out_stream_data_V_1_payload_B;
    sc_signal< sc_logic > out_stream_data_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_data_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_data_V_1_sel;
    sc_signal< sc_logic > out_stream_data_V_1_load_A;
    sc_signal< sc_logic > out_stream_data_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_data_V_1_state;
    sc_signal< sc_logic > out_stream_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > out_stream_keep_V_1_data_out;
    sc_signal< sc_logic > out_stream_keep_V_1_vld_in;
    sc_signal< sc_logic > out_stream_keep_V_1_vld_out;
    sc_signal< sc_logic > out_stream_keep_V_1_ack_in;
    sc_signal< sc_logic > out_stream_keep_V_1_ack_out;
    sc_signal< sc_logic > out_stream_keep_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_keep_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_keep_V_1_state;
    sc_signal< sc_lv<4> > out_stream_strb_V_1_data_out;
    sc_signal< sc_logic > out_stream_strb_V_1_vld_in;
    sc_signal< sc_logic > out_stream_strb_V_1_vld_out;
    sc_signal< sc_logic > out_stream_strb_V_1_ack_in;
    sc_signal< sc_logic > out_stream_strb_V_1_ack_out;
    sc_signal< sc_logic > out_stream_strb_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_strb_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_strb_V_1_state;
    sc_signal< sc_lv<4> > out_stream_user_V_1_data_out;
    sc_signal< sc_logic > out_stream_user_V_1_vld_in;
    sc_signal< sc_logic > out_stream_user_V_1_vld_out;
    sc_signal< sc_logic > out_stream_user_V_1_ack_in;
    sc_signal< sc_logic > out_stream_user_V_1_ack_out;
    sc_signal< sc_logic > out_stream_user_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_user_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_user_V_1_state;
    sc_signal< sc_lv<1> > out_stream_last_V_1_data_out;
    sc_signal< sc_logic > out_stream_last_V_1_vld_in;
    sc_signal< sc_logic > out_stream_last_V_1_vld_out;
    sc_signal< sc_logic > out_stream_last_V_1_ack_in;
    sc_signal< sc_logic > out_stream_last_V_1_ack_out;
    sc_signal< sc_logic > out_stream_last_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_last_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_last_V_1_state;
    sc_signal< sc_lv<5> > out_stream_id_V_1_data_out;
    sc_signal< sc_logic > out_stream_id_V_1_vld_in;
    sc_signal< sc_logic > out_stream_id_V_1_vld_out;
    sc_signal< sc_logic > out_stream_id_V_1_ack_in;
    sc_signal< sc_logic > out_stream_id_V_1_ack_out;
    sc_signal< sc_logic > out_stream_id_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_id_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_id_V_1_state;
    sc_signal< sc_lv<5> > out_stream_dest_V_1_data_out;
    sc_signal< sc_logic > out_stream_dest_V_1_vld_in;
    sc_signal< sc_logic > out_stream_dest_V_1_vld_out;
    sc_signal< sc_logic > out_stream_dest_V_1_ack_in;
    sc_signal< sc_logic > out_stream_dest_V_1_ack_out;
    sc_signal< sc_logic > out_stream_dest_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_dest_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_dest_V_1_state;
    sc_signal< sc_logic > out_stream_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > grp_fu_81_p2;
    sc_signal< sc_lv<32> > tmp_8_i_reg_102;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > out_stream_data_V_tm_fu_92_p1;
    sc_signal< bool > ap_block_state14;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > grp_fu_87_p2;
    sc_signal< sc_logic > grp_fu_81_ce;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_fu_87_ce;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_state13;
    static const sc_lv<14> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_BD4CCCCD;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_block_state14();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_81_ce();
    void thread_grp_fu_87_ce();
    void thread_out_stream_TDATA();
    void thread_out_stream_TDATA_blk_n();
    void thread_out_stream_TDEST();
    void thread_out_stream_TID();
    void thread_out_stream_TKEEP();
    void thread_out_stream_TLAST();
    void thread_out_stream_TSTRB();
    void thread_out_stream_TUSER();
    void thread_out_stream_TVALID();
    void thread_out_stream_data_V_1_ack_in();
    void thread_out_stream_data_V_1_ack_out();
    void thread_out_stream_data_V_1_data_out();
    void thread_out_stream_data_V_1_load_A();
    void thread_out_stream_data_V_1_load_B();
    void thread_out_stream_data_V_1_sel();
    void thread_out_stream_data_V_1_state_cmp_full();
    void thread_out_stream_data_V_1_vld_in();
    void thread_out_stream_data_V_1_vld_out();
    void thread_out_stream_data_V_tm_fu_92_p1();
    void thread_out_stream_dest_V_1_ack_in();
    void thread_out_stream_dest_V_1_ack_out();
    void thread_out_stream_dest_V_1_data_out();
    void thread_out_stream_dest_V_1_sel();
    void thread_out_stream_dest_V_1_vld_in();
    void thread_out_stream_dest_V_1_vld_out();
    void thread_out_stream_id_V_1_ack_in();
    void thread_out_stream_id_V_1_ack_out();
    void thread_out_stream_id_V_1_data_out();
    void thread_out_stream_id_V_1_sel();
    void thread_out_stream_id_V_1_vld_in();
    void thread_out_stream_id_V_1_vld_out();
    void thread_out_stream_keep_V_1_ack_in();
    void thread_out_stream_keep_V_1_ack_out();
    void thread_out_stream_keep_V_1_data_out();
    void thread_out_stream_keep_V_1_sel();
    void thread_out_stream_keep_V_1_vld_in();
    void thread_out_stream_keep_V_1_vld_out();
    void thread_out_stream_last_V_1_ack_in();
    void thread_out_stream_last_V_1_ack_out();
    void thread_out_stream_last_V_1_data_out();
    void thread_out_stream_last_V_1_sel();
    void thread_out_stream_last_V_1_vld_in();
    void thread_out_stream_last_V_1_vld_out();
    void thread_out_stream_strb_V_1_ack_in();
    void thread_out_stream_strb_V_1_ack_out();
    void thread_out_stream_strb_V_1_data_out();
    void thread_out_stream_strb_V_1_sel();
    void thread_out_stream_strb_V_1_vld_in();
    void thread_out_stream_strb_V_1_vld_out();
    void thread_out_stream_user_V_1_ack_in();
    void thread_out_stream_user_V_1_ack_out();
    void thread_out_stream_user_V_1_data_out();
    void thread_out_stream_user_V_1_sel();
    void thread_out_stream_user_V_1_vld_in();
    void thread_out_stream_user_V_1_vld_out();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
