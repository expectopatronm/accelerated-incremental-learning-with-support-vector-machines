// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_Rbf_kernel_fun.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_Rbf_kernel_fun::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_Rbf_kernel_fun::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state1 = "1";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state2 = "10";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state3 = "100";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state4 = "1000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state5 = "10000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state6 = "100000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> Block_Rbf_kernel_fun::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Block_Rbf_kernel_fun::ap_const_lv1_0 = "0";
const sc_lv<1> Block_Rbf_kernel_fun::ap_const_lv1_1 = "1";
const sc_lv<2> Block_Rbf_kernel_fun::ap_const_lv2_0 = "00";
const sc_lv<2> Block_Rbf_kernel_fun::ap_const_lv2_2 = "10";
const sc_lv<2> Block_Rbf_kernel_fun::ap_const_lv2_3 = "11";
const sc_lv<2> Block_Rbf_kernel_fun::ap_const_lv2_1 = "1";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_C = "1100";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_D = "1101";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_3 = "11";
const sc_lv<5> Block_Rbf_kernel_fun::ap_const_lv5_0 = "00000";
const sc_lv<4> Block_Rbf_kernel_fun::ap_const_lv4_0 = "0000";
const sc_lv<4> Block_Rbf_kernel_fun::ap_const_lv4_F = "1111";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_BD4CCCCD = "10111101010011001100110011001101";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_4 = "100";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_1 = "1";
const sc_lv<32> Block_Rbf_kernel_fun::ap_const_lv32_2 = "10";
const bool Block_Rbf_kernel_fun::ap_const_boolean_1 = true;

Block_Rbf_kernel_fun::Block_Rbf_kernel_fun(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rbf_kernel_fmul_3eOg_U27 = new rbf_kernel_fmul_3eOg<1,4,32,32,32>("rbf_kernel_fmul_3eOg_U27");
    rbf_kernel_fmul_3eOg_U27->clk(ap_clk);
    rbf_kernel_fmul_3eOg_U27->reset(ap_rst);
    rbf_kernel_fmul_3eOg_U27->din0(p_read);
    rbf_kernel_fmul_3eOg_U27->din1(ap_var_for_const0);
    rbf_kernel_fmul_3eOg_U27->ce(grp_fu_81_ce);
    rbf_kernel_fmul_3eOg_U27->dout(grp_fu_81_p2);
    rbf_kernel_fexp_3fYi_U28 = new rbf_kernel_fexp_3fYi<1,9,32,32,32>("rbf_kernel_fexp_3fYi_U28");
    rbf_kernel_fexp_3fYi_U28->clk(ap_clk);
    rbf_kernel_fexp_3fYi_U28->reset(ap_rst);
    rbf_kernel_fexp_3fYi_U28->din0(ap_var_for_const1);
    rbf_kernel_fexp_3fYi_U28->din1(tmp_8_i_reg_102);
    rbf_kernel_fexp_3fYi_U28->ce(grp_fu_87_ce);
    rbf_kernel_fexp_3fYi_U28->dout(grp_fu_87_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state14);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_81_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_87_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( out_stream_dest_V_1_data_out );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( out_stream_id_V_1_data_out );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( out_stream_keep_V_1_data_out );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( out_stream_strb_V_1_data_out );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( out_stream_user_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_in);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_data_V_1_data_out);
    sensitive << ( out_stream_data_V_1_payload_A );
    sensitive << ( out_stream_data_V_1_payload_B );
    sensitive << ( out_stream_data_V_1_sel );

    SC_METHOD(thread_out_stream_data_V_1_load_A);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_load_B);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_sel);
    sensitive << ( out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_data_V_1_state_cmp_full);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_data_V_1_vld_out);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_tm_fu_92_p1);
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_out_stream_dest_V_1_ack_in);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_dest_V_1_data_out);
    sensitive << ( out_stream_dest_V_1_sel );

    SC_METHOD(thread_out_stream_dest_V_1_sel);
    sensitive << ( out_stream_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_dest_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_dest_V_1_vld_out);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_in);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_id_V_1_data_out);
    sensitive << ( out_stream_id_V_1_sel );

    SC_METHOD(thread_out_stream_id_V_1_sel);
    sensitive << ( out_stream_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_id_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_id_V_1_vld_out);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_in);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_keep_V_1_data_out);
    sensitive << ( out_stream_keep_V_1_sel );

    SC_METHOD(thread_out_stream_keep_V_1_sel);
    sensitive << ( out_stream_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_keep_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_keep_V_1_vld_out);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_in);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_last_V_1_data_out);
    sensitive << ( out_stream_last_V_1_sel );

    SC_METHOD(thread_out_stream_last_V_1_sel);
    sensitive << ( out_stream_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_last_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_last_V_1_vld_out);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_in);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_strb_V_1_data_out);
    sensitive << ( out_stream_strb_V_1_sel );

    SC_METHOD(thread_out_stream_strb_V_1_sel);
    sensitive << ( out_stream_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_strb_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_strb_V_1_vld_out);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_in);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_user_V_1_data_out);
    sensitive << ( out_stream_user_V_1_sel );

    SC_METHOD(thread_out_stream_user_V_1_sel);
    sensitive << ( out_stream_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_user_V_1_vld_in);
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_stream_user_V_1_vld_out);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000000001";
    out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_data_V_1_state = "00";
    out_stream_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_keep_V_1_state = "00";
    out_stream_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_strb_V_1_state = "00";
    out_stream_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_user_V_1_state = "00";
    out_stream_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_last_V_1_state = "00";
    out_stream_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_id_V_1_state = "00";
    out_stream_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_Rbf_kernel_fun_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_data_V_1_data_out, "out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_in, "out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_out, "out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_in, "out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_out, "out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_A, "out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_B, "out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_rd, "out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_wr, "out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_data_V_1_sel, "out_stream_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_data_V_1_load_A, "out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_data_V_1_load_B, "out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_data_V_1_state, "out_stream_data_V_1_state");
    sc_trace(mVcdFile, out_stream_data_V_1_state_cmp_full, "out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_keep_V_1_data_out, "out_stream_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_in, "out_stream_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_out, "out_stream_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_in, "out_stream_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_out, "out_stream_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel_rd, "out_stream_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel, "out_stream_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_keep_V_1_state, "out_stream_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_strb_V_1_data_out, "out_stream_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_in, "out_stream_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_out, "out_stream_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_in, "out_stream_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_out, "out_stream_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel_rd, "out_stream_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel, "out_stream_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_strb_V_1_state, "out_stream_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_user_V_1_data_out, "out_stream_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_in, "out_stream_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_out, "out_stream_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_in, "out_stream_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_out, "out_stream_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_user_V_1_sel_rd, "out_stream_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_user_V_1_sel, "out_stream_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_user_V_1_state, "out_stream_user_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_data_out, "out_stream_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_in, "out_stream_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_out, "out_stream_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_in, "out_stream_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_out, "out_stream_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_rd, "out_stream_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_last_V_1_sel, "out_stream_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_last_V_1_state, "out_stream_last_V_1_state");
    sc_trace(mVcdFile, out_stream_id_V_1_data_out, "out_stream_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_in, "out_stream_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_out, "out_stream_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_in, "out_stream_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_out, "out_stream_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_id_V_1_sel_rd, "out_stream_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_id_V_1_sel, "out_stream_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_id_V_1_state, "out_stream_id_V_1_state");
    sc_trace(mVcdFile, out_stream_dest_V_1_data_out, "out_stream_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_in, "out_stream_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_out, "out_stream_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_in, "out_stream_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_out, "out_stream_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel_rd, "out_stream_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel, "out_stream_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_dest_V_1_state, "out_stream_dest_V_1_state");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, grp_fu_81_p2, "grp_fu_81_p2");
    sc_trace(mVcdFile, tmp_8_i_reg_102, "tmp_8_i_reg_102");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, out_stream_data_V_tm_fu_92_p1, "out_stream_data_V_tm_fu_92_p1");
    sc_trace(mVcdFile, ap_block_state14, "ap_block_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_87_p2, "grp_fu_87_p2");
    sc_trace(mVcdFile, grp_fu_81_ce, "grp_fu_81_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_87_ce, "grp_fu_87_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_Rbf_kernel_fun::~Block_Rbf_kernel_fun() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete rbf_kernel_fmul_3eOg_U27;
    delete rbf_kernel_fexp_3fYi_U28;
}

void Block_Rbf_kernel_fun::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void Block_Rbf_kernel_fun::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_BD4CCCCD;
}

void Block_Rbf_kernel_fun::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_out.read()))) {
            out_stream_data_V_1_sel_rd =  (sc_logic) (~out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_in.read()))) {
            out_stream_data_V_1_sel_wr =  (sc_logic) (~out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()))))) {
            out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_out.read()))) {
            out_stream_dest_V_1_sel_rd =  (sc_logic) (~out_stream_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()))))) {
            out_stream_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_out.read()))) {
            out_stream_id_V_1_sel_rd =  (sc_logic) (~out_stream_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()))))) {
            out_stream_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_out.read()))) {
            out_stream_keep_V_1_sel_rd =  (sc_logic) (~out_stream_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()))))) {
            out_stream_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_out.read()))) {
            out_stream_last_V_1_sel_rd =  (sc_logic) (~out_stream_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()))))) {
            out_stream_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_out.read()))) {
            out_stream_strb_V_1_sel_rd =  (sc_logic) (~out_stream_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()))))) {
            out_stream_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_out.read()))) {
            out_stream_user_V_1_sel_rd =  (sc_logic) (~out_stream_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()))))) {
            out_stream_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_A.read())) {
        out_stream_data_V_1_payload_A = out_stream_data_V_tm_fu_92_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_B.read())) {
        out_stream_data_V_1_payload_B = out_stream_data_V_tm_fu_92_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_8_i_reg_102 = grp_fu_81_p2.read();
    }
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Block_Rbf_kernel_fun::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Block_Rbf_kernel_fun::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_Rbf_kernel_fun::thread_ap_block_state14() {
    ap_block_state14 = (esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0));
}

void Block_Rbf_kernel_fun::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_Rbf_kernel_fun::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_grp_fu_81_ce() {
    if (((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        grp_fu_81_ce = ap_const_logic_1;
    } else {
        grp_fu_81_ce = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_grp_fu_87_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0)))) {
        grp_fu_87_ce = ap_const_logic_0;
    } else {
        grp_fu_87_ce = ap_const_logic_1;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_data_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        out_stream_TDATA_blk_n = out_stream_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_TDEST() {
    out_stream_TDEST = out_stream_dest_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TID() {
    out_stream_TID = out_stream_id_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TKEEP() {
    out_stream_TKEEP = out_stream_keep_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_last_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TSTRB() {
    out_stream_TSTRB = out_stream_strb_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TUSER() {
    out_stream_TUSER = out_stream_user_V_1_data_out.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_dest_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_ack_in() {
    out_stream_data_V_1_ack_in = out_stream_data_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_ack_out() {
    out_stream_data_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_sel.read())) {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B.read();
    } else {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A.read();
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_load_A() {
    out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full.read() & ~out_stream_data_V_1_sel_wr.read());
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_load_B() {
    out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr.read() & out_stream_data_V_1_state_cmp_full.read());
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_sel() {
    out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_state_cmp_full() {
    out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_1_vld_out() {
    out_stream_data_V_1_vld_out = out_stream_data_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_data_V_tm_fu_92_p1() {
    out_stream_data_V_tm_fu_92_p1 = grp_fu_87_p2.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_ack_in() {
    out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_ack_out() {
    out_stream_dest_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_data_out() {
    out_stream_dest_V_1_data_out = ap_const_lv5_0;
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_sel() {
    out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_dest_V_1_vld_out() {
    out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_ack_in() {
    out_stream_id_V_1_ack_in = out_stream_id_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_ack_out() {
    out_stream_id_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_data_out() {
    out_stream_id_V_1_data_out = ap_const_lv5_0;
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_sel() {
    out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_id_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_id_V_1_vld_out() {
    out_stream_id_V_1_vld_out = out_stream_id_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_ack_in() {
    out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_ack_out() {
    out_stream_keep_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_data_out() {
    out_stream_keep_V_1_data_out = ap_const_lv4_F;
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_sel() {
    out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_keep_V_1_vld_out() {
    out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_ack_in() {
    out_stream_last_V_1_ack_in = out_stream_last_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_ack_out() {
    out_stream_last_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_data_out() {
    out_stream_last_V_1_data_out = ap_const_lv1_1;
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_sel() {
    out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_last_V_1_vld_out() {
    out_stream_last_V_1_vld_out = out_stream_last_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_ack_in() {
    out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_ack_out() {
    out_stream_strb_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_data_out() {
    out_stream_strb_V_1_data_out = ap_const_lv4_F;
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_sel() {
    out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_strb_V_1_vld_out() {
    out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_ack_in() {
    out_stream_user_V_1_ack_in = out_stream_user_V_1_state.read()[1];
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_ack_out() {
    out_stream_user_V_1_ack_out = out_stream_TREADY.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_data_out() {
    out_stream_user_V_1_data_out = ap_const_lv4_0;
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_sel() {
    out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd.read();
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        out_stream_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Block_Rbf_kernel_fun::thread_out_stream_user_V_1_vld_out() {
    out_stream_user_V_1_vld_out = out_stream_user_V_1_state.read()[0];
}

void Block_Rbf_kernel_fun::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((!(esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXX";
            break;
    }
}

}

