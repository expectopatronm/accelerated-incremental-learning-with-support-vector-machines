// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Rbf_kernel_fun (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [3:0] out_stream_TKEEP;
output  [3:0] out_stream_TSTRB;
output  [3:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [4:0] out_stream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [31:0] out_stream_data_V_1_payload_A;
reg   [31:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
wire   [3:0] out_stream_keep_V_1_data_out;
reg    out_stream_keep_V_1_vld_in;
wire    out_stream_keep_V_1_vld_out;
wire    out_stream_keep_V_1_ack_in;
wire    out_stream_keep_V_1_ack_out;
reg    out_stream_keep_V_1_sel_rd;
wire    out_stream_keep_V_1_sel;
reg   [1:0] out_stream_keep_V_1_state;
wire   [3:0] out_stream_strb_V_1_data_out;
reg    out_stream_strb_V_1_vld_in;
wire    out_stream_strb_V_1_vld_out;
wire    out_stream_strb_V_1_ack_in;
wire    out_stream_strb_V_1_ack_out;
reg    out_stream_strb_V_1_sel_rd;
wire    out_stream_strb_V_1_sel;
reg   [1:0] out_stream_strb_V_1_state;
wire   [3:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg    out_stream_user_V_1_sel_rd;
wire    out_stream_user_V_1_sel;
reg   [1:0] out_stream_user_V_1_state;
wire   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg    out_stream_last_V_1_sel_rd;
wire    out_stream_last_V_1_sel;
reg   [1:0] out_stream_last_V_1_state;
wire   [4:0] out_stream_id_V_1_data_out;
reg    out_stream_id_V_1_vld_in;
wire    out_stream_id_V_1_vld_out;
wire    out_stream_id_V_1_ack_in;
wire    out_stream_id_V_1_ack_out;
reg    out_stream_id_V_1_sel_rd;
wire    out_stream_id_V_1_sel;
reg   [1:0] out_stream_id_V_1_state;
wire   [4:0] out_stream_dest_V_1_data_out;
reg    out_stream_dest_V_1_vld_in;
wire    out_stream_dest_V_1_vld_out;
wire    out_stream_dest_V_1_ack_in;
wire    out_stream_dest_V_1_ack_out;
reg    out_stream_dest_V_1_sel_rd;
wire    out_stream_dest_V_1_sel;
reg   [1:0] out_stream_dest_V_1_state;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    ap_block_state1;
wire   [31:0] grp_fu_81_p2;
reg   [31:0] tmp_8_i_reg_102;
wire    ap_CS_fsm_state4;
wire   [31:0] out_stream_data_V_tm_fu_92_p1;
reg    ap_block_state14;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_87_p2;
reg    grp_fu_81_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_fu_87_ce;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_keep_V_1_sel_rd = 1'b0;
#0 out_stream_keep_V_1_state = 2'd0;
#0 out_stream_strb_V_1_sel_rd = 1'b0;
#0 out_stream_strb_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 out_stream_id_V_1_sel_rd = 1'b0;
#0 out_stream_id_V_1_state = 2'd0;
#0 out_stream_dest_V_1_sel_rd = 1'b0;
#0 out_stream_dest_V_1_state = 2'd0;
end

rbf_kernel_fmul_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rbf_kernel_fmul_3eOg_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_read),
    .din1(32'd3175926989),
    .ce(grp_fu_81_ce),
    .dout(grp_fu_81_p2)
);

rbf_kernel_fexp_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rbf_kernel_fexp_3fYi_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(tmp_8_i_reg_102),
    .ce(grp_fu_87_ce),
    .dout(grp_fu_87_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_out == 1'b1) & (out_stream_data_V_1_vld_out == 1'b1))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_in == 1'b1) & (out_stream_data_V_1_vld_in == 1'b1))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)) & ~((out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)) & (out_stream_data_V_1_state == 2'd3)) | ((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b1)) | ((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_dest_V_1_ack_out == 1'b1) & (out_stream_dest_V_1_vld_out == 1'b1))) begin
            out_stream_dest_V_1_sel_rd <= ~out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b0)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd2;
        end else if ((((out_stream_dest_V_1_state == 2'd1) & (out_stream_dest_V_1_ack_out == 1'b0)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)) & ~((out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)) & (out_stream_dest_V_1_state == 2'd3)) | ((out_stream_dest_V_1_state == 2'd1) & (out_stream_dest_V_1_ack_out == 1'b1)) | ((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_id_V_1_ack_out == 1'b1) & (out_stream_id_V_1_vld_out == 1'b1))) begin
            out_stream_id_V_1_sel_rd <= ~out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b0)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd2;
        end else if ((((out_stream_id_V_1_state == 2'd1) & (out_stream_id_V_1_ack_out == 1'b0)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd1;
        end else if (((~((out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)) & ~((out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)) & (out_stream_id_V_1_state == 2'd3)) | ((out_stream_id_V_1_state == 2'd1) & (out_stream_id_V_1_ack_out == 1'b1)) | ((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd3;
        end else begin
            out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_keep_V_1_ack_out == 1'b1) & (out_stream_keep_V_1_vld_out == 1'b1))) begin
            out_stream_keep_V_1_sel_rd <= ~out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b0)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd2;
        end else if ((((out_stream_keep_V_1_state == 2'd1) & (out_stream_keep_V_1_ack_out == 1'b0)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)) & ~((out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)) & (out_stream_keep_V_1_state == 2'd3)) | ((out_stream_keep_V_1_state == 2'd1) & (out_stream_keep_V_1_ack_out == 1'b1)) | ((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_out == 1'b1) & (out_stream_last_V_1_vld_out == 1'b1))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)) & ~((out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)) & (out_stream_last_V_1_state == 2'd3)) | ((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b1)) | ((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_strb_V_1_ack_out == 1'b1) & (out_stream_strb_V_1_vld_out == 1'b1))) begin
            out_stream_strb_V_1_sel_rd <= ~out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b0)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd2;
        end else if ((((out_stream_strb_V_1_state == 2'd1) & (out_stream_strb_V_1_ack_out == 1'b0)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)) & ~((out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)) & (out_stream_strb_V_1_state == 2'd3)) | ((out_stream_strb_V_1_state == 2'd1) & (out_stream_strb_V_1_ack_out == 1'b1)) | ((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_user_V_1_ack_out == 1'b1) & (out_stream_user_V_1_vld_out == 1'b1))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)) & ~((out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)) & (out_stream_user_V_1_state == 2'd3)) | ((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b1)) | ((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_A == 1'b1)) begin
        out_stream_data_V_1_payload_A <= out_stream_data_V_tm_fu_92_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_B == 1'b1)) begin
        out_stream_data_V_1_payload_B <= out_stream_data_V_tm_fu_92_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_8_i_reg_102 <= grp_fu_81_p2;
    end
end

always @ (*) begin
    if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_81_ce = 1'b1;
    end else begin
        grp_fu_81_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state1) | ((out_stream_dest_V_1_ack_in == 1'b0) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_87_ce = 1'b0;
    end else begin
        grp_fu_87_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_data_V_1_sel == 1'b1)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((out_stream_dest_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state14 = ((out_stream_data_V_1_ack_in == 1'b0) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0));
end

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TDEST = out_stream_dest_V_1_data_out;

assign out_stream_TID = out_stream_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_dest_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_state_cmp_full & out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_data_V_tm_fu_92_p1 = grp_fu_87_p2;

assign out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state[1'd1];

assign out_stream_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_dest_V_1_data_out = 5'd0;

assign out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd;

assign out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state[1'd0];

assign out_stream_id_V_1_ack_in = out_stream_id_V_1_state[1'd1];

assign out_stream_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_id_V_1_data_out = 5'd0;

assign out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd;

assign out_stream_id_V_1_vld_out = out_stream_id_V_1_state[1'd0];

assign out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state[1'd1];

assign out_stream_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_keep_V_1_data_out = 4'd15;

assign out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd;

assign out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_data_out = 1'd1;

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state[1'd1];

assign out_stream_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_strb_V_1_data_out = 4'd15;

assign out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd;

assign out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state[1'd0];

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_data_out = 4'd0;

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

endmodule //Block_Rbf_kernel_fun
