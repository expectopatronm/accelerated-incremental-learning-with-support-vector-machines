// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="predict,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.684000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=12,HLS_SYN_FF=2393,HLS_SYN_LUT=3376,HLS_VERSION=2018_2}" *)

module predict (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        supp_vec_stream_TDATA,
        supp_vec_stream_TVALID,
        supp_vec_stream_TREADY,
        supp_vec_stream_TKEEP,
        supp_vec_stream_TSTRB,
        supp_vec_stream_TUSER,
        supp_vec_stream_TLAST,
        supp_vec_stream_TID,
        supp_vec_stream_TDEST,
        dual_coef_stream_TDATA,
        dual_coef_stream_TVALID,
        dual_coef_stream_TREADY,
        dual_coef_stream_TKEEP,
        dual_coef_stream_TSTRB,
        dual_coef_stream_TUSER,
        dual_coef_stream_TLAST,
        dual_coef_stream_TID,
        dual_coef_stream_TDEST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [3:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [4:0] in_stream_TDEST;
input  [31:0] supp_vec_stream_TDATA;
input   supp_vec_stream_TVALID;
output   supp_vec_stream_TREADY;
input  [3:0] supp_vec_stream_TKEEP;
input  [3:0] supp_vec_stream_TSTRB;
input  [3:0] supp_vec_stream_TUSER;
input  [0:0] supp_vec_stream_TLAST;
input  [4:0] supp_vec_stream_TID;
input  [4:0] supp_vec_stream_TDEST;
input  [31:0] dual_coef_stream_TDATA;
input   dual_coef_stream_TVALID;
output   dual_coef_stream_TREADY;
input  [3:0] dual_coef_stream_TKEEP;
input  [3:0] dual_coef_stream_TSTRB;
input  [3:0] dual_coef_stream_TUSER;
input  [0:0] dual_coef_stream_TLAST;
input  [4:0] dual_coef_stream_TID;
input  [4:0] dual_coef_stream_TDEST;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [3:0] out_stream_TKEEP;
output  [3:0] out_stream_TSTRB;
output  [3:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [4:0] out_stream_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] in_stream_data_V_0_data_out;
wire    in_stream_data_V_0_vld_in;
wire    in_stream_data_V_0_vld_out;
wire    in_stream_data_V_0_ack_in;
reg    in_stream_data_V_0_ack_out;
reg   [31:0] in_stream_data_V_0_payload_A;
reg   [31:0] in_stream_data_V_0_payload_B;
reg    in_stream_data_V_0_sel_rd;
reg    in_stream_data_V_0_sel_wr;
wire    in_stream_data_V_0_sel;
wire    in_stream_data_V_0_load_A;
wire    in_stream_data_V_0_load_B;
reg   [1:0] in_stream_data_V_0_state;
wire    in_stream_data_V_0_state_cmp_full;
wire    in_stream_dest_V_0_vld_in;
reg    in_stream_dest_V_0_ack_out;
reg   [1:0] in_stream_dest_V_0_state;
reg   [31:0] supp_vec_stream_data_V_0_data_out;
wire    supp_vec_stream_data_V_0_vld_in;
wire    supp_vec_stream_data_V_0_vld_out;
wire    supp_vec_stream_data_V_0_ack_in;
reg    supp_vec_stream_data_V_0_ack_out;
reg   [31:0] supp_vec_stream_data_V_0_payload_A;
reg   [31:0] supp_vec_stream_data_V_0_payload_B;
reg    supp_vec_stream_data_V_0_sel_rd;
reg    supp_vec_stream_data_V_0_sel_wr;
wire    supp_vec_stream_data_V_0_sel;
wire    supp_vec_stream_data_V_0_load_A;
wire    supp_vec_stream_data_V_0_load_B;
reg   [1:0] supp_vec_stream_data_V_0_state;
wire    supp_vec_stream_data_V_0_state_cmp_full;
wire    supp_vec_stream_dest_V_0_vld_in;
reg    supp_vec_stream_dest_V_0_ack_out;
reg   [1:0] supp_vec_stream_dest_V_0_state;
reg   [31:0] dual_coef_stream_data_V_0_data_out;
wire    dual_coef_stream_data_V_0_vld_in;
wire    dual_coef_stream_data_V_0_vld_out;
wire    dual_coef_stream_data_V_0_ack_in;
reg    dual_coef_stream_data_V_0_ack_out;
reg   [31:0] dual_coef_stream_data_V_0_payload_A;
reg   [31:0] dual_coef_stream_data_V_0_payload_B;
reg    dual_coef_stream_data_V_0_sel_rd;
reg    dual_coef_stream_data_V_0_sel_wr;
wire    dual_coef_stream_data_V_0_sel;
wire    dual_coef_stream_data_V_0_load_A;
wire    dual_coef_stream_data_V_0_load_B;
reg   [1:0] dual_coef_stream_data_V_0_state;
wire    dual_coef_stream_data_V_0_state_cmp_full;
wire    dual_coef_stream_dest_V_0_vld_in;
reg    dual_coef_stream_dest_V_0_ack_out;
reg   [1:0] dual_coef_stream_dest_V_0_state;
reg   [31:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [31:0] out_stream_data_V_1_payload_A;
reg   [31:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
wire   [3:0] out_stream_keep_V_1_data_out;
reg    out_stream_keep_V_1_vld_in;
wire    out_stream_keep_V_1_vld_out;
wire    out_stream_keep_V_1_ack_in;
wire    out_stream_keep_V_1_ack_out;
reg    out_stream_keep_V_1_sel_rd;
wire    out_stream_keep_V_1_sel;
reg   [1:0] out_stream_keep_V_1_state;
wire   [3:0] out_stream_strb_V_1_data_out;
reg    out_stream_strb_V_1_vld_in;
wire    out_stream_strb_V_1_vld_out;
wire    out_stream_strb_V_1_ack_in;
wire    out_stream_strb_V_1_ack_out;
reg    out_stream_strb_V_1_sel_rd;
wire    out_stream_strb_V_1_sel;
reg   [1:0] out_stream_strb_V_1_state;
wire   [3:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg    out_stream_user_V_1_sel_rd;
wire    out_stream_user_V_1_sel;
reg   [1:0] out_stream_user_V_1_state;
reg   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg   [0:0] out_stream_last_V_1_payload_A;
reg   [0:0] out_stream_last_V_1_payload_B;
reg    out_stream_last_V_1_sel_rd;
reg    out_stream_last_V_1_sel_wr;
wire    out_stream_last_V_1_sel;
wire    out_stream_last_V_1_load_A;
wire    out_stream_last_V_1_load_B;
reg   [1:0] out_stream_last_V_1_state;
wire    out_stream_last_V_1_state_cmp_full;
wire   [4:0] out_stream_id_V_1_data_out;
reg    out_stream_id_V_1_vld_in;
wire    out_stream_id_V_1_vld_out;
wire    out_stream_id_V_1_ack_in;
wire    out_stream_id_V_1_ack_out;
reg    out_stream_id_V_1_sel_rd;
wire    out_stream_id_V_1_sel;
reg   [1:0] out_stream_id_V_1_state;
wire   [4:0] out_stream_dest_V_1_data_out;
reg    out_stream_dest_V_1_vld_in;
wire    out_stream_dest_V_1_vld_out;
wire    out_stream_dest_V_1_ack_in;
wire    out_stream_dest_V_1_ack_out;
reg    out_stream_dest_V_1_sel_rd;
wire    out_stream_dest_V_1_sel;
reg   [1:0] out_stream_dest_V_1_state;
wire   [31:0] length_x;
wire   [31:0] length_dc;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg    supp_vec_stream_TDATA_blk_n;
wire    ap_CS_fsm_state7;
reg    dual_coef_stream_TDATA_blk_n;
wire    ap_CS_fsm_state9;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state50;
wire   [0:0] exitcond2_fu_734_p2;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_500_p2;
reg   [31:0] reg_511;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state44;
reg   [31:0] length_x_read_reg_751;
wire    ap_CS_fsm_state2;
wire   [31:0] i_1_fu_523_p2;
reg   [31:0] i_1_reg_761;
wire   [9:0] j_1_fu_535_p2;
reg   [9:0] j_1_reg_769;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_3_fu_555_p1;
reg   [13:0] tmp_3_reg_774;
wire    ap_CS_fsm_state5;
wire   [63:0] next_mul_fu_559_p2;
reg   [63:0] next_mul_reg_779;
reg   [31:0] length_dc_read_reg_784;
wire   [31:0] i_2_fu_571_p2;
reg   [31:0] i_2_reg_793;
wire   [31:0] is_idx2_2_fu_577_p2;
reg   [31:0] is_idx2_2_reg_798;
wire   [0:0] tmp_1_fu_565_p2;
wire   [9:0] j_2_fu_589_p2;
reg   [9:0] j_2_reg_806;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_7_fu_595_p2;
reg   [31:0] tmp_7_reg_811;
wire   [0:0] exitcond_fu_583_p2;
wire   [13:0] tmp_5_fu_605_p2;
reg   [13:0] tmp_5_reg_816;
wire   [31:0] indvars_iv_next_fu_610_p2;
wire   [31:0] is_idx3_2_fu_634_p2;
reg   [31:0] is_idx3_2_reg_829;
wire    ap_CS_fsm_state8;
wire   [31:0] i_4_fu_659_p2;
reg   [31:0] i_4_reg_843;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_fu_668_p1;
reg   [31:0] tmp_reg_848;
wire   [0:0] exitcond4_fu_654_p2;
wire   [13:0] tmp_12_fu_672_p1;
reg   [13:0] tmp_12_reg_853;
wire    ap_CS_fsm_state11;
wire   [41:0] next_mul2_fu_676_p2;
reg   [41:0] next_mul2_reg_858;
wire   [31:0] j_4_fu_687_p2;
reg   [31:0] j_4_reg_866;
wire   [0:0] exitcond5_fu_682_p2;
wire   [31:0] dual_coef_buf_q0;
reg   [31:0] dual_coef_buf_load_reg_876;
wire    ap_CS_fsm_state12;
wire   [9:0] i_5_fu_709_p2;
reg   [9:0] i_5_reg_884;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_i_fu_703_p2;
wire   [31:0] supp_vecs_buf_q0;
reg   [31:0] supp_vecs_buf_load_reg_899;
wire    ap_CS_fsm_state14;
wire   [31:0] input_buf_0_q0;
reg   [31:0] input_buf_0_load_reg_904;
wire   [31:0] grp_fu_494_p2;
reg   [31:0] tmp_4_i_reg_909;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_506_p2;
reg   [31:0] tmp_2_i_reg_920;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state49;
wire   [31:0] os_idx_2_fu_739_p2;
reg   [31:0] os_idx_2_reg_933;
reg    ap_block_state50;
reg    ap_block_state50_io;
wire   [0:0] last_assign_fu_745_p2;
reg   [9:0] input_buf_0_address0;
reg    input_buf_0_ce0;
reg    input_buf_0_we0;
wire   [31:0] input_buf_0_d0;
reg   [12:0] supp_vecs_buf_address0;
reg    supp_vecs_buf_ce0;
reg    supp_vecs_buf_we0;
wire   [31:0] supp_vecs_buf_d0;
reg   [3:0] dual_coef_buf_address0;
reg    dual_coef_buf_ce0;
reg    dual_coef_buf_we0;
wire   [31:0] dual_coef_buf_d0;
reg   [31:0] i_reg_313;
wire   [0:0] exitcond1_fu_529_p2;
reg   [9:0] j_reg_324;
wire   [0:0] tmp_8_fu_517_p2;
reg   [31:0] indvars_iv_reg_336;
reg   [31:0] i1_reg_348;
reg   [31:0] is_idx2_reg_359;
reg   [63:0] phi_mul_reg_371;
reg   [31:0] is_idx2_1_reg_382;
reg   [9:0] j2_reg_392;
reg  signed [31:0] is_idx3_reg_403;
reg   [31:0] i4_reg_415;
wire   [0:0] exitcond3_fu_629_p2;
reg   [31:0] result_buf_0_reg_426;
reg  signed [31:0] j5_reg_438;
reg   [41:0] phi_mul1_reg_449;
reg   [31:0] sum_i_reg_460;
reg   [9:0] i_i_reg_472;
reg   [31:0] os_idx_reg_483;
wire   [63:0] tmp_4_fu_550_p1;
wire   [63:0] tmp_13_cast_fu_625_p1;
wire  signed [63:0] tmp_9_fu_640_p1;
wire  signed [63:0] tmp_10_fu_698_p1;
wire   [63:0] tmp_15_cast_fu_729_p1;
wire   [63:0] tmp_3_i_fu_715_p1;
reg   [31:0] result_buf_0_1_fu_156;
reg   [31:0] grp_fu_494_p0;
reg   [31:0] grp_fu_494_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state45;
reg   [31:0] grp_fu_500_p0;
reg   [31:0] grp_fu_500_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state32;
wire   [13:0] tmp_3_cast_fu_601_p1;
wire   [13:0] tmp_3_i_cast_fu_720_p1;
wire   [13:0] tmp_13_fu_724_p2;
reg   [1:0] grp_fu_494_opcode;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 in_stream_data_V_0_sel_rd = 1'b0;
#0 in_stream_data_V_0_sel_wr = 1'b0;
#0 in_stream_data_V_0_state = 2'd0;
#0 in_stream_dest_V_0_state = 2'd0;
#0 supp_vec_stream_data_V_0_sel_rd = 1'b0;
#0 supp_vec_stream_data_V_0_sel_wr = 1'b0;
#0 supp_vec_stream_data_V_0_state = 2'd0;
#0 supp_vec_stream_dest_V_0_state = 2'd0;
#0 dual_coef_stream_data_V_0_sel_rd = 1'b0;
#0 dual_coef_stream_data_V_0_sel_wr = 1'b0;
#0 dual_coef_stream_data_V_0_state = 2'd0;
#0 dual_coef_stream_dest_V_0_state = 2'd0;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_keep_V_1_sel_rd = 1'b0;
#0 out_stream_keep_V_1_state = 2'd0;
#0 out_stream_strb_V_1_sel_rd = 1'b0;
#0 out_stream_strb_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_sel_wr = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 out_stream_id_V_1_sel_rd = 1'b0;
#0 out_stream_id_V_1_state = 2'd0;
#0 out_stream_dest_V_1_sel_rd = 1'b0;
#0 out_stream_dest_V_1_state = 2'd0;
end

predict_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
predict_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .length_x(length_x),
    .length_dc(length_dc)
);

predict_input_buf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
input_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_buf_0_address0),
    .ce0(input_buf_0_ce0),
    .we0(input_buf_0_we0),
    .d0(input_buf_0_d0),
    .q0(input_buf_0_q0)
);

predict_supp_vecsbkb #(
    .DataWidth( 32 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
supp_vecs_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(supp_vecs_buf_address0),
    .ce0(supp_vecs_buf_ce0),
    .we0(supp_vecs_buf_we0),
    .d0(supp_vecs_buf_d0),
    .q0(supp_vecs_buf_q0)
);

predict_dual_coefcud #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dual_coef_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dual_coef_buf_address0),
    .ce0(dual_coef_buf_ce0),
    .we0(dual_coef_buf_we0),
    .d0(dual_coef_buf_d0),
    .q0(dual_coef_buf_q0)
);

predict_faddfsub_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_faddfsub_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_494_p0),
    .din1(grp_fu_494_p1),
    .opcode(grp_fu_494_opcode),
    .ce(1'b1),
    .dout(grp_fu_494_p2)
);

predict_fmul_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_fmul_32nseOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_500_p0),
    .din1(grp_fu_500_p1),
    .ce(1'b1),
    .dout(grp_fu_500_p2)
);

predict_fexp_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predict_fexp_32nsfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(reg_511),
    .ce(1'b1),
    .dout(grp_fu_506_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((dual_coef_stream_data_V_0_ack_out == 1'b1) & (dual_coef_stream_data_V_0_vld_out == 1'b1))) begin
            dual_coef_stream_data_V_0_sel_rd <= ~dual_coef_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((dual_coef_stream_data_V_0_ack_in == 1'b1) & (dual_coef_stream_data_V_0_vld_in == 1'b1))) begin
            dual_coef_stream_data_V_0_sel_wr <= ~dual_coef_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((dual_coef_stream_data_V_0_state == 2'd2) & (dual_coef_stream_data_V_0_vld_in == 1'b0)) | ((dual_coef_stream_data_V_0_state == 2'd3) & (dual_coef_stream_data_V_0_vld_in == 1'b0) & (dual_coef_stream_data_V_0_ack_out == 1'b1)))) begin
            dual_coef_stream_data_V_0_state <= 2'd2;
        end else if ((((dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_state == 2'd1)) | ((dual_coef_stream_data_V_0_state == 2'd3) & (dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_vld_in == 1'b1)))) begin
            dual_coef_stream_data_V_0_state <= 2'd1;
        end else if (((~((dual_coef_stream_data_V_0_vld_in == 1'b0) & (dual_coef_stream_data_V_0_ack_out == 1'b1)) & ~((dual_coef_stream_data_V_0_ack_out == 1'b0) & (dual_coef_stream_data_V_0_vld_in == 1'b1)) & (dual_coef_stream_data_V_0_state == 2'd3)) | ((dual_coef_stream_data_V_0_ack_out == 1'b1) & (dual_coef_stream_data_V_0_state == 2'd1)) | ((dual_coef_stream_data_V_0_state == 2'd2) & (dual_coef_stream_data_V_0_vld_in == 1'b1)))) begin
            dual_coef_stream_data_V_0_state <= 2'd3;
        end else begin
            dual_coef_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dual_coef_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((dual_coef_stream_dest_V_0_state == 2'd2) & (dual_coef_stream_dest_V_0_vld_in == 1'b0)) | ((dual_coef_stream_dest_V_0_state == 2'd3) & (dual_coef_stream_dest_V_0_vld_in == 1'b0) & (dual_coef_stream_dest_V_0_ack_out == 1'b1)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd2;
        end else if ((((dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_state == 2'd1)) | ((dual_coef_stream_dest_V_0_state == 2'd3) & (dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_vld_in == 1'b1)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd1;
        end else if (((~((dual_coef_stream_dest_V_0_vld_in == 1'b0) & (dual_coef_stream_dest_V_0_ack_out == 1'b1)) & ~((dual_coef_stream_dest_V_0_ack_out == 1'b0) & (dual_coef_stream_dest_V_0_vld_in == 1'b1)) & (dual_coef_stream_dest_V_0_state == 2'd3)) | ((dual_coef_stream_dest_V_0_ack_out == 1'b1) & (dual_coef_stream_dest_V_0_state == 2'd1)) | ((dual_coef_stream_dest_V_0_state == 2'd2) & (dual_coef_stream_dest_V_0_vld_in == 1'b1)))) begin
            dual_coef_stream_dest_V_0_state <= 2'd3;
        end else begin
            dual_coef_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_out == 1'b1) & (in_stream_data_V_0_vld_out == 1'b1))) begin
            in_stream_data_V_0_sel_rd <= ~in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_in == 1'b1) & (in_stream_data_V_0_vld_in == 1'b1))) begin
            in_stream_data_V_0_sel_wr <= ~in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd2;
        end else if ((((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd1;
        end else if (((~((in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)) & ~((in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)) & (in_stream_data_V_0_state == 2'd3)) | ((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b1)) | ((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd3;
        end else begin
            in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_dest_V_0_state == 2'd2) & (in_stream_dest_V_0_vld_in == 1'b0)) | ((in_stream_dest_V_0_state == 2'd3) & (in_stream_dest_V_0_vld_in == 1'b0) & (in_stream_dest_V_0_ack_out == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd2;
        end else if ((((in_stream_dest_V_0_ack_out == 1'b0) & (in_stream_dest_V_0_state == 2'd1)) | ((in_stream_dest_V_0_state == 2'd3) & (in_stream_dest_V_0_ack_out == 1'b0) & (in_stream_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream_dest_V_0_vld_in == 1'b0) & (in_stream_dest_V_0_ack_out == 1'b1)) & ~((in_stream_dest_V_0_ack_out == 1'b0) & (in_stream_dest_V_0_vld_in == 1'b1)) & (in_stream_dest_V_0_state == 2'd3)) | ((in_stream_dest_V_0_ack_out == 1'b1) & (in_stream_dest_V_0_state == 2'd1)) | ((in_stream_dest_V_0_state == 2'd2) & (in_stream_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd3;
        end else begin
            in_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_out == 1'b1) & (out_stream_data_V_1_vld_out == 1'b1))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_in == 1'b1) & (out_stream_data_V_1_vld_in == 1'b1))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_state == 2'd1)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)) & ~((out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)) & (out_stream_data_V_1_state == 2'd3)) | ((out_stream_data_V_1_ack_out == 1'b1) & (out_stream_data_V_1_state == 2'd1)) | ((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_dest_V_1_ack_out == 1'b1) & (out_stream_dest_V_1_vld_out == 1'b1))) begin
            out_stream_dest_V_1_sel_rd <= ~out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b0)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd2;
        end else if ((((out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_state == 2'd1)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)) & ~((out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)) & (out_stream_dest_V_1_state == 2'd3)) | ((out_stream_dest_V_1_ack_out == 1'b1) & (out_stream_dest_V_1_state == 2'd1)) | ((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_id_V_1_ack_out == 1'b1) & (out_stream_id_V_1_vld_out == 1'b1))) begin
            out_stream_id_V_1_sel_rd <= ~out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b0)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd2;
        end else if ((((out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_state == 2'd1)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd1;
        end else if (((~((out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)) & ~((out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)) & (out_stream_id_V_1_state == 2'd3)) | ((out_stream_id_V_1_ack_out == 1'b1) & (out_stream_id_V_1_state == 2'd1)) | ((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd3;
        end else begin
            out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_keep_V_1_ack_out == 1'b1) & (out_stream_keep_V_1_vld_out == 1'b1))) begin
            out_stream_keep_V_1_sel_rd <= ~out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b0)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd2;
        end else if ((((out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_state == 2'd1)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)) & ~((out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)) & (out_stream_keep_V_1_state == 2'd3)) | ((out_stream_keep_V_1_ack_out == 1'b1) & (out_stream_keep_V_1_state == 2'd1)) | ((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_out == 1'b1) & (out_stream_last_V_1_vld_out == 1'b1))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_in == 1'b1) & (out_stream_last_V_1_vld_in == 1'b1))) begin
            out_stream_last_V_1_sel_wr <= ~out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_state == 2'd1)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)) & ~((out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)) & (out_stream_last_V_1_state == 2'd3)) | ((out_stream_last_V_1_ack_out == 1'b1) & (out_stream_last_V_1_state == 2'd1)) | ((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_strb_V_1_ack_out == 1'b1) & (out_stream_strb_V_1_vld_out == 1'b1))) begin
            out_stream_strb_V_1_sel_rd <= ~out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b0)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd2;
        end else if ((((out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_state == 2'd1)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)) & ~((out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)) & (out_stream_strb_V_1_state == 2'd3)) | ((out_stream_strb_V_1_ack_out == 1'b1) & (out_stream_strb_V_1_state == 2'd1)) | ((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_user_V_1_ack_out == 1'b1) & (out_stream_user_V_1_vld_out == 1'b1))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_state == 2'd1)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)) & ~((out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)) & (out_stream_user_V_1_state == 2'd3)) | ((out_stream_user_V_1_ack_out == 1'b1) & (out_stream_user_V_1_state == 2'd1)) | ((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((supp_vec_stream_data_V_0_ack_out == 1'b1) & (supp_vec_stream_data_V_0_vld_out == 1'b1))) begin
            supp_vec_stream_data_V_0_sel_rd <= ~supp_vec_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((supp_vec_stream_data_V_0_ack_in == 1'b1) & (supp_vec_stream_data_V_0_vld_in == 1'b1))) begin
            supp_vec_stream_data_V_0_sel_wr <= ~supp_vec_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((supp_vec_stream_data_V_0_state == 2'd2) & (supp_vec_stream_data_V_0_vld_in == 1'b0)) | ((supp_vec_stream_data_V_0_state == 2'd3) & (supp_vec_stream_data_V_0_vld_in == 1'b0) & (supp_vec_stream_data_V_0_ack_out == 1'b1)))) begin
            supp_vec_stream_data_V_0_state <= 2'd2;
        end else if ((((supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_state == 2'd1)) | ((supp_vec_stream_data_V_0_state == 2'd3) & (supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_vld_in == 1'b1)))) begin
            supp_vec_stream_data_V_0_state <= 2'd1;
        end else if (((~((supp_vec_stream_data_V_0_vld_in == 1'b0) & (supp_vec_stream_data_V_0_ack_out == 1'b1)) & ~((supp_vec_stream_data_V_0_ack_out == 1'b0) & (supp_vec_stream_data_V_0_vld_in == 1'b1)) & (supp_vec_stream_data_V_0_state == 2'd3)) | ((supp_vec_stream_data_V_0_ack_out == 1'b1) & (supp_vec_stream_data_V_0_state == 2'd1)) | ((supp_vec_stream_data_V_0_state == 2'd2) & (supp_vec_stream_data_V_0_vld_in == 1'b1)))) begin
            supp_vec_stream_data_V_0_state <= 2'd3;
        end else begin
            supp_vec_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        supp_vec_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((supp_vec_stream_dest_V_0_state == 2'd2) & (supp_vec_stream_dest_V_0_vld_in == 1'b0)) | ((supp_vec_stream_dest_V_0_state == 2'd3) & (supp_vec_stream_dest_V_0_vld_in == 1'b0) & (supp_vec_stream_dest_V_0_ack_out == 1'b1)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd2;
        end else if ((((supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_state == 2'd1)) | ((supp_vec_stream_dest_V_0_state == 2'd3) & (supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_vld_in == 1'b1)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd1;
        end else if (((~((supp_vec_stream_dest_V_0_vld_in == 1'b0) & (supp_vec_stream_dest_V_0_ack_out == 1'b1)) & ~((supp_vec_stream_dest_V_0_ack_out == 1'b0) & (supp_vec_stream_dest_V_0_vld_in == 1'b1)) & (supp_vec_stream_dest_V_0_state == 2'd3)) | ((supp_vec_stream_dest_V_0_ack_out == 1'b1) & (supp_vec_stream_dest_V_0_state == 2'd1)) | ((supp_vec_stream_dest_V_0_state == 2'd2) & (supp_vec_stream_dest_V_0_vld_in == 1'b1)))) begin
            supp_vec_stream_dest_V_0_state <= 2'd3;
        end else begin
            supp_vec_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_348 <= 32'd0;
    end else if (((exitcond_fu_583_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i1_reg_348 <= i_2_reg_793;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i4_reg_415 <= 32'd0;
    end else if (((exitcond5_fu_682_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i4_reg_415 <= i_4_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_i_reg_472 <= i_5_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_i_reg_472 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_313 <= i_1_reg_761;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_313 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_336 <= 32'd784;
    end else if (((exitcond_fu_583_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv_reg_336 <= indvars_iv_next_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        is_idx2_1_reg_382 <= tmp_7_reg_811;
    end else if (((tmp_1_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        is_idx2_1_reg_382 <= is_idx2_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        is_idx2_reg_359 <= 32'd0;
    end else if (((exitcond_fu_583_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        is_idx2_reg_359 <= is_idx2_2_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        is_idx3_reg_403 <= 32'd0;
    end else if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        is_idx3_reg_403 <= is_idx3_2_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        j2_reg_392 <= j_2_reg_806;
    end else if (((tmp_1_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_reg_392 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        j5_reg_438 <= j_4_reg_866;
    end else if (((exitcond4_fu_654_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        j5_reg_438 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_324 <= j_1_reg_769;
    end else if (((tmp_8_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_324 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_654_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        os_idx_reg_483 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (out_stream_data_V_1_ack_in == 1'b1))) begin
        os_idx_reg_483 <= os_idx_2_reg_933;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        phi_mul1_reg_449 <= next_mul2_reg_858;
    end else if (((exitcond4_fu_654_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_mul1_reg_449 <= 42'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_371 <= 64'd0;
    end else if (((exitcond_fu_583_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_371 <= next_mul_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        result_buf_0_reg_426 <= grp_fu_494_p2;
    end else if (((exitcond4_fu_654_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        result_buf_0_reg_426 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        sum_i_reg_460 <= grp_fu_494_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_i_reg_460 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        dual_coef_buf_load_reg_876 <= dual_coef_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((dual_coef_stream_data_V_0_load_A == 1'b1)) begin
        dual_coef_stream_data_V_0_payload_A <= dual_coef_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((dual_coef_stream_data_V_0_load_B == 1'b1)) begin
        dual_coef_stream_data_V_0_payload_B <= dual_coef_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_761 <= i_1_fu_523_p2;
        length_x_read_reg_751 <= length_x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_793 <= i_2_fu_571_p2;
        length_dc_read_reg_784 <= length_dc;
        next_mul_reg_779 <= next_mul_fu_559_p2;
        tmp_3_reg_774 <= tmp_3_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_843 <= i_4_fu_659_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_5_reg_884 <= i_5_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_A == 1'b1)) begin
        in_stream_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_B == 1'b1)) begin
        in_stream_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_buf_0_load_reg_904 <= input_buf_0_q0;
        supp_vecs_buf_load_reg_899 <= supp_vecs_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        is_idx2_2_reg_798 <= is_idx2_2_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        is_idx3_2_reg_829 <= is_idx3_2_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_769 <= j_1_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_806 <= j_2_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_4_reg_866 <= j_4_fu_687_p2;
        next_mul2_reg_858 <= next_mul2_fu_676_p2;
        result_buf_0_1_fu_156 <= result_buf_0_reg_426;
        tmp_12_reg_853 <= tmp_12_fu_672_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state50))) begin
        os_idx_2_reg_933 <= os_idx_2_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_A == 1'b1)) begin
        out_stream_data_V_1_payload_A <= tmp_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_B == 1'b1)) begin
        out_stream_data_V_1_payload_B <= tmp_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_A == 1'b1)) begin
        out_stream_last_V_1_payload_A <= last_assign_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_B == 1'b1)) begin
        out_stream_last_V_1_payload_B <= last_assign_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_511 <= grp_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((supp_vec_stream_data_V_0_load_A == 1'b1)) begin
        supp_vec_stream_data_V_0_payload_A <= supp_vec_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((supp_vec_stream_data_V_0_load_B == 1'b1)) begin
        supp_vec_stream_data_V_0_payload_B <= supp_vec_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_2_i_reg_920 <= grp_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_4_i_reg_909 <= grp_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_583_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_5_reg_816 <= tmp_5_fu_605_p2;
        tmp_7_reg_811 <= tmp_7_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_654_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_reg_848 <= tmp_fu_668_p1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dual_coef_buf_address0 = tmp_10_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dual_coef_buf_address0 = tmp_9_fu_640_p1;
    end else begin
        dual_coef_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        dual_coef_buf_ce0 = 1'b1;
    end else begin
        dual_coef_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        dual_coef_buf_we0 = 1'b1;
    end else begin
        dual_coef_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dual_coef_stream_TDATA_blk_n = dual_coef_stream_data_V_0_state[1'd0];
    end else begin
        dual_coef_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        dual_coef_stream_data_V_0_ack_out = 1'b1;
    end else begin
        dual_coef_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((dual_coef_stream_data_V_0_sel == 1'b1)) begin
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_B;
    end else begin
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        dual_coef_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        dual_coef_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_494_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_494_opcode = 2'd0;
    end else begin
        grp_fu_494_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_494_p0 = result_buf_0_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_494_p0 = sum_i_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_494_p0 = supp_vecs_buf_load_reg_899;
    end else begin
        grp_fu_494_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_494_p1 = reg_511;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_494_p1 = input_buf_0_load_reg_904;
    end else begin
        grp_fu_494_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_500_p0 = dual_coef_buf_load_reg_876;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_500_p0 = tmp_4_i_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_500_p0 = sum_i_reg_460;
    end else begin
        grp_fu_500_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_500_p1 = tmp_2_i_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_500_p1 = tmp_4_i_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_500_p1 = 32'd3175926989;
    end else begin
        grp_fu_500_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_stream_TDATA_blk_n = in_stream_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_data_V_0_sel == 1'b1)) begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B;
    end else begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_buf_0_address0 = tmp_3_i_fu_715_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_0_address0 = tmp_4_fu_550_p1;
    end else begin
        input_buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        input_buf_0_ce0 = 1'b1;
    end else begin
        input_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        input_buf_0_we0 = 1'b1;
    end else begin
        input_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50)))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_data_V_1_sel == 1'b1)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_last_V_1_sel == 1'b1)) begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B;
    end else begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        supp_vec_stream_TDATA_blk_n = supp_vec_stream_data_V_0_state[1'd0];
    end else begin
        supp_vec_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        supp_vec_stream_data_V_0_ack_out = 1'b1;
    end else begin
        supp_vec_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((supp_vec_stream_data_V_0_sel == 1'b1)) begin
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_B;
    end else begin
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        supp_vec_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        supp_vec_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        supp_vecs_buf_address0 = tmp_15_cast_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        supp_vecs_buf_address0 = tmp_13_cast_fu_625_p1;
    end else begin
        supp_vecs_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        supp_vecs_buf_ce0 = 1'b1;
    end else begin
        supp_vecs_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        supp_vecs_buf_we0 = 1'b1;
    end else begin
        supp_vecs_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_8_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_529_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_1_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_583_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((supp_vec_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond3_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((dual_coef_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond4_fu_654_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond5_fu_682_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((tmp_i_fu_703_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state50 : begin
            if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state50_io) | (out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond2_fu_734_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (out_stream_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state50 = ((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state50_io = ((exitcond2_fu_734_p2 == 1'd0) & (out_stream_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dual_coef_buf_d0 = dual_coef_stream_data_V_0_data_out;

assign dual_coef_stream_TREADY = dual_coef_stream_dest_V_0_state[1'd1];

assign dual_coef_stream_data_V_0_ack_in = dual_coef_stream_data_V_0_state[1'd1];

assign dual_coef_stream_data_V_0_load_A = (~dual_coef_stream_data_V_0_sel_wr & dual_coef_stream_data_V_0_state_cmp_full);

assign dual_coef_stream_data_V_0_load_B = (dual_coef_stream_data_V_0_state_cmp_full & dual_coef_stream_data_V_0_sel_wr);

assign dual_coef_stream_data_V_0_sel = dual_coef_stream_data_V_0_sel_rd;

assign dual_coef_stream_data_V_0_state_cmp_full = ((dual_coef_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign dual_coef_stream_data_V_0_vld_in = dual_coef_stream_TVALID;

assign dual_coef_stream_data_V_0_vld_out = dual_coef_stream_data_V_0_state[1'd0];

assign dual_coef_stream_dest_V_0_vld_in = dual_coef_stream_TVALID;

assign exitcond1_fu_529_p2 = ((j_reg_324 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond2_fu_734_p2 = ((os_idx_reg_483 == length_x_read_reg_751) ? 1'b1 : 1'b0);

assign exitcond3_fu_629_p2 = ((is_idx3_reg_403 == length_dc_read_reg_784) ? 1'b1 : 1'b0);

assign exitcond4_fu_654_p2 = ((i4_reg_415 == length_x_read_reg_751) ? 1'b1 : 1'b0);

assign exitcond5_fu_682_p2 = ((j5_reg_438 == length_dc_read_reg_784) ? 1'b1 : 1'b0);

assign exitcond_fu_583_p2 = ((is_idx2_1_reg_382 == indvars_iv_reg_336) ? 1'b1 : 1'b0);

assign i_1_fu_523_p2 = (i_reg_313 + 32'd1);

assign i_2_fu_571_p2 = (32'd1 + i1_reg_348);

assign i_4_fu_659_p2 = (i4_reg_415 + 32'd1);

assign i_5_fu_709_p2 = (i_i_reg_472 + 10'd1);

assign in_stream_TREADY = in_stream_dest_V_0_state[1'd1];

assign in_stream_data_V_0_ack_in = in_stream_data_V_0_state[1'd1];

assign in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full & ~in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_load_B = (in_stream_data_V_0_state_cmp_full & in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd;

assign in_stream_data_V_0_state_cmp_full = ((in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_data_V_0_vld_in = in_stream_TVALID;

assign in_stream_data_V_0_vld_out = in_stream_data_V_0_state[1'd0];

assign in_stream_dest_V_0_vld_in = in_stream_TVALID;

assign indvars_iv_next_fu_610_p2 = (indvars_iv_reg_336 + 32'd784);

assign input_buf_0_d0 = in_stream_data_V_0_data_out;

assign is_idx2_2_fu_577_p2 = (is_idx2_reg_359 + 32'd784);

assign is_idx3_2_fu_634_p2 = ($signed(is_idx3_reg_403) + $signed(32'd1));

assign j_1_fu_535_p2 = (j_reg_324 + 10'd1);

assign j_2_fu_589_p2 = (j2_reg_392 + 10'd1);

assign j_4_fu_687_p2 = ($signed(32'd1) + $signed(j5_reg_438));

assign last_assign_fu_745_p2 = ((os_idx_2_fu_739_p2 == length_x_read_reg_751) ? 1'b1 : 1'b0);

assign next_mul2_fu_676_p2 = (42'd784 + phi_mul1_reg_449);

assign next_mul_fu_559_p2 = (64'd784 + phi_mul_reg_371);

assign os_idx_2_fu_739_p2 = (os_idx_reg_483 + 32'd1);

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TDEST = out_stream_dest_V_1_data_out;

assign out_stream_TID = out_stream_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_dest_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_state_cmp_full & out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state[1'd1];

assign out_stream_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_dest_V_1_data_out = 5'd0;

assign out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd;

assign out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state[1'd0];

assign out_stream_id_V_1_ack_in = out_stream_id_V_1_state[1'd1];

assign out_stream_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_id_V_1_data_out = 5'd0;

assign out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd;

assign out_stream_id_V_1_vld_out = out_stream_id_V_1_state[1'd0];

assign out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state[1'd1];

assign out_stream_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_keep_V_1_data_out = 4'd15;

assign out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd;

assign out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full & ~out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_load_B = (out_stream_last_V_1_state_cmp_full & out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_state_cmp_full = ((out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state[1'd1];

assign out_stream_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_strb_V_1_data_out = 4'd15;

assign out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd;

assign out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state[1'd0];

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_data_out = 4'd0;

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

assign supp_vec_stream_TREADY = supp_vec_stream_dest_V_0_state[1'd1];

assign supp_vec_stream_data_V_0_ack_in = supp_vec_stream_data_V_0_state[1'd1];

assign supp_vec_stream_data_V_0_load_A = (supp_vec_stream_data_V_0_state_cmp_full & ~supp_vec_stream_data_V_0_sel_wr);

assign supp_vec_stream_data_V_0_load_B = (supp_vec_stream_data_V_0_state_cmp_full & supp_vec_stream_data_V_0_sel_wr);

assign supp_vec_stream_data_V_0_sel = supp_vec_stream_data_V_0_sel_rd;

assign supp_vec_stream_data_V_0_state_cmp_full = ((supp_vec_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign supp_vec_stream_data_V_0_vld_in = supp_vec_stream_TVALID;

assign supp_vec_stream_data_V_0_vld_out = supp_vec_stream_data_V_0_state[1'd0];

assign supp_vec_stream_dest_V_0_vld_in = supp_vec_stream_TVALID;

assign supp_vecs_buf_d0 = supp_vec_stream_data_V_0_data_out;

assign tmp_10_fu_698_p1 = j5_reg_438;

assign tmp_12_fu_672_p1 = phi_mul1_reg_449[13:0];

assign tmp_13_cast_fu_625_p1 = tmp_5_reg_816;

assign tmp_13_fu_724_p2 = (tmp_12_reg_853 + tmp_3_i_cast_fu_720_p1);

assign tmp_15_cast_fu_729_p1 = tmp_13_fu_724_p2;

assign tmp_1_fu_565_p2 = ((i1_reg_348 < length_dc) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_601_p1 = j2_reg_392;

assign tmp_3_fu_555_p1 = phi_mul_reg_371[13:0];

assign tmp_3_i_cast_fu_720_p1 = i_i_reg_472;

assign tmp_3_i_fu_715_p1 = i_i_reg_472;

assign tmp_4_fu_550_p1 = j_reg_324;

assign tmp_5_fu_605_p2 = (tmp_3_reg_774 + tmp_3_cast_fu_601_p1);

assign tmp_7_fu_595_p2 = (is_idx2_1_reg_382 + 32'd1);

assign tmp_8_fu_517_p2 = ((i_reg_313 < length_x) ? 1'b1 : 1'b0);

assign tmp_9_fu_640_p1 = is_idx3_reg_403;

assign tmp_fu_668_p1 = result_buf_0_1_fu_156;

assign tmp_i_fu_703_p2 = ((i_i_reg_472 == 10'd784) ? 1'b1 : 1'b0);

endmodule //predict
