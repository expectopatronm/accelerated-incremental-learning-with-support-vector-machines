-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predict is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    supp_vec_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    supp_vec_stream_TVALID : IN STD_LOGIC;
    supp_vec_stream_TREADY : OUT STD_LOGIC;
    supp_vec_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    supp_vec_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    supp_vec_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    supp_vec_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    dual_coef_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    dual_coef_stream_TVALID : IN STD_LOGIC;
    dual_coef_stream_TREADY : OUT STD_LOGIC;
    dual_coef_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    dual_coef_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dual_coef_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    dual_coef_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of predict is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "predict,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.684000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=12,HLS_SYN_FF=2393,HLS_SYN_LUT=3376,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_310 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv64_310 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100010000";
    constant ap_const_lv42_310 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001100010000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel : STD_LOGIC;
    signal in_stream_data_V_0_load_A : STD_LOGIC;
    signal in_stream_data_V_0_load_B : STD_LOGIC;
    signal in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal supp_vec_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_vld_in : STD_LOGIC;
    signal supp_vec_stream_data_V_0_vld_out : STD_LOGIC;
    signal supp_vec_stream_data_V_0_ack_in : STD_LOGIC;
    signal supp_vec_stream_data_V_0_ack_out : STD_LOGIC;
    signal supp_vec_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vec_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal supp_vec_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal supp_vec_stream_data_V_0_sel : STD_LOGIC;
    signal supp_vec_stream_data_V_0_load_A : STD_LOGIC;
    signal supp_vec_stream_data_V_0_load_B : STD_LOGIC;
    signal supp_vec_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal supp_vec_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_vld_in : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_ack_out : STD_LOGIC;
    signal supp_vec_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dual_coef_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_vld_in : STD_LOGIC;
    signal dual_coef_stream_data_V_0_vld_out : STD_LOGIC;
    signal dual_coef_stream_data_V_0_ack_in : STD_LOGIC;
    signal dual_coef_stream_data_V_0_ack_out : STD_LOGIC;
    signal dual_coef_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal dual_coef_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal dual_coef_stream_data_V_0_sel : STD_LOGIC;
    signal dual_coef_stream_data_V_0_load_A : STD_LOGIC;
    signal dual_coef_stream_data_V_0_load_B : STD_LOGIC;
    signal dual_coef_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dual_coef_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_vld_in : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_ack_out : STD_LOGIC;
    signal dual_coef_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_keep_V_1_sel : STD_LOGIC;
    signal out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_strb_V_1_sel : STD_LOGIC;
    signal out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_load_A : STD_LOGIC;
    signal out_stream_last_V_1_load_B : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_id_V_1_sel : STD_LOGIC;
    signal out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_dest_V_1_sel : STD_LOGIC;
    signal out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal length_x : STD_LOGIC_VECTOR (31 downto 0);
    signal length_dc : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal supp_vec_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal dual_coef_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal exitcond2_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal length_x_read_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_535_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_769 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_555_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_reg_774 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul_fu_559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_779 : STD_LOGIC_VECTOR (63 downto 0);
    signal length_dc_read_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_idx2_2_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_idx2_2_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_589_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_806 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_7_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_605_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_reg_816 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_idx3_2_fu_634_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_idx3_2_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_4_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_672_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_853 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal next_mul2_fu_676_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul2_reg_858 : STD_LOGIC_VECTOR (41 downto 0);
    signal j_4_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dual_coef_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_buf_load_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_5_fu_709_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_884 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_i_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal supp_vecs_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vecs_buf_load_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal input_buf_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_0_load_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal os_idx_2_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal os_idx_2_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state50 : BOOLEAN;
    signal ap_block_state50_io : BOOLEAN;
    signal last_assign_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_buf_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_buf_0_ce0 : STD_LOGIC;
    signal input_buf_0_we0 : STD_LOGIC;
    signal input_buf_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal supp_vecs_buf_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal supp_vecs_buf_ce0 : STD_LOGIC;
    signal supp_vecs_buf_we0 : STD_LOGIC;
    signal supp_vecs_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dual_coef_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dual_coef_buf_ce0 : STD_LOGIC;
    signal dual_coef_buf_we0 : STD_LOGIC;
    signal dual_coef_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_324 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal is_idx2_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal is_idx2_1_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_reg_392 : STD_LOGIC_VECTOR (9 downto 0);
    signal is_idx3_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_buf_0_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_449 : STD_LOGIC_VECTOR (41 downto 0);
    signal sum_i_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_472 : STD_LOGIC_VECTOR (9 downto 0);
    signal os_idx_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_buf_0_1_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_500_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_3_cast_fu_601_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_i_cast_fu_720_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_724_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_494_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);

    component predict_faddfsub_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_fmul_32nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_fexp_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_input_buf_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_supp_vecsbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_dual_coefcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predict_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        length_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_dc : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    predict_CONTROL_BUS_s_axi_U : component predict_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        length_x => length_x,
        length_dc => length_dc);

    input_buf_0_U : component predict_input_buf_0
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_buf_0_address0,
        ce0 => input_buf_0_ce0,
        we0 => input_buf_0_we0,
        d0 => input_buf_0_d0,
        q0 => input_buf_0_q0);

    supp_vecs_buf_U : component predict_supp_vecsbkb
    generic map (
        DataWidth => 32,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => supp_vecs_buf_address0,
        ce0 => supp_vecs_buf_ce0,
        we0 => supp_vecs_buf_we0,
        d0 => supp_vecs_buf_d0,
        q0 => supp_vecs_buf_q0);

    dual_coef_buf_U : component predict_dual_coefcud
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dual_coef_buf_address0,
        ce0 => dual_coef_buf_ce0,
        we0 => dual_coef_buf_we0,
        d0 => dual_coef_buf_d0,
        q0 => dual_coef_buf_q0);

    predict_faddfsub_dEe_U1 : component predict_faddfsub_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_494_p0,
        din1 => grp_fu_494_p1,
        opcode => grp_fu_494_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_494_p2);

    predict_fmul_32nseOg_U2 : component predict_fmul_32nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_500_p0,
        din1 => grp_fu_500_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_500_p2);

    predict_fexp_32nsfYi_U3 : component predict_fexp_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => reg_511,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((dual_coef_stream_data_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        dual_coef_stream_data_V_0_sel_rd <= not(dual_coef_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((dual_coef_stream_data_V_0_ack_in = ap_const_logic_1) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        dual_coef_stream_data_V_0_sel_wr <= not(dual_coef_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((dual_coef_stream_data_V_0_state = ap_const_lv2_2) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_0)) or ((dual_coef_stream_data_V_0_state = ap_const_lv2_3) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_data_V_0_ack_out = ap_const_logic_1)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_data_V_0_state = ap_const_lv2_3) and (dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((dual_coef_stream_data_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((dual_coef_stream_data_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1))) and (dual_coef_stream_data_V_0_state = ap_const_lv2_3)) or ((dual_coef_stream_data_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_data_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_data_V_0_state = ap_const_lv2_2) and (dual_coef_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    dual_coef_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dual_coef_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dual_coef_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((dual_coef_stream_dest_V_0_state = ap_const_lv2_2) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0)) or ((dual_coef_stream_dest_V_0_state = ap_const_lv2_3) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_dest_V_0_state = ap_const_lv2_3) and (dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((dual_coef_stream_dest_V_0_vld_in = ap_const_logic_0) and (dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1))) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_3)) or ((dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1) and (dual_coef_stream_dest_V_0_state = ap_const_lv2_1)) or ((dual_coef_stream_dest_V_0_state = ap_const_lv2_2) and (dual_coef_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    dual_coef_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_out = ap_const_logic_1) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_rd <= not(in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_in = ap_const_logic_1) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_wr <= not(in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_dest_V_0_state = ap_const_lv2_2) and (in_stream_dest_V_0_vld_in = ap_const_logic_0)) or ((in_stream_dest_V_0_state = ap_const_lv2_3) and (in_stream_dest_V_0_vld_in = ap_const_logic_0) and (in_stream_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_dest_V_0_ack_out = ap_const_logic_0) and (in_stream_dest_V_0_state = ap_const_lv2_1)) or ((in_stream_dest_V_0_state = ap_const_lv2_3) and (in_stream_dest_V_0_ack_out = ap_const_logic_0) and (in_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_dest_V_0_vld_in = ap_const_logic_0) and (in_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_dest_V_0_ack_out = ap_const_logic_0) and (in_stream_dest_V_0_vld_in = ap_const_logic_1))) and (in_stream_dest_V_0_state = ap_const_lv2_3)) or ((in_stream_dest_V_0_ack_out = ap_const_logic_1) and (in_stream_dest_V_0_state = ap_const_lv2_1)) or ((in_stream_dest_V_0_state = ap_const_lv2_2) and (in_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_out = ap_const_logic_1) and (out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_state = ap_const_lv2_1)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_data_V_1_state = ap_const_lv2_3)) or ((out_stream_data_V_1_ack_out = ap_const_logic_1) and (out_stream_data_V_1_state = ap_const_lv2_1)) or ((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_dest_V_1_sel_rd <= not(out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_state = ap_const_lv2_1)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_dest_V_1_state = ap_const_lv2_1)) or ((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_id_V_1_ack_out = ap_const_logic_1) and (out_stream_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_id_V_1_sel_rd <= not(out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_state = ap_const_lv2_1)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_id_V_1_state = ap_const_lv2_3)) or ((out_stream_id_V_1_ack_out = ap_const_logic_1) and (out_stream_id_V_1_state = ap_const_lv2_1)) or ((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_keep_V_1_sel_rd <= not(out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_state = ap_const_lv2_1)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_keep_V_1_state = ap_const_lv2_1)) or ((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_out = ap_const_logic_1) and (out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_in = ap_const_logic_1) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_wr <= not(out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_state = ap_const_lv2_1)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_last_V_1_state = ap_const_lv2_3)) or ((out_stream_last_V_1_ack_out = ap_const_logic_1) and (out_stream_last_V_1_state = ap_const_lv2_1)) or ((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_strb_V_1_sel_rd <= not(out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_state = ap_const_lv2_1)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_strb_V_1_state = ap_const_lv2_1)) or ((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_user_V_1_ack_out = ap_const_logic_1) and (out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_state = ap_const_lv2_1)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_user_V_1_state = ap_const_lv2_3)) or ((out_stream_user_V_1_ack_out = ap_const_logic_1) and (out_stream_user_V_1_state = ap_const_lv2_1)) or ((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((supp_vec_stream_data_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        supp_vec_stream_data_V_0_sel_rd <= not(supp_vec_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((supp_vec_stream_data_V_0_ack_in = ap_const_logic_1) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        supp_vec_stream_data_V_0_sel_wr <= not(supp_vec_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((supp_vec_stream_data_V_0_state = ap_const_lv2_2) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_0)) or ((supp_vec_stream_data_V_0_state = ap_const_lv2_3) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_data_V_0_ack_out = ap_const_logic_1)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_data_V_0_state = ap_const_lv2_3) and (supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((supp_vec_stream_data_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((supp_vec_stream_data_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1))) and (supp_vec_stream_data_V_0_state = ap_const_lv2_3)) or ((supp_vec_stream_data_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_data_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_data_V_0_state = ap_const_lv2_2) and (supp_vec_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    supp_vec_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    supp_vec_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                supp_vec_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((supp_vec_stream_dest_V_0_state = ap_const_lv2_2) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0)) or ((supp_vec_stream_dest_V_0_state = ap_const_lv2_3) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_dest_V_0_state = ap_const_lv2_3) and (supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((supp_vec_stream_dest_V_0_vld_in = ap_const_logic_0) and (supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1))) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_3)) or ((supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1) and (supp_vec_stream_dest_V_0_state = ap_const_lv2_1)) or ((supp_vec_stream_dest_V_0_state = ap_const_lv2_2) and (supp_vec_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    supp_vec_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_348 <= ap_const_lv32_0;
            elsif (((exitcond_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i1_reg_348 <= i_2_reg_793;
            end if; 
        end if;
    end process;

    i4_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i4_reg_415 <= ap_const_lv32_0;
            elsif (((exitcond5_fu_682_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i4_reg_415 <= i_4_reg_843;
            end if; 
        end if;
    end process;

    i_i_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_i_reg_472 <= i_5_reg_884;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_reg_472 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_313 <= i_1_reg_761;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_313 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_336 <= ap_const_lv32_310;
            elsif (((exitcond_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvars_iv_reg_336 <= indvars_iv_next_fu_610_p2;
            end if; 
        end if;
    end process;

    is_idx2_1_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                is_idx2_1_reg_382 <= tmp_7_reg_811;
            elsif (((tmp_1_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                is_idx2_1_reg_382 <= is_idx2_reg_359;
            end if; 
        end if;
    end process;

    is_idx2_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                is_idx2_reg_359 <= ap_const_lv32_0;
            elsif (((exitcond_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                is_idx2_reg_359 <= is_idx2_2_reg_798;
            end if; 
        end if;
    end process;

    is_idx3_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                is_idx3_reg_403 <= ap_const_lv32_0;
            elsif (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                is_idx3_reg_403 <= is_idx3_2_reg_829;
            end if; 
        end if;
    end process;

    j2_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j2_reg_392 <= j_2_reg_806;
            elsif (((tmp_1_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_reg_392 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j5_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                j5_reg_438 <= j_4_reg_866;
            elsif (((exitcond4_fu_654_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j5_reg_438 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_324 <= j_1_reg_769;
            elsif (((tmp_8_fu_517_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_324 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    os_idx_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                os_idx_reg_483 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then 
                os_idx_reg_483 <= os_idx_2_reg_933;
            end if; 
        end if;
    end process;

    phi_mul1_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                phi_mul1_reg_449 <= next_mul2_reg_858;
            elsif (((exitcond4_fu_654_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul1_reg_449 <= ap_const_lv42_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_371 <= ap_const_lv64_0;
            elsif (((exitcond_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_371 <= next_mul_reg_779;
            end if; 
        end if;
    end process;

    result_buf_0_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                result_buf_0_reg_426 <= grp_fu_494_p2;
            elsif (((exitcond4_fu_654_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                result_buf_0_reg_426 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                sum_i_reg_460 <= grp_fu_494_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_i_reg_460 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                dual_coef_buf_load_reg_876 <= dual_coef_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dual_coef_stream_data_V_0_load_A = ap_const_logic_1)) then
                dual_coef_stream_data_V_0_payload_A <= dual_coef_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dual_coef_stream_data_V_0_load_B = ap_const_logic_1)) then
                dual_coef_stream_data_V_0_payload_B <= dual_coef_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_761 <= i_1_fu_523_p2;
                length_x_read_reg_751 <= length_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_793 <= i_2_fu_571_p2;
                length_dc_read_reg_784 <= length_dc;
                next_mul_reg_779 <= next_mul_fu_559_p2;
                tmp_3_reg_774 <= tmp_3_fu_555_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_843 <= i_4_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_5_reg_884 <= i_5_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_A = ap_const_logic_1)) then
                in_stream_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_B = ap_const_logic_1)) then
                in_stream_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                input_buf_0_load_reg_904 <= input_buf_0_q0;
                supp_vecs_buf_load_reg_899 <= supp_vecs_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_565_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                is_idx2_2_reg_798 <= is_idx2_2_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                is_idx3_2_reg_829 <= is_idx3_2_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_769 <= j_1_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_806 <= j_2_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_4_reg_866 <= j_4_fu_687_p2;
                next_mul2_reg_858 <= next_mul2_fu_676_p2;
                result_buf_0_1_fu_156 <= result_buf_0_reg_426;
                tmp_12_reg_853 <= tmp_12_fu_672_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                os_idx_2_reg_933 <= os_idx_2_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_data_V_1_payload_A <= tmp_reg_848;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_data_V_1_payload_B <= tmp_reg_848;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_last_V_1_payload_A <= last_assign_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_last_V_1_payload_B <= last_assign_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_511 <= grp_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((supp_vec_stream_data_V_0_load_A = ap_const_logic_1)) then
                supp_vec_stream_data_V_0_payload_A <= supp_vec_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((supp_vec_stream_data_V_0_load_B = ap_const_logic_1)) then
                supp_vec_stream_data_V_0_payload_B <= supp_vec_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                tmp_2_i_reg_920 <= grp_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_4_i_reg_909 <= grp_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_5_reg_816 <= tmp_5_fu_605_p2;
                tmp_7_reg_811 <= tmp_7_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_reg_848 <= tmp_fu_668_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_stream_data_V_0_vld_out, supp_vec_stream_data_V_0_vld_out, dual_coef_stream_data_V_0_vld_out, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_CS_fsm_state51, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_1_fu_565_p2, ap_CS_fsm_state6, exitcond_fu_583_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond4_fu_654_p2, ap_CS_fsm_state11, exitcond5_fu_682_p2, ap_CS_fsm_state13, tmp_i_fu_703_p2, ap_block_state50_io, exitcond1_fu_529_p2, tmp_8_fu_517_p2, exitcond3_fu_629_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_8_fu_517_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_529_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_1_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond3_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond4_fu_654_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond5_fu_682_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((tmp_i_fu_703_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state50 => 
                if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (out_stream_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state50_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in)
    begin
                ap_block_state50 <= ((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state50_io_assign_proc : process(out_stream_data_V_1_ack_in, exitcond2_fu_734_p2)
    begin
                ap_block_state50_io <= ((exitcond2_fu_734_p2 = ap_const_lv1_0) and (out_stream_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dual_coef_buf_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, tmp_9_fu_640_p1, tmp_10_fu_698_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dual_coef_buf_address0 <= tmp_10_fu_698_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dual_coef_buf_address0 <= tmp_9_fu_640_p1(4 - 1 downto 0);
        else 
            dual_coef_buf_address0 <= "XXXX";
        end if; 
    end process;


    dual_coef_buf_ce0_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            dual_coef_buf_ce0 <= ap_const_logic_1;
        else 
            dual_coef_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dual_coef_buf_d0 <= dual_coef_stream_data_V_0_data_out;

    dual_coef_buf_we0_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dual_coef_buf_we0 <= ap_const_logic_1;
        else 
            dual_coef_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dual_coef_stream_TDATA_blk_n_assign_proc : process(dual_coef_stream_data_V_0_state, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dual_coef_stream_TDATA_blk_n <= dual_coef_stream_data_V_0_state(0);
        else 
            dual_coef_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dual_coef_stream_TREADY <= dual_coef_stream_dest_V_0_state(1);
    dual_coef_stream_data_V_0_ack_in <= dual_coef_stream_data_V_0_state(1);

    dual_coef_stream_data_V_0_ack_out_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dual_coef_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            dual_coef_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    dual_coef_stream_data_V_0_data_out_assign_proc : process(dual_coef_stream_data_V_0_payload_A, dual_coef_stream_data_V_0_payload_B, dual_coef_stream_data_V_0_sel)
    begin
        if ((dual_coef_stream_data_V_0_sel = ap_const_logic_1)) then 
            dual_coef_stream_data_V_0_data_out <= dual_coef_stream_data_V_0_payload_B;
        else 
            dual_coef_stream_data_V_0_data_out <= dual_coef_stream_data_V_0_payload_A;
        end if; 
    end process;

    dual_coef_stream_data_V_0_load_A <= (not(dual_coef_stream_data_V_0_sel_wr) and dual_coef_stream_data_V_0_state_cmp_full);
    dual_coef_stream_data_V_0_load_B <= (dual_coef_stream_data_V_0_state_cmp_full and dual_coef_stream_data_V_0_sel_wr);
    dual_coef_stream_data_V_0_sel <= dual_coef_stream_data_V_0_sel_rd;
    dual_coef_stream_data_V_0_state_cmp_full <= '0' when (dual_coef_stream_data_V_0_state = ap_const_lv2_1) else '1';
    dual_coef_stream_data_V_0_vld_in <= dual_coef_stream_TVALID;
    dual_coef_stream_data_V_0_vld_out <= dual_coef_stream_data_V_0_state(0);

    dual_coef_stream_dest_V_0_ack_out_assign_proc : process(dual_coef_stream_data_V_0_vld_out, ap_CS_fsm_state9)
    begin
        if (((dual_coef_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            dual_coef_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            dual_coef_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    dual_coef_stream_dest_V_0_vld_in <= dual_coef_stream_TVALID;
    exitcond1_fu_529_p2 <= "1" when (j_reg_324 = ap_const_lv10_310) else "0";
    exitcond2_fu_734_p2 <= "1" when (os_idx_reg_483 = length_x_read_reg_751) else "0";
    exitcond3_fu_629_p2 <= "1" when (is_idx3_reg_403 = length_dc_read_reg_784) else "0";
    exitcond4_fu_654_p2 <= "1" when (i4_reg_415 = length_x_read_reg_751) else "0";
    exitcond5_fu_682_p2 <= "1" when (j5_reg_438 = length_dc_read_reg_784) else "0";
    exitcond_fu_583_p2 <= "1" when (is_idx2_1_reg_382 = indvars_iv_reg_336) else "0";

    grp_fu_494_opcode_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_494_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_494_opcode <= ap_const_lv2_0;
        else 
            grp_fu_494_opcode <= "XX";
        end if; 
    end process;


    grp_fu_494_p0_assign_proc : process(supp_vecs_buf_load_reg_899, result_buf_0_reg_426, sum_i_reg_460, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_494_p0 <= result_buf_0_reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_494_p0 <= sum_i_reg_460;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_494_p0 <= supp_vecs_buf_load_reg_899;
        else 
            grp_fu_494_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_494_p1_assign_proc : process(reg_511, input_buf_0_load_reg_904, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_494_p1 <= reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_494_p1 <= input_buf_0_load_reg_904;
        else 
            grp_fu_494_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_500_p0_assign_proc : process(dual_coef_buf_load_reg_876, ap_CS_fsm_state13, tmp_4_i_reg_909, sum_i_reg_460, ap_CS_fsm_state20, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_500_p0 <= dual_coef_buf_load_reg_876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_500_p0 <= tmp_4_i_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_500_p0 <= sum_i_reg_460;
        else 
            grp_fu_500_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_500_p1_assign_proc : process(ap_CS_fsm_state13, tmp_4_i_reg_909, tmp_2_i_reg_920, ap_CS_fsm_state20, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_500_p1 <= tmp_2_i_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_500_p1 <= tmp_4_i_reg_909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_500_p1 <= ap_const_lv32_BD4CCCCD;
        else 
            grp_fu_500_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_523_p2 <= std_logic_vector(unsigned(i_reg_313) + unsigned(ap_const_lv32_1));
    i_2_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i1_reg_348));
    i_4_fu_659_p2 <= std_logic_vector(unsigned(i4_reg_415) + unsigned(ap_const_lv32_1));
    i_5_fu_709_p2 <= std_logic_vector(unsigned(i_i_reg_472) + unsigned(ap_const_lv10_1));

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_data_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_stream_TDATA_blk_n <= in_stream_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_dest_V_0_state(1);
    in_stream_data_V_0_ack_in <= in_stream_data_V_0_state(1);

    in_stream_data_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_V_0_data_out_assign_proc : process(in_stream_data_V_0_payload_A, in_stream_data_V_0_payload_B, in_stream_data_V_0_sel)
    begin
        if ((in_stream_data_V_0_sel = ap_const_logic_1)) then 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_B;
        else 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_data_V_0_load_A <= (in_stream_data_V_0_state_cmp_full and not(in_stream_data_V_0_sel_wr));
    in_stream_data_V_0_load_B <= (in_stream_data_V_0_state_cmp_full and in_stream_data_V_0_sel_wr);
    in_stream_data_V_0_sel <= in_stream_data_V_0_sel_rd;
    in_stream_data_V_0_state_cmp_full <= '0' when (in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_data_V_0_vld_in <= in_stream_TVALID;
    in_stream_data_V_0_vld_out <= in_stream_data_V_0_state(0);

    in_stream_dest_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_dest_V_0_vld_in <= in_stream_TVALID;
    indvars_iv_next_fu_610_p2 <= std_logic_vector(unsigned(indvars_iv_reg_336) + unsigned(ap_const_lv32_310));

    input_buf_0_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, tmp_4_fu_550_p1, tmp_3_i_fu_715_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_buf_0_address0 <= tmp_3_i_fu_715_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_0_address0 <= tmp_4_fu_550_p1(10 - 1 downto 0);
        else 
            input_buf_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_buf_0_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            input_buf_0_ce0 <= ap_const_logic_1;
        else 
            input_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_d0 <= in_stream_data_V_0_data_out;

    input_buf_0_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_buf_0_we0 <= ap_const_logic_1;
        else 
            input_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    is_idx2_2_fu_577_p2 <= std_logic_vector(unsigned(is_idx2_reg_359) + unsigned(ap_const_lv32_310));
    is_idx3_2_fu_634_p2 <= std_logic_vector(signed(is_idx3_reg_403) + signed(ap_const_lv32_1));
    j_1_fu_535_p2 <= std_logic_vector(unsigned(j_reg_324) + unsigned(ap_const_lv10_1));
    j_2_fu_589_p2 <= std_logic_vector(unsigned(j2_reg_392) + unsigned(ap_const_lv10_1));
    j_4_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j5_reg_438));
    last_assign_fu_745_p2 <= "1" when (os_idx_2_fu_739_p2 = length_x_read_reg_751) else "0";
    next_mul2_fu_676_p2 <= std_logic_vector(unsigned(ap_const_lv42_310) + unsigned(phi_mul1_reg_449));
    next_mul_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv64_310) + unsigned(phi_mul_reg_371));
    os_idx_2_fu_739_p2 <= std_logic_vector(unsigned(os_idx_reg_483) + unsigned(ap_const_lv32_1));
    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_dest_V_1_data_out;
    out_stream_TID <= out_stream_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_dest_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((out_stream_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_state_cmp_full and out_stream_data_V_1_sel_wr);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_dest_V_1_ack_in <= out_stream_dest_V_1_state(1);
    out_stream_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    out_stream_dest_V_1_sel <= out_stream_dest_V_1_sel_rd;

    out_stream_dest_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_1_vld_out <= out_stream_dest_V_1_state(0);
    out_stream_id_V_1_ack_in <= out_stream_id_V_1_state(1);
    out_stream_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_id_V_1_sel <= out_stream_id_V_1_sel_rd;

    out_stream_id_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_1_vld_out <= out_stream_id_V_1_state(0);
    out_stream_keep_V_1_ack_in <= out_stream_keep_V_1_state(1);
    out_stream_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_keep_V_1_data_out <= ap_const_lv4_F;
    out_stream_keep_V_1_sel <= out_stream_keep_V_1_sel_rd;

    out_stream_keep_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_1_vld_out <= out_stream_keep_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_last_V_1_data_out_assign_proc : process(out_stream_last_V_1_payload_A, out_stream_last_V_1_payload_B, out_stream_last_V_1_sel)
    begin
        if ((out_stream_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_B;
        else 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_last_V_1_load_A <= (out_stream_last_V_1_state_cmp_full and not(out_stream_last_V_1_sel_wr));
    out_stream_last_V_1_load_B <= (out_stream_last_V_1_state_cmp_full and out_stream_last_V_1_sel_wr);
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;
    out_stream_last_V_1_state_cmp_full <= '0' when (out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_last_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_strb_V_1_ack_in <= out_stream_strb_V_1_state(1);
    out_stream_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_strb_V_1_data_out <= ap_const_lv4_F;
    out_stream_strb_V_1_sel <= out_stream_strb_V_1_sel_rd;

    out_stream_strb_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_1_vld_out <= out_stream_strb_V_1_state(0);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_user_V_1_data_out <= ap_const_lv4_0;
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;

    out_stream_user_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state50, exitcond2_fu_734_p2, ap_block_state50_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state50_io) or (out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond2_fu_734_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);

    supp_vec_stream_TDATA_blk_n_assign_proc : process(supp_vec_stream_data_V_0_state, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            supp_vec_stream_TDATA_blk_n <= supp_vec_stream_data_V_0_state(0);
        else 
            supp_vec_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    supp_vec_stream_TREADY <= supp_vec_stream_dest_V_0_state(1);
    supp_vec_stream_data_V_0_ack_in <= supp_vec_stream_data_V_0_state(1);

    supp_vec_stream_data_V_0_ack_out_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            supp_vec_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            supp_vec_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    supp_vec_stream_data_V_0_data_out_assign_proc : process(supp_vec_stream_data_V_0_payload_A, supp_vec_stream_data_V_0_payload_B, supp_vec_stream_data_V_0_sel)
    begin
        if ((supp_vec_stream_data_V_0_sel = ap_const_logic_1)) then 
            supp_vec_stream_data_V_0_data_out <= supp_vec_stream_data_V_0_payload_B;
        else 
            supp_vec_stream_data_V_0_data_out <= supp_vec_stream_data_V_0_payload_A;
        end if; 
    end process;

    supp_vec_stream_data_V_0_load_A <= (supp_vec_stream_data_V_0_state_cmp_full and not(supp_vec_stream_data_V_0_sel_wr));
    supp_vec_stream_data_V_0_load_B <= (supp_vec_stream_data_V_0_state_cmp_full and supp_vec_stream_data_V_0_sel_wr);
    supp_vec_stream_data_V_0_sel <= supp_vec_stream_data_V_0_sel_rd;
    supp_vec_stream_data_V_0_state_cmp_full <= '0' when (supp_vec_stream_data_V_0_state = ap_const_lv2_1) else '1';
    supp_vec_stream_data_V_0_vld_in <= supp_vec_stream_TVALID;
    supp_vec_stream_data_V_0_vld_out <= supp_vec_stream_data_V_0_state(0);

    supp_vec_stream_dest_V_0_ack_out_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            supp_vec_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            supp_vec_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    supp_vec_stream_dest_V_0_vld_in <= supp_vec_stream_TVALID;

    supp_vecs_buf_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state13, tmp_13_cast_fu_625_p1, tmp_15_cast_fu_729_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            supp_vecs_buf_address0 <= tmp_15_cast_fu_729_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            supp_vecs_buf_address0 <= tmp_13_cast_fu_625_p1(13 - 1 downto 0);
        else 
            supp_vecs_buf_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    supp_vecs_buf_ce0_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state7, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            supp_vecs_buf_ce0 <= ap_const_logic_1;
        else 
            supp_vecs_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    supp_vecs_buf_d0 <= supp_vec_stream_data_V_0_data_out;

    supp_vecs_buf_we0_assign_proc : process(supp_vec_stream_data_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((supp_vec_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            supp_vecs_buf_we0 <= ap_const_logic_1;
        else 
            supp_vecs_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j5_reg_438),64));

    tmp_12_fu_672_p1 <= phi_mul1_reg_449(14 - 1 downto 0);
    tmp_13_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_816),64));
    tmp_13_fu_724_p2 <= std_logic_vector(unsigned(tmp_12_reg_853) + unsigned(tmp_3_i_cast_fu_720_p1));
    tmp_15_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_724_p2),64));
    tmp_1_fu_565_p2 <= "1" when (unsigned(i1_reg_348) < unsigned(length_dc)) else "0";
    tmp_3_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_392),14));
    tmp_3_fu_555_p1 <= phi_mul_reg_371(14 - 1 downto 0);
    tmp_3_i_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_472),14));
    tmp_3_i_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_472),64));
    tmp_4_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_324),64));
    tmp_5_fu_605_p2 <= std_logic_vector(unsigned(tmp_3_reg_774) + unsigned(tmp_3_cast_fu_601_p1));
    tmp_7_fu_595_p2 <= std_logic_vector(unsigned(is_idx2_1_reg_382) + unsigned(ap_const_lv32_1));
    tmp_8_fu_517_p2 <= "1" when (unsigned(i_reg_313) < unsigned(length_x)) else "0";
        tmp_9_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(is_idx3_reg_403),64));

    tmp_fu_668_p1 <= result_buf_0_1_fu_156;
    tmp_i_fu_703_p2 <= "1" when (i_i_reg_472 = ap_const_lv10_310) else "0";
end behav;
