// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "predict.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic predict::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic predict::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<51> predict::ap_ST_fsm_state1 = "1";
const sc_lv<51> predict::ap_ST_fsm_state2 = "10";
const sc_lv<51> predict::ap_ST_fsm_state3 = "100";
const sc_lv<51> predict::ap_ST_fsm_state4 = "1000";
const sc_lv<51> predict::ap_ST_fsm_state5 = "10000";
const sc_lv<51> predict::ap_ST_fsm_state6 = "100000";
const sc_lv<51> predict::ap_ST_fsm_state7 = "1000000";
const sc_lv<51> predict::ap_ST_fsm_state8 = "10000000";
const sc_lv<51> predict::ap_ST_fsm_state9 = "100000000";
const sc_lv<51> predict::ap_ST_fsm_state10 = "1000000000";
const sc_lv<51> predict::ap_ST_fsm_state11 = "10000000000";
const sc_lv<51> predict::ap_ST_fsm_state12 = "100000000000";
const sc_lv<51> predict::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<51> predict::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<51> predict::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<51> predict::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<51> predict::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<32> predict::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool predict::ap_const_boolean_1 = true;
const sc_lv<1> predict::ap_const_lv1_0 = "0";
const sc_lv<1> predict::ap_const_lv1_1 = "1";
const sc_lv<2> predict::ap_const_lv2_0 = "00";
const sc_lv<2> predict::ap_const_lv2_2 = "10";
const sc_lv<2> predict::ap_const_lv2_3 = "11";
const sc_lv<2> predict::ap_const_lv2_1 = "1";
const sc_lv<32> predict::ap_const_lv32_3 = "11";
const sc_lv<32> predict::ap_const_lv32_6 = "110";
const sc_lv<32> predict::ap_const_lv32_8 = "1000";
const sc_lv<32> predict::ap_const_lv32_31 = "110001";
const sc_lv<32> predict::ap_const_lv32_32 = "110010";
const int predict::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> predict::ap_const_lv32_16 = "10110";
const sc_lv<32> predict::ap_const_lv32_1E = "11110";
const sc_lv<32> predict::ap_const_lv32_2B = "101011";
const sc_lv<32> predict::ap_const_lv32_1 = "1";
const sc_lv<32> predict::ap_const_lv32_2 = "10";
const sc_lv<32> predict::ap_const_lv32_4 = "100";
const sc_lv<32> predict::ap_const_lv32_5 = "101";
const sc_lv<32> predict::ap_const_lv32_7 = "111";
const sc_lv<32> predict::ap_const_lv32_9 = "1001";
const sc_lv<32> predict::ap_const_lv32_A = "1010";
const sc_lv<32> predict::ap_const_lv32_B = "1011";
const sc_lv<32> predict::ap_const_lv32_C = "1100";
const sc_lv<32> predict::ap_const_lv32_D = "1101";
const sc_lv<32> predict::ap_const_lv32_12 = "10010";
const sc_lv<32> predict::ap_const_lv32_1B = "11011";
const sc_lv<32> predict::ap_const_lv32_27 = "100111";
const sc_lv<32> predict::ap_const_lv32_30 = "110000";
const sc_lv<10> predict::ap_const_lv10_0 = "0000000000";
const sc_lv<32> predict::ap_const_lv32_310 = "1100010000";
const sc_lv<64> predict::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<42> predict::ap_const_lv42_0 = "000000000000000000000000000000000000000000";
const sc_lv<4> predict::ap_const_lv4_F = "1111";
const sc_lv<4> predict::ap_const_lv4_0 = "0000";
const sc_lv<5> predict::ap_const_lv5_0 = "00000";
const sc_lv<32> predict::ap_const_lv32_E = "1110";
const sc_lv<32> predict::ap_const_lv32_17 = "10111";
const sc_lv<32> predict::ap_const_lv32_2C = "101100";
const sc_lv<32> predict::ap_const_lv32_BD4CCCCD = "10111101010011001100110011001101";
const sc_lv<32> predict::ap_const_lv32_13 = "10011";
const sc_lv<32> predict::ap_const_lv32_28 = "101000";
const sc_lv<32> predict::ap_const_lv32_1F = "11111";
const sc_lv<10> predict::ap_const_lv10_310 = "1100010000";
const sc_lv<10> predict::ap_const_lv10_1 = "1";
const sc_lv<64> predict::ap_const_lv64_310 = "1100010000";
const sc_lv<42> predict::ap_const_lv42_310 = "1100010000";

predict::predict(sc_module_name name) : sc_module(name), mVcdFile(0) {
    predict_CONTROL_BUS_s_axi_U = new predict_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("predict_CONTROL_BUS_s_axi_U");
    predict_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    predict_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    predict_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    predict_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    predict_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    predict_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    predict_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    predict_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    predict_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    predict_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    predict_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    predict_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    predict_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    predict_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    predict_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    predict_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    predict_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    predict_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    predict_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    predict_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    predict_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    predict_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    predict_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    predict_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    predict_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    predict_CONTROL_BUS_s_axi_U->length_x(length_x);
    predict_CONTROL_BUS_s_axi_U->length_dc(length_dc);
    input_buf_0_U = new predict_input_buf_0("input_buf_0_U");
    input_buf_0_U->clk(ap_clk);
    input_buf_0_U->reset(ap_rst_n_inv);
    input_buf_0_U->address0(input_buf_0_address0);
    input_buf_0_U->ce0(input_buf_0_ce0);
    input_buf_0_U->we0(input_buf_0_we0);
    input_buf_0_U->d0(input_buf_0_d0);
    input_buf_0_U->q0(input_buf_0_q0);
    supp_vecs_buf_U = new predict_supp_vecsbkb("supp_vecs_buf_U");
    supp_vecs_buf_U->clk(ap_clk);
    supp_vecs_buf_U->reset(ap_rst_n_inv);
    supp_vecs_buf_U->address0(supp_vecs_buf_address0);
    supp_vecs_buf_U->ce0(supp_vecs_buf_ce0);
    supp_vecs_buf_U->we0(supp_vecs_buf_we0);
    supp_vecs_buf_U->d0(supp_vecs_buf_d0);
    supp_vecs_buf_U->q0(supp_vecs_buf_q0);
    dual_coef_buf_U = new predict_dual_coefcud("dual_coef_buf_U");
    dual_coef_buf_U->clk(ap_clk);
    dual_coef_buf_U->reset(ap_rst_n_inv);
    dual_coef_buf_U->address0(dual_coef_buf_address0);
    dual_coef_buf_U->ce0(dual_coef_buf_ce0);
    dual_coef_buf_U->we0(dual_coef_buf_we0);
    dual_coef_buf_U->d0(dual_coef_buf_d0);
    dual_coef_buf_U->q0(dual_coef_buf_q0);
    predict_faddfsub_dEe_U1 = new predict_faddfsub_dEe<1,5,32,32,32>("predict_faddfsub_dEe_U1");
    predict_faddfsub_dEe_U1->clk(ap_clk);
    predict_faddfsub_dEe_U1->reset(ap_rst_n_inv);
    predict_faddfsub_dEe_U1->din0(grp_fu_494_p0);
    predict_faddfsub_dEe_U1->din1(grp_fu_494_p1);
    predict_faddfsub_dEe_U1->opcode(grp_fu_494_opcode);
    predict_faddfsub_dEe_U1->ce(ap_var_for_const0);
    predict_faddfsub_dEe_U1->dout(grp_fu_494_p2);
    predict_fmul_32nseOg_U2 = new predict_fmul_32nseOg<1,4,32,32,32>("predict_fmul_32nseOg_U2");
    predict_fmul_32nseOg_U2->clk(ap_clk);
    predict_fmul_32nseOg_U2->reset(ap_rst_n_inv);
    predict_fmul_32nseOg_U2->din0(grp_fu_500_p0);
    predict_fmul_32nseOg_U2->din1(grp_fu_500_p1);
    predict_fmul_32nseOg_U2->ce(ap_var_for_const0);
    predict_fmul_32nseOg_U2->dout(grp_fu_500_p2);
    predict_fexp_32nsfYi_U3 = new predict_fexp_32nsfYi<1,9,32,32,32>("predict_fexp_32nsfYi_U3");
    predict_fexp_32nsfYi_U3->clk(ap_clk);
    predict_fexp_32nsfYi_U3->reset(ap_rst_n_inv);
    predict_fexp_32nsfYi_U3->din0(ap_var_for_const1);
    predict_fexp_32nsfYi_U3->din1(reg_511);
    predict_fexp_32nsfYi_U3->ce(ap_var_for_const0);
    predict_fexp_32nsfYi_U3->dout(grp_fu_506_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state50);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state50_io);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( exitcond2_fu_734_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_dual_coef_buf_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_9_fu_640_p1 );
    sensitive << ( tmp_10_fu_698_p1 );

    SC_METHOD(thread_dual_coef_buf_ce0);
    sensitive << ( dual_coef_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dual_coef_buf_d0);
    sensitive << ( dual_coef_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dual_coef_buf_we0);
    sensitive << ( dual_coef_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dual_coef_stream_TDATA_blk_n);
    sensitive << ( dual_coef_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dual_coef_stream_TREADY);
    sensitive << ( dual_coef_stream_dest_V_0_state );

    SC_METHOD(thread_dual_coef_stream_data_V_0_ack_in);
    sensitive << ( dual_coef_stream_data_V_0_state );

    SC_METHOD(thread_dual_coef_stream_data_V_0_ack_out);
    sensitive << ( dual_coef_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dual_coef_stream_data_V_0_data_out);
    sensitive << ( dual_coef_stream_data_V_0_payload_A );
    sensitive << ( dual_coef_stream_data_V_0_payload_B );
    sensitive << ( dual_coef_stream_data_V_0_sel );

    SC_METHOD(thread_dual_coef_stream_data_V_0_load_A);
    sensitive << ( dual_coef_stream_data_V_0_sel_wr );
    sensitive << ( dual_coef_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_dual_coef_stream_data_V_0_load_B);
    sensitive << ( dual_coef_stream_data_V_0_sel_wr );
    sensitive << ( dual_coef_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_dual_coef_stream_data_V_0_sel);
    sensitive << ( dual_coef_stream_data_V_0_sel_rd );

    SC_METHOD(thread_dual_coef_stream_data_V_0_state_cmp_full);
    sensitive << ( dual_coef_stream_data_V_0_state );

    SC_METHOD(thread_dual_coef_stream_data_V_0_vld_in);
    sensitive << ( dual_coef_stream_TVALID );

    SC_METHOD(thread_dual_coef_stream_data_V_0_vld_out);
    sensitive << ( dual_coef_stream_data_V_0_state );

    SC_METHOD(thread_dual_coef_stream_dest_V_0_ack_out);
    sensitive << ( dual_coef_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_dual_coef_stream_dest_V_0_vld_in);
    sensitive << ( dual_coef_stream_TVALID );

    SC_METHOD(thread_exitcond1_fu_529_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_324 );

    SC_METHOD(thread_exitcond2_fu_734_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( length_x_read_reg_751 );
    sensitive << ( ap_block_state50_io );
    sensitive << ( os_idx_reg_483 );

    SC_METHOD(thread_exitcond3_fu_629_p2);
    sensitive << ( length_dc_read_reg_784 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( is_idx3_reg_403 );

    SC_METHOD(thread_exitcond4_fu_654_p2);
    sensitive << ( length_x_read_reg_751 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i4_reg_415 );

    SC_METHOD(thread_exitcond5_fu_682_p2);
    sensitive << ( length_dc_read_reg_784 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( j5_reg_438 );

    SC_METHOD(thread_exitcond_fu_583_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( indvars_iv_reg_336 );
    sensitive << ( is_idx2_1_reg_382 );

    SC_METHOD(thread_grp_fu_494_opcode);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_grp_fu_494_p0);
    sensitive << ( supp_vecs_buf_load_reg_899 );
    sensitive << ( result_buf_0_reg_426 );
    sensitive << ( sum_i_reg_460 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_grp_fu_494_p1);
    sensitive << ( reg_511 );
    sensitive << ( input_buf_0_load_reg_904 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_grp_fu_500_p0);
    sensitive << ( dual_coef_buf_load_reg_876 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_4_i_reg_909 );
    sensitive << ( sum_i_reg_460 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_grp_fu_500_p1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_4_i_reg_909 );
    sensitive << ( tmp_2_i_reg_920 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_i_1_fu_523_p2);
    sensitive << ( i_reg_313 );

    SC_METHOD(thread_i_2_fu_571_p2);
    sensitive << ( i1_reg_348 );

    SC_METHOD(thread_i_4_fu_659_p2);
    sensitive << ( i4_reg_415 );

    SC_METHOD(thread_i_5_fu_709_p2);
    sensitive << ( i_i_reg_472 );

    SC_METHOD(thread_in_stream_TDATA_blk_n);
    sensitive << ( in_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( in_stream_dest_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_in);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_stream_data_V_0_data_out);
    sensitive << ( in_stream_data_V_0_payload_A );
    sensitive << ( in_stream_data_V_0_payload_B );
    sensitive << ( in_stream_data_V_0_sel );

    SC_METHOD(thread_in_stream_data_V_0_load_A);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_load_B);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_sel);
    sensitive << ( in_stream_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream_data_V_0_state_cmp_full);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_in_stream_data_V_0_vld_out);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_dest_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_stream_dest_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_indvars_iv_next_fu_610_p2);
    sensitive << ( indvars_iv_reg_336 );

    SC_METHOD(thread_input_buf_0_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_4_fu_550_p1 );
    sensitive << ( tmp_3_i_fu_715_p1 );

    SC_METHOD(thread_input_buf_0_ce0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_input_buf_0_d0);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_input_buf_0_we0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_is_idx2_2_fu_577_p2);
    sensitive << ( is_idx2_reg_359 );

    SC_METHOD(thread_is_idx3_2_fu_634_p2);
    sensitive << ( is_idx3_reg_403 );

    SC_METHOD(thread_j_1_fu_535_p2);
    sensitive << ( j_reg_324 );

    SC_METHOD(thread_j_2_fu_589_p2);
    sensitive << ( j2_reg_392 );

    SC_METHOD(thread_j_4_fu_687_p2);
    sensitive << ( j5_reg_438 );

    SC_METHOD(thread_last_assign_fu_745_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( length_x_read_reg_751 );
    sensitive << ( os_idx_2_fu_739_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_next_mul2_fu_676_p2);
    sensitive << ( phi_mul1_reg_449 );

    SC_METHOD(thread_next_mul_fu_559_p2);
    sensitive << ( phi_mul_reg_371 );

    SC_METHOD(thread_os_idx_2_fu_739_p2);
    sensitive << ( os_idx_reg_483 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( out_stream_dest_V_1_data_out );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( out_stream_id_V_1_data_out );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( out_stream_keep_V_1_data_out );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( out_stream_strb_V_1_data_out );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( out_stream_user_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_in);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_data_V_1_data_out);
    sensitive << ( out_stream_data_V_1_payload_A );
    sensitive << ( out_stream_data_V_1_payload_B );
    sensitive << ( out_stream_data_V_1_sel );

    SC_METHOD(thread_out_stream_data_V_1_load_A);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_load_B);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_sel);
    sensitive << ( out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_data_V_1_state_cmp_full);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_data_V_1_vld_out);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_in);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_dest_V_1_data_out);
    sensitive << ( out_stream_dest_V_1_sel );

    SC_METHOD(thread_out_stream_dest_V_1_sel);
    sensitive << ( out_stream_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_dest_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_dest_V_1_vld_out);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_in);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_id_V_1_data_out);
    sensitive << ( out_stream_id_V_1_sel );

    SC_METHOD(thread_out_stream_id_V_1_sel);
    sensitive << ( out_stream_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_id_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_id_V_1_vld_out);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_in);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_keep_V_1_data_out);
    sensitive << ( out_stream_keep_V_1_sel );

    SC_METHOD(thread_out_stream_keep_V_1_sel);
    sensitive << ( out_stream_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_keep_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_keep_V_1_vld_out);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_in);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_last_V_1_data_out);
    sensitive << ( out_stream_last_V_1_payload_A );
    sensitive << ( out_stream_last_V_1_payload_B );
    sensitive << ( out_stream_last_V_1_sel );

    SC_METHOD(thread_out_stream_last_V_1_load_A);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_load_B);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_sel);
    sensitive << ( out_stream_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_last_V_1_state_cmp_full);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_last_V_1_vld_out);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_in);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_strb_V_1_data_out);
    sensitive << ( out_stream_strb_V_1_sel );

    SC_METHOD(thread_out_stream_strb_V_1_sel);
    sensitive << ( out_stream_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_strb_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_strb_V_1_vld_out);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_in);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_user_V_1_data_out);
    sensitive << ( out_stream_user_V_1_sel );

    SC_METHOD(thread_out_stream_user_V_1_sel);
    sensitive << ( out_stream_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_user_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_block_state50_io );

    SC_METHOD(thread_out_stream_user_V_1_vld_out);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_supp_vec_stream_TDATA_blk_n);
    sensitive << ( supp_vec_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_supp_vec_stream_TREADY);
    sensitive << ( supp_vec_stream_dest_V_0_state );

    SC_METHOD(thread_supp_vec_stream_data_V_0_ack_in);
    sensitive << ( supp_vec_stream_data_V_0_state );

    SC_METHOD(thread_supp_vec_stream_data_V_0_ack_out);
    sensitive << ( supp_vec_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_supp_vec_stream_data_V_0_data_out);
    sensitive << ( supp_vec_stream_data_V_0_payload_A );
    sensitive << ( supp_vec_stream_data_V_0_payload_B );
    sensitive << ( supp_vec_stream_data_V_0_sel );

    SC_METHOD(thread_supp_vec_stream_data_V_0_load_A);
    sensitive << ( supp_vec_stream_data_V_0_sel_wr );
    sensitive << ( supp_vec_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_supp_vec_stream_data_V_0_load_B);
    sensitive << ( supp_vec_stream_data_V_0_sel_wr );
    sensitive << ( supp_vec_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_supp_vec_stream_data_V_0_sel);
    sensitive << ( supp_vec_stream_data_V_0_sel_rd );

    SC_METHOD(thread_supp_vec_stream_data_V_0_state_cmp_full);
    sensitive << ( supp_vec_stream_data_V_0_state );

    SC_METHOD(thread_supp_vec_stream_data_V_0_vld_in);
    sensitive << ( supp_vec_stream_TVALID );

    SC_METHOD(thread_supp_vec_stream_data_V_0_vld_out);
    sensitive << ( supp_vec_stream_data_V_0_state );

    SC_METHOD(thread_supp_vec_stream_dest_V_0_ack_out);
    sensitive << ( supp_vec_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_supp_vec_stream_dest_V_0_vld_in);
    sensitive << ( supp_vec_stream_TVALID );

    SC_METHOD(thread_supp_vecs_buf_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_13_cast_fu_625_p1 );
    sensitive << ( tmp_15_cast_fu_729_p1 );

    SC_METHOD(thread_supp_vecs_buf_ce0);
    sensitive << ( supp_vec_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_supp_vecs_buf_d0);
    sensitive << ( supp_vec_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_supp_vecs_buf_we0);
    sensitive << ( supp_vec_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_10_fu_698_p1);
    sensitive << ( j5_reg_438 );

    SC_METHOD(thread_tmp_12_fu_672_p1);
    sensitive << ( phi_mul1_reg_449 );

    SC_METHOD(thread_tmp_13_cast_fu_625_p1);
    sensitive << ( tmp_5_reg_816 );

    SC_METHOD(thread_tmp_13_fu_724_p2);
    sensitive << ( tmp_12_reg_853 );
    sensitive << ( tmp_3_i_cast_fu_720_p1 );

    SC_METHOD(thread_tmp_15_cast_fu_729_p1);
    sensitive << ( tmp_13_fu_724_p2 );

    SC_METHOD(thread_tmp_1_fu_565_p2);
    sensitive << ( length_dc );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i1_reg_348 );

    SC_METHOD(thread_tmp_3_cast_fu_601_p1);
    sensitive << ( j2_reg_392 );

    SC_METHOD(thread_tmp_3_fu_555_p1);
    sensitive << ( phi_mul_reg_371 );

    SC_METHOD(thread_tmp_3_i_cast_fu_720_p1);
    sensitive << ( i_i_reg_472 );

    SC_METHOD(thread_tmp_3_i_fu_715_p1);
    sensitive << ( i_i_reg_472 );

    SC_METHOD(thread_tmp_4_fu_550_p1);
    sensitive << ( j_reg_324 );

    SC_METHOD(thread_tmp_5_fu_605_p2);
    sensitive << ( tmp_3_reg_774 );
    sensitive << ( tmp_3_cast_fu_601_p1 );

    SC_METHOD(thread_tmp_7_fu_595_p2);
    sensitive << ( is_idx2_1_reg_382 );

    SC_METHOD(thread_tmp_8_fu_517_p2);
    sensitive << ( length_x );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_313 );

    SC_METHOD(thread_tmp_9_fu_640_p1);
    sensitive << ( is_idx3_reg_403 );

    SC_METHOD(thread_tmp_fu_668_p1);
    sensitive << ( result_buf_0_1_fu_156 );

    SC_METHOD(thread_tmp_i_fu_703_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_i_reg_472 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( supp_vec_stream_data_V_0_vld_out );
    sensitive << ( dual_coef_stream_data_V_0_vld_out );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( exitcond2_fu_734_p2 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_1_fu_565_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_583_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond4_fu_654_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond5_fu_682_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_i_fu_703_p2 );
    sensitive << ( ap_block_state50_io );
    sensitive << ( exitcond1_fu_529_p2 );
    sensitive << ( tmp_8_fu_517_p2 );
    sensitive << ( exitcond3_fu_629_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000001";
    in_stream_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream_data_V_0_state = "00";
    in_stream_dest_V_0_state = "00";
    supp_vec_stream_data_V_0_sel_rd = SC_LOGIC_0;
    supp_vec_stream_data_V_0_sel_wr = SC_LOGIC_0;
    supp_vec_stream_data_V_0_state = "00";
    supp_vec_stream_dest_V_0_state = "00";
    dual_coef_stream_data_V_0_sel_rd = SC_LOGIC_0;
    dual_coef_stream_data_V_0_sel_wr = SC_LOGIC_0;
    dual_coef_stream_data_V_0_state = "00";
    dual_coef_stream_dest_V_0_state = "00";
    out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_data_V_1_state = "00";
    out_stream_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_keep_V_1_state = "00";
    out_stream_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_strb_V_1_state = "00";
    out_stream_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_user_V_1_state = "00";
    out_stream_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_last_V_1_state = "00";
    out_stream_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_id_V_1_state = "00";
    out_stream_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "predict_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, in_stream_TKEEP, "(port)in_stream_TKEEP");
    sc_trace(mVcdFile, in_stream_TSTRB, "(port)in_stream_TSTRB");
    sc_trace(mVcdFile, in_stream_TUSER, "(port)in_stream_TUSER");
    sc_trace(mVcdFile, in_stream_TLAST, "(port)in_stream_TLAST");
    sc_trace(mVcdFile, in_stream_TID, "(port)in_stream_TID");
    sc_trace(mVcdFile, in_stream_TDEST, "(port)in_stream_TDEST");
    sc_trace(mVcdFile, supp_vec_stream_TDATA, "(port)supp_vec_stream_TDATA");
    sc_trace(mVcdFile, supp_vec_stream_TVALID, "(port)supp_vec_stream_TVALID");
    sc_trace(mVcdFile, supp_vec_stream_TREADY, "(port)supp_vec_stream_TREADY");
    sc_trace(mVcdFile, supp_vec_stream_TKEEP, "(port)supp_vec_stream_TKEEP");
    sc_trace(mVcdFile, supp_vec_stream_TSTRB, "(port)supp_vec_stream_TSTRB");
    sc_trace(mVcdFile, supp_vec_stream_TUSER, "(port)supp_vec_stream_TUSER");
    sc_trace(mVcdFile, supp_vec_stream_TLAST, "(port)supp_vec_stream_TLAST");
    sc_trace(mVcdFile, supp_vec_stream_TID, "(port)supp_vec_stream_TID");
    sc_trace(mVcdFile, supp_vec_stream_TDEST, "(port)supp_vec_stream_TDEST");
    sc_trace(mVcdFile, dual_coef_stream_TDATA, "(port)dual_coef_stream_TDATA");
    sc_trace(mVcdFile, dual_coef_stream_TVALID, "(port)dual_coef_stream_TVALID");
    sc_trace(mVcdFile, dual_coef_stream_TREADY, "(port)dual_coef_stream_TREADY");
    sc_trace(mVcdFile, dual_coef_stream_TKEEP, "(port)dual_coef_stream_TKEEP");
    sc_trace(mVcdFile, dual_coef_stream_TSTRB, "(port)dual_coef_stream_TSTRB");
    sc_trace(mVcdFile, dual_coef_stream_TUSER, "(port)dual_coef_stream_TUSER");
    sc_trace(mVcdFile, dual_coef_stream_TLAST, "(port)dual_coef_stream_TLAST");
    sc_trace(mVcdFile, dual_coef_stream_TID, "(port)dual_coef_stream_TID");
    sc_trace(mVcdFile, dual_coef_stream_TDEST, "(port)dual_coef_stream_TDEST");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_stream_data_V_0_data_out, "in_stream_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_in, "in_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_out, "in_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_in, "in_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_out, "in_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_A, "in_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_B, "in_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_rd, "in_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_wr, "in_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_data_V_0_sel, "in_stream_data_V_0_sel");
    sc_trace(mVcdFile, in_stream_data_V_0_load_A, "in_stream_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream_data_V_0_load_B, "in_stream_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream_data_V_0_state, "in_stream_data_V_0_state");
    sc_trace(mVcdFile, in_stream_data_V_0_state_cmp_full, "in_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream_dest_V_0_vld_in, "in_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_dest_V_0_ack_out, "in_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_dest_V_0_state, "in_stream_dest_V_0_state");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_data_out, "supp_vec_stream_data_V_0_data_out");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_vld_in, "supp_vec_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_vld_out, "supp_vec_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_ack_in, "supp_vec_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_ack_out, "supp_vec_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_payload_A, "supp_vec_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_payload_B, "supp_vec_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_sel_rd, "supp_vec_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_sel_wr, "supp_vec_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_sel, "supp_vec_stream_data_V_0_sel");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_load_A, "supp_vec_stream_data_V_0_load_A");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_load_B, "supp_vec_stream_data_V_0_load_B");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_state, "supp_vec_stream_data_V_0_state");
    sc_trace(mVcdFile, supp_vec_stream_data_V_0_state_cmp_full, "supp_vec_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, supp_vec_stream_dest_V_0_vld_in, "supp_vec_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, supp_vec_stream_dest_V_0_ack_out, "supp_vec_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, supp_vec_stream_dest_V_0_state, "supp_vec_stream_dest_V_0_state");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_data_out, "dual_coef_stream_data_V_0_data_out");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_vld_in, "dual_coef_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_vld_out, "dual_coef_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_ack_in, "dual_coef_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_ack_out, "dual_coef_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_payload_A, "dual_coef_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_payload_B, "dual_coef_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_sel_rd, "dual_coef_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_sel_wr, "dual_coef_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_sel, "dual_coef_stream_data_V_0_sel");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_load_A, "dual_coef_stream_data_V_0_load_A");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_load_B, "dual_coef_stream_data_V_0_load_B");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_state, "dual_coef_stream_data_V_0_state");
    sc_trace(mVcdFile, dual_coef_stream_data_V_0_state_cmp_full, "dual_coef_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, dual_coef_stream_dest_V_0_vld_in, "dual_coef_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, dual_coef_stream_dest_V_0_ack_out, "dual_coef_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, dual_coef_stream_dest_V_0_state, "dual_coef_stream_dest_V_0_state");
    sc_trace(mVcdFile, out_stream_data_V_1_data_out, "out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_in, "out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_out, "out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_in, "out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_out, "out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_A, "out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_B, "out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_rd, "out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_wr, "out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_data_V_1_sel, "out_stream_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_data_V_1_load_A, "out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_data_V_1_load_B, "out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_data_V_1_state, "out_stream_data_V_1_state");
    sc_trace(mVcdFile, out_stream_data_V_1_state_cmp_full, "out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_keep_V_1_data_out, "out_stream_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_in, "out_stream_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_out, "out_stream_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_in, "out_stream_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_out, "out_stream_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel_rd, "out_stream_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel, "out_stream_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_keep_V_1_state, "out_stream_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_strb_V_1_data_out, "out_stream_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_in, "out_stream_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_out, "out_stream_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_in, "out_stream_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_out, "out_stream_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel_rd, "out_stream_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel, "out_stream_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_strb_V_1_state, "out_stream_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_user_V_1_data_out, "out_stream_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_in, "out_stream_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_out, "out_stream_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_in, "out_stream_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_out, "out_stream_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_user_V_1_sel_rd, "out_stream_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_user_V_1_sel, "out_stream_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_user_V_1_state, "out_stream_user_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_data_out, "out_stream_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_in, "out_stream_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_out, "out_stream_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_in, "out_stream_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_out, "out_stream_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_A, "out_stream_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_B, "out_stream_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_rd, "out_stream_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_wr, "out_stream_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_last_V_1_sel, "out_stream_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_last_V_1_load_A, "out_stream_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_last_V_1_load_B, "out_stream_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_last_V_1_state, "out_stream_last_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_state_cmp_full, "out_stream_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_id_V_1_data_out, "out_stream_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_in, "out_stream_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_out, "out_stream_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_in, "out_stream_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_out, "out_stream_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_id_V_1_sel_rd, "out_stream_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_id_V_1_sel, "out_stream_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_id_V_1_state, "out_stream_id_V_1_state");
    sc_trace(mVcdFile, out_stream_dest_V_1_data_out, "out_stream_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_in, "out_stream_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_out, "out_stream_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_in, "out_stream_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_out, "out_stream_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel_rd, "out_stream_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel, "out_stream_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_dest_V_1_state, "out_stream_dest_V_1_state");
    sc_trace(mVcdFile, length_x, "length_x");
    sc_trace(mVcdFile, length_dc, "length_dc");
    sc_trace(mVcdFile, in_stream_TDATA_blk_n, "in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, supp_vec_stream_TDATA_blk_n, "supp_vec_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, dual_coef_stream_TDATA_blk_n, "dual_coef_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, exitcond2_fu_734_p2, "exitcond2_fu_734_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, grp_fu_500_p2, "grp_fu_500_p2");
    sc_trace(mVcdFile, reg_511, "reg_511");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, length_x_read_reg_751, "length_x_read_reg_751");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_523_p2, "i_1_fu_523_p2");
    sc_trace(mVcdFile, i_1_reg_761, "i_1_reg_761");
    sc_trace(mVcdFile, j_1_fu_535_p2, "j_1_fu_535_p2");
    sc_trace(mVcdFile, j_1_reg_769, "j_1_reg_769");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_555_p1, "tmp_3_fu_555_p1");
    sc_trace(mVcdFile, tmp_3_reg_774, "tmp_3_reg_774");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, next_mul_fu_559_p2, "next_mul_fu_559_p2");
    sc_trace(mVcdFile, next_mul_reg_779, "next_mul_reg_779");
    sc_trace(mVcdFile, length_dc_read_reg_784, "length_dc_read_reg_784");
    sc_trace(mVcdFile, i_2_fu_571_p2, "i_2_fu_571_p2");
    sc_trace(mVcdFile, i_2_reg_793, "i_2_reg_793");
    sc_trace(mVcdFile, is_idx2_2_fu_577_p2, "is_idx2_2_fu_577_p2");
    sc_trace(mVcdFile, is_idx2_2_reg_798, "is_idx2_2_reg_798");
    sc_trace(mVcdFile, tmp_1_fu_565_p2, "tmp_1_fu_565_p2");
    sc_trace(mVcdFile, j_2_fu_589_p2, "j_2_fu_589_p2");
    sc_trace(mVcdFile, j_2_reg_806, "j_2_reg_806");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_7_fu_595_p2, "tmp_7_fu_595_p2");
    sc_trace(mVcdFile, tmp_7_reg_811, "tmp_7_reg_811");
    sc_trace(mVcdFile, exitcond_fu_583_p2, "exitcond_fu_583_p2");
    sc_trace(mVcdFile, tmp_5_fu_605_p2, "tmp_5_fu_605_p2");
    sc_trace(mVcdFile, tmp_5_reg_816, "tmp_5_reg_816");
    sc_trace(mVcdFile, indvars_iv_next_fu_610_p2, "indvars_iv_next_fu_610_p2");
    sc_trace(mVcdFile, is_idx3_2_fu_634_p2, "is_idx3_2_fu_634_p2");
    sc_trace(mVcdFile, is_idx3_2_reg_829, "is_idx3_2_reg_829");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_4_fu_659_p2, "i_4_fu_659_p2");
    sc_trace(mVcdFile, i_4_reg_843, "i_4_reg_843");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_fu_668_p1, "tmp_fu_668_p1");
    sc_trace(mVcdFile, tmp_reg_848, "tmp_reg_848");
    sc_trace(mVcdFile, exitcond4_fu_654_p2, "exitcond4_fu_654_p2");
    sc_trace(mVcdFile, tmp_12_fu_672_p1, "tmp_12_fu_672_p1");
    sc_trace(mVcdFile, tmp_12_reg_853, "tmp_12_reg_853");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, next_mul2_fu_676_p2, "next_mul2_fu_676_p2");
    sc_trace(mVcdFile, next_mul2_reg_858, "next_mul2_reg_858");
    sc_trace(mVcdFile, j_4_fu_687_p2, "j_4_fu_687_p2");
    sc_trace(mVcdFile, j_4_reg_866, "j_4_reg_866");
    sc_trace(mVcdFile, exitcond5_fu_682_p2, "exitcond5_fu_682_p2");
    sc_trace(mVcdFile, dual_coef_buf_q0, "dual_coef_buf_q0");
    sc_trace(mVcdFile, dual_coef_buf_load_reg_876, "dual_coef_buf_load_reg_876");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_5_fu_709_p2, "i_5_fu_709_p2");
    sc_trace(mVcdFile, i_5_reg_884, "i_5_reg_884");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_i_fu_703_p2, "tmp_i_fu_703_p2");
    sc_trace(mVcdFile, supp_vecs_buf_q0, "supp_vecs_buf_q0");
    sc_trace(mVcdFile, supp_vecs_buf_load_reg_899, "supp_vecs_buf_load_reg_899");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, input_buf_0_q0, "input_buf_0_q0");
    sc_trace(mVcdFile, input_buf_0_load_reg_904, "input_buf_0_load_reg_904");
    sc_trace(mVcdFile, grp_fu_494_p2, "grp_fu_494_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_909, "tmp_4_i_reg_909");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_506_p2, "grp_fu_506_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_920, "tmp_2_i_reg_920");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, os_idx_2_fu_739_p2, "os_idx_2_fu_739_p2");
    sc_trace(mVcdFile, os_idx_2_reg_933, "os_idx_2_reg_933");
    sc_trace(mVcdFile, ap_block_state50, "ap_block_state50");
    sc_trace(mVcdFile, ap_block_state50_io, "ap_block_state50_io");
    sc_trace(mVcdFile, last_assign_fu_745_p2, "last_assign_fu_745_p2");
    sc_trace(mVcdFile, input_buf_0_address0, "input_buf_0_address0");
    sc_trace(mVcdFile, input_buf_0_ce0, "input_buf_0_ce0");
    sc_trace(mVcdFile, input_buf_0_we0, "input_buf_0_we0");
    sc_trace(mVcdFile, input_buf_0_d0, "input_buf_0_d0");
    sc_trace(mVcdFile, supp_vecs_buf_address0, "supp_vecs_buf_address0");
    sc_trace(mVcdFile, supp_vecs_buf_ce0, "supp_vecs_buf_ce0");
    sc_trace(mVcdFile, supp_vecs_buf_we0, "supp_vecs_buf_we0");
    sc_trace(mVcdFile, supp_vecs_buf_d0, "supp_vecs_buf_d0");
    sc_trace(mVcdFile, dual_coef_buf_address0, "dual_coef_buf_address0");
    sc_trace(mVcdFile, dual_coef_buf_ce0, "dual_coef_buf_ce0");
    sc_trace(mVcdFile, dual_coef_buf_we0, "dual_coef_buf_we0");
    sc_trace(mVcdFile, dual_coef_buf_d0, "dual_coef_buf_d0");
    sc_trace(mVcdFile, i_reg_313, "i_reg_313");
    sc_trace(mVcdFile, exitcond1_fu_529_p2, "exitcond1_fu_529_p2");
    sc_trace(mVcdFile, j_reg_324, "j_reg_324");
    sc_trace(mVcdFile, tmp_8_fu_517_p2, "tmp_8_fu_517_p2");
    sc_trace(mVcdFile, indvars_iv_reg_336, "indvars_iv_reg_336");
    sc_trace(mVcdFile, i1_reg_348, "i1_reg_348");
    sc_trace(mVcdFile, is_idx2_reg_359, "is_idx2_reg_359");
    sc_trace(mVcdFile, phi_mul_reg_371, "phi_mul_reg_371");
    sc_trace(mVcdFile, is_idx2_1_reg_382, "is_idx2_1_reg_382");
    sc_trace(mVcdFile, j2_reg_392, "j2_reg_392");
    sc_trace(mVcdFile, is_idx3_reg_403, "is_idx3_reg_403");
    sc_trace(mVcdFile, i4_reg_415, "i4_reg_415");
    sc_trace(mVcdFile, exitcond3_fu_629_p2, "exitcond3_fu_629_p2");
    sc_trace(mVcdFile, result_buf_0_reg_426, "result_buf_0_reg_426");
    sc_trace(mVcdFile, j5_reg_438, "j5_reg_438");
    sc_trace(mVcdFile, phi_mul1_reg_449, "phi_mul1_reg_449");
    sc_trace(mVcdFile, sum_i_reg_460, "sum_i_reg_460");
    sc_trace(mVcdFile, i_i_reg_472, "i_i_reg_472");
    sc_trace(mVcdFile, os_idx_reg_483, "os_idx_reg_483");
    sc_trace(mVcdFile, tmp_4_fu_550_p1, "tmp_4_fu_550_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_625_p1, "tmp_13_cast_fu_625_p1");
    sc_trace(mVcdFile, tmp_9_fu_640_p1, "tmp_9_fu_640_p1");
    sc_trace(mVcdFile, tmp_10_fu_698_p1, "tmp_10_fu_698_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_729_p1, "tmp_15_cast_fu_729_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_715_p1, "tmp_3_i_fu_715_p1");
    sc_trace(mVcdFile, result_buf_0_1_fu_156, "result_buf_0_1_fu_156");
    sc_trace(mVcdFile, grp_fu_494_p0, "grp_fu_494_p0");
    sc_trace(mVcdFile, grp_fu_494_p1, "grp_fu_494_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, grp_fu_500_p0, "grp_fu_500_p0");
    sc_trace(mVcdFile, grp_fu_500_p1, "grp_fu_500_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, tmp_3_cast_fu_601_p1, "tmp_3_cast_fu_601_p1");
    sc_trace(mVcdFile, tmp_3_i_cast_fu_720_p1, "tmp_3_i_cast_fu_720_p1");
    sc_trace(mVcdFile, tmp_13_fu_724_p2, "tmp_13_fu_724_p2");
    sc_trace(mVcdFile, grp_fu_494_opcode, "grp_fu_494_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("predict.hdltvin.dat");
    mHdltvoutHandle.open("predict.hdltvout.dat");
}

predict::~predict() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete predict_CONTROL_BUS_s_axi_U;
    delete input_buf_0_U;
    delete supp_vecs_buf_U;
    delete dual_coef_buf_U;
    delete predict_faddfsub_dEe_U1;
    delete predict_fmul_32nseOg_U2;
    delete predict_fexp_32nsfYi_U3;
}

void predict::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void predict::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void predict::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dual_coef_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_vld_out.read()))) {
            dual_coef_stream_data_V_0_sel_rd =  (sc_logic) (~dual_coef_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dual_coef_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_ack_in.read()))) {
            dual_coef_stream_data_V_0_sel_wr =  (sc_logic) (~dual_coef_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dual_coef_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dual_coef_stream_data_V_0_state.read())))) {
            dual_coef_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dual_coef_stream_data_V_0_state.read())))) {
            dual_coef_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dual_coef_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dual_coef_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_ack_out.read()))))) {
            dual_coef_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            dual_coef_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dual_coef_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dual_coef_stream_dest_V_0_state.read())))) {
            dual_coef_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dual_coef_stream_dest_V_0_state.read())))) {
            dual_coef_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dual_coef_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dual_coef_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dual_coef_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dual_coef_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_dest_V_0_ack_out.read()))))) {
            dual_coef_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            dual_coef_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i1_reg_348 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        i1_reg_348 = i_2_reg_793.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_629_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        i4_reg_415 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(exitcond5_fu_682_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        i4_reg_415 = i_4_reg_843.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        i_i_reg_472 = i_5_reg_884.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_i_reg_472 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_529_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_reg_313 = i_1_reg_761.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_313 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_out.read()))) {
            in_stream_data_V_0_sel_rd =  (sc_logic) (~in_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_in.read()))) {
            in_stream_data_V_0_sel_wr =  (sc_logic) (~in_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()))))) {
            in_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_dest_V_0_state.read())))) {
            in_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_dest_V_0_state.read())))) {
            in_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()))))) {
            in_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        indvars_iv_reg_336 = ap_const_lv32_310;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        indvars_iv_reg_336 = indvars_iv_next_fu_610_p2.read();
    }
    if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        is_idx2_1_reg_382 = tmp_7_reg_811.read();
    } else if ((esl_seteq<1,1,1>(tmp_1_fu_565_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        is_idx2_1_reg_382 = is_idx2_reg_359.read();
    }
    if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        is_idx2_reg_359 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        is_idx2_reg_359 = is_idx2_2_reg_798.read();
    }
    if ((esl_seteq<1,1,1>(tmp_1_fu_565_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        is_idx3_reg_403 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        is_idx3_reg_403 = is_idx3_2_reg_829.read();
    }
    if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        j2_reg_392 = j_2_reg_806.read();
    } else if ((esl_seteq<1,1,1>(tmp_1_fu_565_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        j2_reg_392 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        j5_reg_438 = j_4_reg_866.read();
    } else if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        j5_reg_438 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j_reg_324 = j_1_reg_769.read();
    } else if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_324 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        os_idx_reg_483 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
                esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1))) {
        os_idx_reg_483 = os_idx_2_reg_933.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_out.read()))) {
            out_stream_data_V_1_sel_rd =  (sc_logic) (~out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_in.read()))) {
            out_stream_data_V_1_sel_wr =  (sc_logic) (~out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_data_V_1_state.read())))) {
            out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_data_V_1_state.read())))) {
            out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()))))) {
            out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_out.read()))) {
            out_stream_dest_V_1_sel_rd =  (sc_logic) (~out_stream_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()))))) {
            out_stream_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_out.read()))) {
            out_stream_id_V_1_sel_rd =  (sc_logic) (~out_stream_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()))))) {
            out_stream_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_out.read()))) {
            out_stream_keep_V_1_sel_rd =  (sc_logic) (~out_stream_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()))))) {
            out_stream_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_out.read()))) {
            out_stream_last_V_1_sel_rd =  (sc_logic) (~out_stream_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_in.read()))) {
            out_stream_last_V_1_sel_wr =  (sc_logic) (~out_stream_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()))))) {
            out_stream_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_out.read()))) {
            out_stream_strb_V_1_sel_rd =  (sc_logic) (~out_stream_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()))))) {
            out_stream_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_out.read()))) {
            out_stream_user_V_1_sel_rd =  (sc_logic) (~out_stream_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()))))) {
            out_stream_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        phi_mul1_reg_449 = next_mul2_reg_858.read();
    } else if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        phi_mul1_reg_449 = ap_const_lv42_0;
    }
    if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        phi_mul_reg_371 = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        phi_mul_reg_371 = next_mul_reg_779.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        result_buf_0_reg_426 = grp_fu_494_p2.read();
    } else if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        result_buf_0_reg_426 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        sum_i_reg_460 = grp_fu_494_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sum_i_reg_460 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        supp_vec_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_vld_out.read()))) {
            supp_vec_stream_data_V_0_sel_rd =  (sc_logic) (~supp_vec_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        supp_vec_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_ack_in.read()))) {
            supp_vec_stream_data_V_0_sel_wr =  (sc_logic) (~supp_vec_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        supp_vec_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, supp_vec_stream_data_V_0_state.read())))) {
            supp_vec_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, supp_vec_stream_data_V_0_state.read())))) {
            supp_vec_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, supp_vec_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, supp_vec_stream_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_ack_out.read()))))) {
            supp_vec_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            supp_vec_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        supp_vec_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, supp_vec_stream_dest_V_0_state.read())))) {
            supp_vec_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, supp_vec_stream_dest_V_0_state.read())))) {
            supp_vec_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, supp_vec_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, supp_vec_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, supp_vec_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, supp_vec_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_dest_V_0_ack_out.read()))))) {
            supp_vec_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            supp_vec_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dual_coef_buf_load_reg_876 = dual_coef_buf_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_load_A.read())) {
        dual_coef_stream_data_V_0_payload_A = dual_coef_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_load_B.read())) {
        dual_coef_stream_data_V_0_payload_B = dual_coef_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_761 = i_1_fu_523_p2.read();
        length_x_read_reg_751 = length_x.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_2_reg_793 = i_2_fu_571_p2.read();
        length_dc_read_reg_784 = length_dc.read();
        next_mul_reg_779 = next_mul_fu_559_p2.read();
        tmp_3_reg_774 = tmp_3_fu_555_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_4_reg_843 = i_4_fu_659_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_5_reg_884 = i_5_fu_709_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_A.read())) {
        in_stream_data_V_0_payload_A = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_B.read())) {
        in_stream_data_V_0_payload_B = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        input_buf_0_load_reg_904 = input_buf_0_q0.read();
        supp_vecs_buf_load_reg_899 = supp_vecs_buf_q0.read();
    }
    if ((esl_seteq<1,1,1>(tmp_1_fu_565_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        is_idx2_2_reg_798 = is_idx2_2_fu_577_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        is_idx3_2_reg_829 = is_idx3_2_fu_634_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_769 = j_1_fu_535_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_2_reg_806 = j_2_fu_589_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        j_4_reg_866 = j_4_fu_687_p2.read();
        next_mul2_reg_858 = next_mul2_fu_676_p2.read();
        result_buf_0_1_fu_156 = result_buf_0_reg_426.read();
        tmp_12_reg_853 = tmp_12_fu_672_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)))) {
        os_idx_2_reg_933 = os_idx_2_fu_739_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_A.read())) {
        out_stream_data_V_1_payload_A = tmp_reg_848.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_B.read())) {
        out_stream_data_V_1_payload_B = tmp_reg_848.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_A.read())) {
        out_stream_last_V_1_payload_A = last_assign_fu_745_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_B.read())) {
        out_stream_last_V_1_payload_B = last_assign_fu_745_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()))) {
        reg_511 = grp_fu_500_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_load_A.read())) {
        supp_vec_stream_data_V_0_payload_A = supp_vec_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_load_B.read())) {
        supp_vec_stream_data_V_0_payload_B = supp_vec_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        tmp_2_i_reg_920 = grp_fu_506_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tmp_4_i_reg_909 = grp_fu_494_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        tmp_5_reg_816 = tmp_5_fu_605_p2.read();
        tmp_7_reg_811 = tmp_7_fu_595_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        tmp_reg_848 = tmp_fu_668_p1.read();
    }
}

void predict::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void predict::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void predict::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void predict::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void predict::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void predict::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void predict::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void predict::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void predict::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void predict::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void predict::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void predict::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void predict::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void predict::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void predict::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void predict::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void predict::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void predict::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void predict::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void predict::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void predict::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void predict::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void predict::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void predict::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void predict::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void predict::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void predict::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void predict::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void predict::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void predict::thread_ap_block_state50() {
    ap_block_state50 = (esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0));
}

void predict::thread_ap_block_state50_io() {
    ap_block_state50_io = (esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0));
}

void predict::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void predict::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void predict::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void predict::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void predict::thread_dual_coef_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        dual_coef_buf_address0 =  (sc_lv<4>) (tmp_10_fu_698_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dual_coef_buf_address0 =  (sc_lv<4>) (tmp_9_fu_640_p1.read());
    } else {
        dual_coef_buf_address0 = "XXXX";
    }
}

void predict::thread_dual_coef_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())))) {
        dual_coef_buf_ce0 = ap_const_logic_1;
    } else {
        dual_coef_buf_ce0 = ap_const_logic_0;
    }
}

void predict::thread_dual_coef_buf_d0() {
    dual_coef_buf_d0 = dual_coef_stream_data_V_0_data_out.read();
}

void predict::thread_dual_coef_buf_we0() {
    if ((esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        dual_coef_buf_we0 = ap_const_logic_1;
    } else {
        dual_coef_buf_we0 = ap_const_logic_0;
    }
}

void predict::thread_dual_coef_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        dual_coef_stream_TDATA_blk_n = dual_coef_stream_data_V_0_state.read()[0];
    } else {
        dual_coef_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void predict::thread_dual_coef_stream_TREADY() {
    dual_coef_stream_TREADY = dual_coef_stream_dest_V_0_state.read()[1];
}

void predict::thread_dual_coef_stream_data_V_0_ack_in() {
    dual_coef_stream_data_V_0_ack_in = dual_coef_stream_data_V_0_state.read()[1];
}

void predict::thread_dual_coef_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        dual_coef_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        dual_coef_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_dual_coef_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dual_coef_stream_data_V_0_sel.read())) {
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_B.read();
    } else {
        dual_coef_stream_data_V_0_data_out = dual_coef_stream_data_V_0_payload_A.read();
    }
}

void predict::thread_dual_coef_stream_data_V_0_load_A() {
    dual_coef_stream_data_V_0_load_A = (dual_coef_stream_data_V_0_state_cmp_full.read() & ~dual_coef_stream_data_V_0_sel_wr.read());
}

void predict::thread_dual_coef_stream_data_V_0_load_B() {
    dual_coef_stream_data_V_0_load_B = (dual_coef_stream_data_V_0_sel_wr.read() & dual_coef_stream_data_V_0_state_cmp_full.read());
}

void predict::thread_dual_coef_stream_data_V_0_sel() {
    dual_coef_stream_data_V_0_sel = dual_coef_stream_data_V_0_sel_rd.read();
}

void predict::thread_dual_coef_stream_data_V_0_state_cmp_full() {
    dual_coef_stream_data_V_0_state_cmp_full =  (sc_logic) ((!dual_coef_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dual_coef_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void predict::thread_dual_coef_stream_data_V_0_vld_in() {
    dual_coef_stream_data_V_0_vld_in = dual_coef_stream_TVALID.read();
}

void predict::thread_dual_coef_stream_data_V_0_vld_out() {
    dual_coef_stream_data_V_0_vld_out = dual_coef_stream_data_V_0_state.read()[0];
}

void predict::thread_dual_coef_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        dual_coef_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        dual_coef_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_dual_coef_stream_dest_V_0_vld_in() {
    dual_coef_stream_dest_V_0_vld_in = dual_coef_stream_TVALID.read();
}

void predict::thread_exitcond1_fu_529_p2() {
    exitcond1_fu_529_p2 = (!j_reg_324.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_324.read() == ap_const_lv10_310);
}

void predict::thread_exitcond2_fu_734_p2() {
    exitcond2_fu_734_p2 = (!os_idx_reg_483.read().is_01() || !length_x_read_reg_751.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_reg_483.read() == length_x_read_reg_751.read());
}

void predict::thread_exitcond3_fu_629_p2() {
    exitcond3_fu_629_p2 = (!is_idx3_reg_403.read().is_01() || !length_dc_read_reg_784.read().is_01())? sc_lv<1>(): sc_lv<1>(is_idx3_reg_403.read() == length_dc_read_reg_784.read());
}

void predict::thread_exitcond4_fu_654_p2() {
    exitcond4_fu_654_p2 = (!i4_reg_415.read().is_01() || !length_x_read_reg_751.read().is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_415.read() == length_x_read_reg_751.read());
}

void predict::thread_exitcond5_fu_682_p2() {
    exitcond5_fu_682_p2 = (!j5_reg_438.read().is_01() || !length_dc_read_reg_784.read().is_01())? sc_lv<1>(): sc_lv<1>(j5_reg_438.read() == length_dc_read_reg_784.read());
}

void predict::thread_exitcond_fu_583_p2() {
    exitcond_fu_583_p2 = (!is_idx2_1_reg_382.read().is_01() || !indvars_iv_reg_336.read().is_01())? sc_lv<1>(): sc_lv<1>(is_idx2_1_reg_382.read() == indvars_iv_reg_336.read());
}

void predict::thread_grp_fu_494_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_494_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        grp_fu_494_opcode = ap_const_lv2_0;
    } else {
        grp_fu_494_opcode =  (sc_lv<2>) ("XX");
    }
}

void predict::thread_grp_fu_494_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        grp_fu_494_p0 = result_buf_0_reg_426.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_fu_494_p0 = sum_i_reg_460.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_494_p0 = supp_vecs_buf_load_reg_899.read();
    } else {
        grp_fu_494_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void predict::thread_grp_fu_494_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        grp_fu_494_p1 = reg_511.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        grp_fu_494_p1 = input_buf_0_load_reg_904.read();
    } else {
        grp_fu_494_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void predict::thread_grp_fu_500_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        grp_fu_500_p0 = dual_coef_buf_load_reg_876.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_500_p0 = tmp_4_i_reg_909.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_500_p0 = sum_i_reg_460.read();
    } else {
        grp_fu_500_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void predict::thread_grp_fu_500_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        grp_fu_500_p1 = tmp_2_i_reg_920.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_500_p1 = tmp_4_i_reg_909.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        grp_fu_500_p1 = ap_const_lv32_BD4CCCCD;
    } else {
        grp_fu_500_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void predict::thread_i_1_fu_523_p2() {
    i_1_fu_523_p2 = (!i_reg_313.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_reg_313.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void predict::thread_i_2_fu_571_p2() {
    i_2_fu_571_p2 = (!ap_const_lv32_1.is_01() || !i1_reg_348.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(i1_reg_348.read()));
}

void predict::thread_i_4_fu_659_p2() {
    i_4_fu_659_p2 = (!i4_reg_415.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i4_reg_415.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void predict::thread_i_5_fu_709_p2() {
    i_5_fu_709_p2 = (!i_i_reg_472.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_i_reg_472.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void predict::thread_in_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_stream_TDATA_blk_n = in_stream_data_V_0_state.read()[0];
    } else {
        in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void predict::thread_in_stream_TREADY() {
    in_stream_TREADY = in_stream_dest_V_0_state.read()[1];
}

void predict::thread_in_stream_data_V_0_ack_in() {
    in_stream_data_V_0_ack_in = in_stream_data_V_0_state.read()[1];
}

void predict::thread_in_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        in_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_in_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_sel.read())) {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B.read();
    } else {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A.read();
    }
}

void predict::thread_in_stream_data_V_0_load_A() {
    in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full.read() & ~in_stream_data_V_0_sel_wr.read());
}

void predict::thread_in_stream_data_V_0_load_B() {
    in_stream_data_V_0_load_B = (in_stream_data_V_0_sel_wr.read() & in_stream_data_V_0_state_cmp_full.read());
}

void predict::thread_in_stream_data_V_0_sel() {
    in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd.read();
}

void predict::thread_in_stream_data_V_0_state_cmp_full() {
    in_stream_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void predict::thread_in_stream_data_V_0_vld_in() {
    in_stream_data_V_0_vld_in = in_stream_TVALID.read();
}

void predict::thread_in_stream_data_V_0_vld_out() {
    in_stream_data_V_0_vld_out = in_stream_data_V_0_state.read()[0];
}

void predict::thread_in_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        in_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_in_stream_dest_V_0_vld_in() {
    in_stream_dest_V_0_vld_in = in_stream_TVALID.read();
}

void predict::thread_indvars_iv_next_fu_610_p2() {
    indvars_iv_next_fu_610_p2 = (!indvars_iv_reg_336.read().is_01() || !ap_const_lv32_310.is_01())? sc_lv<32>(): (sc_biguint<32>(indvars_iv_reg_336.read()) + sc_biguint<32>(ap_const_lv32_310));
}

void predict::thread_input_buf_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        input_buf_0_address0 =  (sc_lv<10>) (tmp_3_i_fu_715_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_buf_0_address0 =  (sc_lv<10>) (tmp_4_fu_550_p1.read());
    } else {
        input_buf_0_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void predict::thread_input_buf_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        input_buf_0_ce0 = ap_const_logic_1;
    } else {
        input_buf_0_ce0 = ap_const_logic_0;
    }
}

void predict::thread_input_buf_0_d0() {
    input_buf_0_d0 = in_stream_data_V_0_data_out.read();
}

void predict::thread_input_buf_0_we0() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        input_buf_0_we0 = ap_const_logic_1;
    } else {
        input_buf_0_we0 = ap_const_logic_0;
    }
}

void predict::thread_is_idx2_2_fu_577_p2() {
    is_idx2_2_fu_577_p2 = (!is_idx2_reg_359.read().is_01() || !ap_const_lv32_310.is_01())? sc_lv<32>(): (sc_biguint<32>(is_idx2_reg_359.read()) + sc_biguint<32>(ap_const_lv32_310));
}

void predict::thread_is_idx3_2_fu_634_p2() {
    is_idx3_2_fu_634_p2 = (!is_idx3_reg_403.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(is_idx3_reg_403.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void predict::thread_j_1_fu_535_p2() {
    j_1_fu_535_p2 = (!j_reg_324.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_324.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void predict::thread_j_2_fu_589_p2() {
    j_2_fu_589_p2 = (!j2_reg_392.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j2_reg_392.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void predict::thread_j_4_fu_687_p2() {
    j_4_fu_687_p2 = (!ap_const_lv32_1.is_01() || !j5_reg_438.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_bigint<32>(j5_reg_438.read()));
}

void predict::thread_last_assign_fu_745_p2() {
    last_assign_fu_745_p2 = (!os_idx_2_fu_739_p2.read().is_01() || !length_x_read_reg_751.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_2_fu_739_p2.read() == length_x_read_reg_751.read());
}

void predict::thread_next_mul2_fu_676_p2() {
    next_mul2_fu_676_p2 = (!ap_const_lv42_310.is_01() || !phi_mul1_reg_449.read().is_01())? sc_lv<42>(): (sc_biguint<42>(ap_const_lv42_310) + sc_biguint<42>(phi_mul1_reg_449.read()));
}

void predict::thread_next_mul_fu_559_p2() {
    next_mul_fu_559_p2 = (!ap_const_lv64_310.is_01() || !phi_mul_reg_371.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_310) + sc_biguint<64>(phi_mul_reg_371.read()));
}

void predict::thread_os_idx_2_fu_739_p2() {
    os_idx_2_fu_739_p2 = (!os_idx_reg_483.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(os_idx_reg_483.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void predict::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_data_V_1_data_out.read();
}

void predict::thread_out_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        out_stream_TDATA_blk_n = out_stream_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void predict::thread_out_stream_TDEST() {
    out_stream_TDEST = out_stream_dest_V_1_data_out.read();
}

void predict::thread_out_stream_TID() {
    out_stream_TID = out_stream_id_V_1_data_out.read();
}

void predict::thread_out_stream_TKEEP() {
    out_stream_TKEEP = out_stream_keep_V_1_data_out.read();
}

void predict::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_last_V_1_data_out.read();
}

void predict::thread_out_stream_TSTRB() {
    out_stream_TSTRB = out_stream_strb_V_1_data_out.read();
}

void predict::thread_out_stream_TUSER() {
    out_stream_TUSER = out_stream_user_V_1_data_out.read();
}

void predict::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_dest_V_1_state.read()[0];
}

void predict::thread_out_stream_data_V_1_ack_in() {
    out_stream_data_V_1_ack_in = out_stream_data_V_1_state.read()[1];
}

void predict::thread_out_stream_data_V_1_ack_out() {
    out_stream_data_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_sel.read())) {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B.read();
    } else {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A.read();
    }
}

void predict::thread_out_stream_data_V_1_load_A() {
    out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full.read() & ~out_stream_data_V_1_sel_wr.read());
}

void predict::thread_out_stream_data_V_1_load_B() {
    out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr.read() & out_stream_data_V_1_state_cmp_full.read());
}

void predict::thread_out_stream_data_V_1_sel() {
    out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd.read();
}

void predict::thread_out_stream_data_V_1_state_cmp_full() {
    out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void predict::thread_out_stream_data_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_data_V_1_vld_out() {
    out_stream_data_V_1_vld_out = out_stream_data_V_1_state.read()[0];
}

void predict::thread_out_stream_dest_V_1_ack_in() {
    out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state.read()[1];
}

void predict::thread_out_stream_dest_V_1_ack_out() {
    out_stream_dest_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_dest_V_1_data_out() {
    out_stream_dest_V_1_data_out = ap_const_lv5_0;
}

void predict::thread_out_stream_dest_V_1_sel() {
    out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd.read();
}

void predict::thread_out_stream_dest_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_dest_V_1_vld_out() {
    out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state.read()[0];
}

void predict::thread_out_stream_id_V_1_ack_in() {
    out_stream_id_V_1_ack_in = out_stream_id_V_1_state.read()[1];
}

void predict::thread_out_stream_id_V_1_ack_out() {
    out_stream_id_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_id_V_1_data_out() {
    out_stream_id_V_1_data_out = ap_const_lv5_0;
}

void predict::thread_out_stream_id_V_1_sel() {
    out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd.read();
}

void predict::thread_out_stream_id_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_id_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_id_V_1_vld_out() {
    out_stream_id_V_1_vld_out = out_stream_id_V_1_state.read()[0];
}

void predict::thread_out_stream_keep_V_1_ack_in() {
    out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state.read()[1];
}

void predict::thread_out_stream_keep_V_1_ack_out() {
    out_stream_keep_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_keep_V_1_data_out() {
    out_stream_keep_V_1_data_out = ap_const_lv4_F;
}

void predict::thread_out_stream_keep_V_1_sel() {
    out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd.read();
}

void predict::thread_out_stream_keep_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_keep_V_1_vld_out() {
    out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state.read()[0];
}

void predict::thread_out_stream_last_V_1_ack_in() {
    out_stream_last_V_1_ack_in = out_stream_last_V_1_state.read()[1];
}

void predict::thread_out_stream_last_V_1_ack_out() {
    out_stream_last_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_sel.read())) {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B.read();
    } else {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A.read();
    }
}

void predict::thread_out_stream_last_V_1_load_A() {
    out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full.read() & ~out_stream_last_V_1_sel_wr.read());
}

void predict::thread_out_stream_last_V_1_load_B() {
    out_stream_last_V_1_load_B = (out_stream_last_V_1_sel_wr.read() & out_stream_last_V_1_state_cmp_full.read());
}

void predict::thread_out_stream_last_V_1_sel() {
    out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd.read();
}

void predict::thread_out_stream_last_V_1_state_cmp_full() {
    out_stream_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void predict::thread_out_stream_last_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_last_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_last_V_1_vld_out() {
    out_stream_last_V_1_vld_out = out_stream_last_V_1_state.read()[0];
}

void predict::thread_out_stream_strb_V_1_ack_in() {
    out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state.read()[1];
}

void predict::thread_out_stream_strb_V_1_ack_out() {
    out_stream_strb_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_strb_V_1_data_out() {
    out_stream_strb_V_1_data_out = ap_const_lv4_F;
}

void predict::thread_out_stream_strb_V_1_sel() {
    out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd.read();
}

void predict::thread_out_stream_strb_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_strb_V_1_vld_out() {
    out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state.read()[0];
}

void predict::thread_out_stream_user_V_1_ack_in() {
    out_stream_user_V_1_ack_in = out_stream_user_V_1_state.read()[1];
}

void predict::thread_out_stream_user_V_1_ack_out() {
    out_stream_user_V_1_ack_out = out_stream_TREADY.read();
}

void predict::thread_out_stream_user_V_1_data_out() {
    out_stream_user_V_1_data_out = ap_const_lv4_0;
}

void predict::thread_out_stream_user_V_1_sel() {
    out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd.read();
}

void predict::thread_out_stream_user_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        out_stream_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_user_V_1_vld_in = ap_const_logic_0;
    }
}

void predict::thread_out_stream_user_V_1_vld_out() {
    out_stream_user_V_1_vld_out = out_stream_user_V_1_state.read()[0];
}

void predict::thread_supp_vec_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        supp_vec_stream_TDATA_blk_n = supp_vec_stream_data_V_0_state.read()[0];
    } else {
        supp_vec_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void predict::thread_supp_vec_stream_TREADY() {
    supp_vec_stream_TREADY = supp_vec_stream_dest_V_0_state.read()[1];
}

void predict::thread_supp_vec_stream_data_V_0_ack_in() {
    supp_vec_stream_data_V_0_ack_in = supp_vec_stream_data_V_0_state.read()[1];
}

void predict::thread_supp_vec_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        supp_vec_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        supp_vec_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_supp_vec_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, supp_vec_stream_data_V_0_sel.read())) {
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_B.read();
    } else {
        supp_vec_stream_data_V_0_data_out = supp_vec_stream_data_V_0_payload_A.read();
    }
}

void predict::thread_supp_vec_stream_data_V_0_load_A() {
    supp_vec_stream_data_V_0_load_A = (supp_vec_stream_data_V_0_state_cmp_full.read() & ~supp_vec_stream_data_V_0_sel_wr.read());
}

void predict::thread_supp_vec_stream_data_V_0_load_B() {
    supp_vec_stream_data_V_0_load_B = (supp_vec_stream_data_V_0_sel_wr.read() & supp_vec_stream_data_V_0_state_cmp_full.read());
}

void predict::thread_supp_vec_stream_data_V_0_sel() {
    supp_vec_stream_data_V_0_sel = supp_vec_stream_data_V_0_sel_rd.read();
}

void predict::thread_supp_vec_stream_data_V_0_state_cmp_full() {
    supp_vec_stream_data_V_0_state_cmp_full =  (sc_logic) ((!supp_vec_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(supp_vec_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void predict::thread_supp_vec_stream_data_V_0_vld_in() {
    supp_vec_stream_data_V_0_vld_in = supp_vec_stream_TVALID.read();
}

void predict::thread_supp_vec_stream_data_V_0_vld_out() {
    supp_vec_stream_data_V_0_vld_out = supp_vec_stream_data_V_0_state.read()[0];
}

void predict::thread_supp_vec_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        supp_vec_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        supp_vec_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void predict::thread_supp_vec_stream_dest_V_0_vld_in() {
    supp_vec_stream_dest_V_0_vld_in = supp_vec_stream_TVALID.read();
}

void predict::thread_supp_vecs_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        supp_vecs_buf_address0 =  (sc_lv<13>) (tmp_15_cast_fu_729_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        supp_vecs_buf_address0 =  (sc_lv<13>) (tmp_13_cast_fu_625_p1.read());
    } else {
        supp_vecs_buf_address0 =  (sc_lv<13>) ("XXXXXXXXXXXXX");
    }
}

void predict::thread_supp_vecs_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        supp_vecs_buf_ce0 = ap_const_logic_1;
    } else {
        supp_vecs_buf_ce0 = ap_const_logic_0;
    }
}

void predict::thread_supp_vecs_buf_d0() {
    supp_vecs_buf_d0 = supp_vec_stream_data_V_0_data_out.read();
}

void predict::thread_supp_vecs_buf_we0() {
    if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        supp_vecs_buf_we0 = ap_const_logic_1;
    } else {
        supp_vecs_buf_we0 = ap_const_logic_0;
    }
}

void predict::thread_tmp_10_fu_698_p1() {
    tmp_10_fu_698_p1 = esl_sext<64,32>(j5_reg_438.read());
}

void predict::thread_tmp_12_fu_672_p1() {
    tmp_12_fu_672_p1 = phi_mul1_reg_449.read().range(14-1, 0);
}

void predict::thread_tmp_13_cast_fu_625_p1() {
    tmp_13_cast_fu_625_p1 = esl_zext<64,14>(tmp_5_reg_816.read());
}

void predict::thread_tmp_13_fu_724_p2() {
    tmp_13_fu_724_p2 = (!tmp_12_reg_853.read().is_01() || !tmp_3_i_cast_fu_720_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_12_reg_853.read()) + sc_biguint<14>(tmp_3_i_cast_fu_720_p1.read()));
}

void predict::thread_tmp_15_cast_fu_729_p1() {
    tmp_15_cast_fu_729_p1 = esl_zext<64,14>(tmp_13_fu_724_p2.read());
}

void predict::thread_tmp_1_fu_565_p2() {
    tmp_1_fu_565_p2 = (!i1_reg_348.read().is_01() || !length_dc.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i1_reg_348.read()) < sc_biguint<32>(length_dc.read()));
}

void predict::thread_tmp_3_cast_fu_601_p1() {
    tmp_3_cast_fu_601_p1 = esl_zext<14,10>(j2_reg_392.read());
}

void predict::thread_tmp_3_fu_555_p1() {
    tmp_3_fu_555_p1 = phi_mul_reg_371.read().range(14-1, 0);
}

void predict::thread_tmp_3_i_cast_fu_720_p1() {
    tmp_3_i_cast_fu_720_p1 = esl_zext<14,10>(i_i_reg_472.read());
}

void predict::thread_tmp_3_i_fu_715_p1() {
    tmp_3_i_fu_715_p1 = esl_zext<64,10>(i_i_reg_472.read());
}

void predict::thread_tmp_4_fu_550_p1() {
    tmp_4_fu_550_p1 = esl_zext<64,10>(j_reg_324.read());
}

void predict::thread_tmp_5_fu_605_p2() {
    tmp_5_fu_605_p2 = (!tmp_3_reg_774.read().is_01() || !tmp_3_cast_fu_601_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_3_reg_774.read()) + sc_biguint<14>(tmp_3_cast_fu_601_p1.read()));
}

void predict::thread_tmp_7_fu_595_p2() {
    tmp_7_fu_595_p2 = (!is_idx2_1_reg_382.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(is_idx2_1_reg_382.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void predict::thread_tmp_8_fu_517_p2() {
    tmp_8_fu_517_p2 = (!i_reg_313.read().is_01() || !length_x.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_reg_313.read()) < sc_biguint<32>(length_x.read()));
}

void predict::thread_tmp_9_fu_640_p1() {
    tmp_9_fu_640_p1 = esl_sext<64,32>(is_idx3_reg_403.read());
}

void predict::thread_tmp_fu_668_p1() {
    tmp_fu_668_p1 = result_buf_0_1_fu_156.read();
}

void predict::thread_tmp_i_fu_703_p2() {
    tmp_i_fu_703_p2 = (!i_i_reg_472.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_472.read() == ap_const_lv10_310);
}

void predict::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_8_fu_517_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_529_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(tmp_1_fu_565_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_583_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(supp_vec_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_629_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(dual_coef_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(exitcond4_fu_654_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state50;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(exitcond5_fu_682_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(tmp_i_fu_703_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 562949953421312 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state50_io.read()) || esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond2_fu_734_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
                ap_NS_fsm = ap_ST_fsm_state51;
            } else {
                ap_NS_fsm = ap_ST_fsm_state50;
            }
            break;
        case 1125899906842624 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state50;
            } else {
                ap_NS_fsm = ap_ST_fsm_state51;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<51>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void predict::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDATA\" :  \"" << in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TVALID\" :  \"" << in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_stream_TREADY\" :  \"" << in_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TKEEP\" :  \"" << in_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TSTRB\" :  \"" << in_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TUSER\" :  \"" << in_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TLAST\" :  \"" << in_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TID\" :  \"" << in_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDEST\" :  \"" << in_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TDATA\" :  \"" << supp_vec_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TVALID\" :  \"" << supp_vec_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"supp_vec_stream_TREADY\" :  \"" << supp_vec_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TKEEP\" :  \"" << supp_vec_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TSTRB\" :  \"" << supp_vec_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TUSER\" :  \"" << supp_vec_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TLAST\" :  \"" << supp_vec_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TID\" :  \"" << supp_vec_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"supp_vec_stream_TDEST\" :  \"" << supp_vec_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TDATA\" :  \"" << dual_coef_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TVALID\" :  \"" << dual_coef_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dual_coef_stream_TREADY\" :  \"" << dual_coef_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TKEEP\" :  \"" << dual_coef_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TSTRB\" :  \"" << dual_coef_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TUSER\" :  \"" << dual_coef_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TLAST\" :  \"" << dual_coef_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TID\" :  \"" << dual_coef_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dual_coef_stream_TDEST\" :  \"" << dual_coef_stream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDATA\" :  \"" << out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TVALID\" :  \"" << out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_TREADY\" :  \"" << out_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TKEEP\" :  \"" << out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TSTRB\" :  \"" << out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TUSER\" :  \"" << out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TLAST\" :  \"" << out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TID\" :  \"" << out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDEST\" :  \"" << out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

