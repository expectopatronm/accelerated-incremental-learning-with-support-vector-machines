-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_matrix is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel_matrix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_matrix,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.684000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=13,HLS_SYN_FF=1880,HLS_SYN_LUT=42137,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv42_0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_BD4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "10111101010011001100110011001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_310 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv42_310 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001100010000";
    constant ap_const_lv18_310 : STD_LOGIC_VECTOR (17 downto 0) := "000000001100010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel : STD_LOGIC;
    signal in_stream_data_V_0_load_A : STD_LOGIC;
    signal in_stream_data_V_0_load_B : STD_LOGIC;
    signal in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_stream_dest_V_0_vld_in : STD_LOGIC;
    signal in_stream_dest_V_0_ack_out : STD_LOGIC;
    signal in_stream_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_vld_in : STD_LOGIC;
    signal out_stream_data_V_1_vld_out : STD_LOGIC;
    signal out_stream_data_V_1_ack_in : STD_LOGIC;
    signal out_stream_data_V_1_ack_out : STD_LOGIC;
    signal out_stream_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_data_V_1_sel : STD_LOGIC;
    signal out_stream_data_V_1_load_A : STD_LOGIC;
    signal out_stream_data_V_1_load_B : STD_LOGIC;
    signal out_stream_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_keep_V_1_vld_in : STD_LOGIC;
    signal out_stream_keep_V_1_vld_out : STD_LOGIC;
    signal out_stream_keep_V_1_ack_in : STD_LOGIC;
    signal out_stream_keep_V_1_ack_out : STD_LOGIC;
    signal out_stream_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_keep_V_1_sel : STD_LOGIC;
    signal out_stream_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_strb_V_1_vld_in : STD_LOGIC;
    signal out_stream_strb_V_1_vld_out : STD_LOGIC;
    signal out_stream_strb_V_1_ack_in : STD_LOGIC;
    signal out_stream_strb_V_1_ack_out : STD_LOGIC;
    signal out_stream_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_strb_V_1_sel : STD_LOGIC;
    signal out_stream_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_stream_user_V_1_vld_in : STD_LOGIC;
    signal out_stream_user_V_1_vld_out : STD_LOGIC;
    signal out_stream_user_V_1_ack_in : STD_LOGIC;
    signal out_stream_user_V_1_ack_out : STD_LOGIC;
    signal out_stream_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_user_V_1_sel : STD_LOGIC;
    signal out_stream_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_last_V_1_sel : STD_LOGIC;
    signal out_stream_last_V_1_load_A : STD_LOGIC;
    signal out_stream_last_V_1_load_B : STD_LOGIC;
    signal out_stream_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_stream_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_id_V_1_vld_in : STD_LOGIC;
    signal out_stream_id_V_1_vld_out : STD_LOGIC;
    signal out_stream_id_V_1_ack_in : STD_LOGIC;
    signal out_stream_id_V_1_ack_out : STD_LOGIC;
    signal out_stream_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_id_V_1_sel : STD_LOGIC;
    signal out_stream_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal out_stream_dest_V_1_vld_in : STD_LOGIC;
    signal out_stream_dest_V_1_vld_out : STD_LOGIC;
    signal out_stream_dest_V_1_ack_in : STD_LOGIC;
    signal out_stream_dest_V_1_ack_out : STD_LOGIC;
    signal out_stream_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_dest_V_1_sel : STD_LOGIC;
    signal out_stream_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal my_index : STD_LOGIC_VECTOR (31 downto 0);
    signal my_index_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal my_index_0_vld_reg : STD_LOGIC := '0';
    signal my_index_0_ack_out : STD_LOGIC;
    signal length_x : STD_LOGIC_VECTOR (31 downto 0);
    signal length_x_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal length_x_0_vld_reg : STD_LOGIC := '0';
    signal length_x_0_ack_out : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_3_fu_414_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_611 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal next_mul_fu_418_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal length_x_read_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_reg_639 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_10_fu_452_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_reg_644 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_605_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_reg_649 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_2_fu_480_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_reg_657 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_505_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_reg_667 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal next_mul2_fu_509_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal next_mul2_reg_672 : STD_LOGIC_VECTOR (41 downto 0);
    signal i_3_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_536_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_reg_693 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_567_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_i_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_buf_load_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal temp2_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_buf_load_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal os_idx_2_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal os_idx_2_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_state41 : BOOLEAN;
    signal exitcond3_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_buf_ce0 : STD_LOGIC;
    signal input_buf_we0 : STD_LOGIC;
    signal input_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_buf_ce0 : STD_LOGIC;
    signal temp_buf_we0 : STD_LOGIC;
    signal temp2_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp2_buf_ce0 : STD_LOGIC;
    signal temp2_buf_we0 : STD_LOGIC;
    signal result_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_buf_ce0 : STD_LOGIC;
    signal result_buf_we0 : STD_LOGIC;
    signal result_buf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_301 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_reg_312 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i2_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal phi_mul1_reg_335 : STD_LOGIC_VECTOR (41 downto 0);
    signal j3_reg_346 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sum_i_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_370 : STD_LOGIC_VECTOR (9 downto 0);
    signal os_idx_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_397_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_3_cast_fu_448_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_cast_fu_486_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_490_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_11_fu_490_p2 : signal is "no";
    signal tmp_1_cast_fu_542_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_fu_546_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_605_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_605_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_392_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component kernel_matrix_fadfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_fmug8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_fexhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component kernel_matrix_inpbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_temcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_reseOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_matrix_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        my_index : OUT STD_LOGIC_VECTOR (31 downto 0);
        length_x : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    kernel_matrix_CONTROL_BUS_s_axi_U : component kernel_matrix_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        my_index => my_index,
        length_x => length_x);

    input_buf_U : component kernel_matrix_inpbkb
    generic map (
        DataWidth => 32,
        AddressRange => 78400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_buf_address0,
        ce0 => input_buf_ce0,
        we0 => input_buf_we0,
        d0 => input_buf_d0,
        q0 => input_buf_q0);

    temp_buf_U : component kernel_matrix_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_buf_address0,
        ce0 => temp_buf_ce0,
        we0 => temp_buf_we0,
        d0 => input_buf_q0,
        q0 => temp_buf_q0);

    temp2_buf_U : component kernel_matrix_temcud
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp2_buf_address0,
        ce0 => temp2_buf_ce0,
        we0 => temp2_buf_we0,
        d0 => input_buf_q0,
        q0 => temp2_buf_q0);

    result_buf_U : component kernel_matrix_reseOg
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_buf_address0,
        ce0 => result_buf_ce0,
        we0 => result_buf_we0,
        d0 => tmp_2_i_reg_742,
        q0 => result_buf_q0);

    kernel_matrix_fadfYi_U1 : component kernel_matrix_fadfYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        opcode => grp_fu_392_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    kernel_matrix_fmug8j_U2 : component kernel_matrix_fmug8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_397_p0,
        din1 => grp_fu_397_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p2);

    kernel_matrix_fexhbi_U3 : component kernel_matrix_fexhbi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => reg_408,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    kernel_matrix_mulibs_U4 : component kernel_matrix_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_s_fu_605_p0,
        din1 => tmp_s_fu_605_p1,
        dout => tmp_s_fu_605_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_out = ap_const_logic_1) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_rd <= not(in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_in = ap_const_logic_1) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_wr <= not(in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif ((((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_1)) or (not(((in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) and (in_stream_data_V_0_state = ap_const_lv2_3)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_dest_V_0_state = ap_const_lv2_2) and (in_stream_dest_V_0_vld_in = ap_const_logic_0)) or ((in_stream_dest_V_0_state = ap_const_lv2_3) and (in_stream_dest_V_0_vld_in = ap_const_logic_0) and (in_stream_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_dest_V_0_state = ap_const_lv2_1) and (in_stream_dest_V_0_ack_out = ap_const_logic_0)) or ((in_stream_dest_V_0_state = ap_const_lv2_3) and (in_stream_dest_V_0_ack_out = ap_const_logic_0) and (in_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_dest_V_0_vld_in = ap_const_logic_0) and (in_stream_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_dest_V_0_ack_out = ap_const_logic_0) and (in_stream_dest_V_0_vld_in = ap_const_logic_1))) and (in_stream_dest_V_0_state = ap_const_lv2_3)) or ((in_stream_dest_V_0_state = ap_const_lv2_1) and (in_stream_dest_V_0_ack_out = ap_const_logic_1)) or ((in_stream_dest_V_0_state = ap_const_lv2_2) and (in_stream_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_out = ap_const_logic_1) and (out_stream_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_rd <= not(out_stream_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_data_V_1_sel_wr <= not(out_stream_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_0)) or ((out_stream_data_V_1_state = ap_const_lv2_3) and (out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_data_V_1_vld_in = ap_const_logic_0) and (out_stream_data_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_data_V_1_ack_out = ap_const_logic_0) and (out_stream_data_V_1_vld_in = ap_const_logic_1))) and (out_stream_data_V_1_state = ap_const_lv2_3)) or ((out_stream_data_V_1_state = ap_const_lv2_1) and (out_stream_data_V_1_ack_out = ap_const_logic_1)) or ((out_stream_data_V_1_state = ap_const_lv2_2) and (out_stream_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_dest_V_1_ack_out = ap_const_logic_1) and (out_stream_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_dest_V_1_sel_rd <= not(out_stream_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_0)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_dest_V_1_state = ap_const_lv2_1) and (out_stream_dest_V_1_ack_out = ap_const_logic_0)) or ((out_stream_dest_V_1_state = ap_const_lv2_3) and (out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_dest_V_1_vld_in = ap_const_logic_0) and (out_stream_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_dest_V_1_ack_out = ap_const_logic_0) and (out_stream_dest_V_1_vld_in = ap_const_logic_1))) and (out_stream_dest_V_1_state = ap_const_lv2_3)) or ((out_stream_dest_V_1_state = ap_const_lv2_1) and (out_stream_dest_V_1_ack_out = ap_const_logic_1)) or ((out_stream_dest_V_1_state = ap_const_lv2_2) and (out_stream_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_id_V_1_ack_out = ap_const_logic_1) and (out_stream_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_id_V_1_sel_rd <= not(out_stream_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_0)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_id_V_1_state = ap_const_lv2_1) and (out_stream_id_V_1_ack_out = ap_const_logic_0)) or ((out_stream_id_V_1_state = ap_const_lv2_3) and (out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_id_V_1_vld_in = ap_const_logic_0) and (out_stream_id_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_id_V_1_ack_out = ap_const_logic_0) and (out_stream_id_V_1_vld_in = ap_const_logic_1))) and (out_stream_id_V_1_state = ap_const_lv2_3)) or ((out_stream_id_V_1_state = ap_const_lv2_1) and (out_stream_id_V_1_ack_out = ap_const_logic_1)) or ((out_stream_id_V_1_state = ap_const_lv2_2) and (out_stream_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_keep_V_1_ack_out = ap_const_logic_1) and (out_stream_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_keep_V_1_sel_rd <= not(out_stream_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_0)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_keep_V_1_state = ap_const_lv2_1) and (out_stream_keep_V_1_ack_out = ap_const_logic_0)) or ((out_stream_keep_V_1_state = ap_const_lv2_3) and (out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_keep_V_1_vld_in = ap_const_logic_0) and (out_stream_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_keep_V_1_ack_out = ap_const_logic_0) and (out_stream_keep_V_1_vld_in = ap_const_logic_1))) and (out_stream_keep_V_1_state = ap_const_lv2_3)) or ((out_stream_keep_V_1_state = ap_const_lv2_1) and (out_stream_keep_V_1_ack_out = ap_const_logic_1)) or ((out_stream_keep_V_1_state = ap_const_lv2_2) and (out_stream_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_out = ap_const_logic_1) and (out_stream_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_rd <= not(out_stream_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_last_V_1_ack_in = ap_const_logic_1) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_last_V_1_sel_wr <= not(out_stream_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_0)) or ((out_stream_last_V_1_state = ap_const_lv2_3) and (out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_last_V_1_vld_in = ap_const_logic_0) and (out_stream_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_last_V_1_ack_out = ap_const_logic_0) and (out_stream_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_last_V_1_state = ap_const_lv2_3)) or ((out_stream_last_V_1_state = ap_const_lv2_1) and (out_stream_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_last_V_1_state = ap_const_lv2_2) and (out_stream_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_strb_V_1_ack_out = ap_const_logic_1) and (out_stream_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_strb_V_1_sel_rd <= not(out_stream_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_0)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_strb_V_1_state = ap_const_lv2_1) and (out_stream_strb_V_1_ack_out = ap_const_logic_0)) or ((out_stream_strb_V_1_state = ap_const_lv2_3) and (out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_strb_V_1_vld_in = ap_const_logic_0) and (out_stream_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_strb_V_1_ack_out = ap_const_logic_0) and (out_stream_strb_V_1_vld_in = ap_const_logic_1))) and (out_stream_strb_V_1_state = ap_const_lv2_3)) or ((out_stream_strb_V_1_state = ap_const_lv2_1) and (out_stream_strb_V_1_ack_out = ap_const_logic_1)) or ((out_stream_strb_V_1_state = ap_const_lv2_2) and (out_stream_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_user_V_1_ack_out = ap_const_logic_1) and (out_stream_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_user_V_1_sel_rd <= not(out_stream_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_0)) or ((out_stream_user_V_1_state = ap_const_lv2_3) and (out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_user_V_1_vld_in = ap_const_logic_0) and (out_stream_user_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_user_V_1_ack_out = ap_const_logic_0) and (out_stream_user_V_1_vld_in = ap_const_logic_1))) and (out_stream_user_V_1_state = ap_const_lv2_3)) or ((out_stream_user_V_1_state = ap_const_lv2_1) and (out_stream_user_V_1_ack_out = ap_const_logic_1)) or ((out_stream_user_V_1_state = ap_const_lv2_2) and (out_stream_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i2_reg_324 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i2_reg_324 <= i_3_reg_680;
            end if; 
        end if;
    end process;

    i_i_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_i_reg_370 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_i_reg_370 <= i_4_reg_706;
            end if; 
        end if;
    end process;

    i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_279 <= i_1_reg_631;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_279 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j1_reg_312 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j1_reg_312 <= j_2_reg_657;
            end if; 
        end if;
    end process;

    j3_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j3_reg_346 <= j_3_reg_693;
            elsif (((exitcond6_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j3_reg_346 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_301 <= j_1_reg_639;
            elsif (((tmp_8_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_301 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    length_x_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    my_index_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    os_idx_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                os_idx_reg_381 <= ap_const_lv32_0;
            elsif (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                os_idx_reg_381 <= os_idx_2_reg_750;
            end if; 
        end if;
    end process;

    phi_mul1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul1_reg_335 <= ap_const_lv42_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                phi_mul1_reg_335 <= next_mul2_reg_672;
            end if; 
        end if;
    end process;

    phi_mul_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_290 <= next_mul_reg_616;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_290 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    sum_i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                sum_i_reg_358 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                sum_i_reg_358 <= grp_fu_392_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_631 <= i_1_fu_430_p2;
                length_x_read_reg_621 <= length_x_0_data_reg;
                next_mul_reg_616 <= next_mul_fu_418_p2;
                tmp_3_reg_611 <= tmp_3_fu_414_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_3_reg_680 <= i_3_fu_520_p2;
                next_mul2_reg_672 <= next_mul2_fu_509_p2;
                tmp_12_reg_667 <= tmp_12_fu_505_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_4_reg_706 <= i_4_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_A = ap_const_logic_1)) then
                in_stream_data_V_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_B = ap_const_logic_1)) then
                in_stream_data_V_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_639 <= j_1_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_2_reg_657 <= j_2_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_3_reg_693 <= j_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                last_assign_reg_760 <= last_assign_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_x_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (length_x_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (length_x_0_vld_reg = ap_const_logic_1)))) then
                length_x_0_data_reg <= length_x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (my_index_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (my_index_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (my_index_0_vld_reg = ap_const_logic_1)))) then
                my_index_0_data_reg <= my_index;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                os_idx_2_reg_750 <= os_idx_2_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_A = ap_const_logic_1)) then
                out_stream_data_V_1_payload_A <= tmp_fu_600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_data_V_1_load_B = ap_const_logic_1)) then
                out_stream_data_V_1_payload_B <= tmp_fu_600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_last_V_1_payload_A <= last_assign_reg_760;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_last_V_1_payload_B <= last_assign_reg_760;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_408 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                temp2_buf_load_reg_726 <= temp2_buf_q0;
                temp_buf_load_reg_721 <= temp_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_10_reg_644 <= tmp_10_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_2_i_reg_742 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_4_i_reg_731 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_7_reg_685 <= tmp_7_fu_526_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_s_reg_649 <= tmp_s_fu_605_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_stream_data_V_0_vld_out, out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state5, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_436_p2, ap_CS_fsm_state7, exitcond1_fu_474_p2, ap_CS_fsm_state9, exitcond6_fu_515_p2, ap_CS_fsm_state10, exitcond_fu_530_p2, ap_CS_fsm_state12, tmp_i_fu_561_p2, ap_CS_fsm_state41, exitcond3_fu_579_p2, tmp_8_fu_424_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_8_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((exitcond1_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((exitcond6_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((tmp_i_fu_561_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state41 => 
                if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state41_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in)
    begin
                ap_block_state41 <= ((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state41, exitcond3_fu_579_p2)
    begin
        if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state41, exitcond3_fu_579_p2)
    begin
        if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_474_p2 <= "1" when (j1_reg_312 = ap_const_lv10_310) else "0";
    exitcond2_fu_436_p2 <= "1" when (j_reg_301 = ap_const_lv10_310) else "0";
    exitcond3_fu_579_p2 <= "1" when (os_idx_reg_381 = length_x_read_reg_621) else "0";
    exitcond6_fu_515_p2 <= "1" when (i2_reg_324 = length_x_read_reg_621) else "0";
    exitcond_fu_530_p2 <= "1" when (j3_reg_346 = ap_const_lv10_310) else "0";

    grp_fu_392_opcode_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_392_opcode <= ap_const_lv2_0;
        else 
            grp_fu_392_opcode <= "XX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(temp_buf_load_reg_721, sum_i_reg_358, ap_CS_fsm_state14, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_392_p0 <= sum_i_reg_358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_p0 <= temp_buf_load_reg_721;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(reg_408, temp2_buf_load_reg_726, ap_CS_fsm_state14, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_392_p1 <= reg_408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_392_p1 <= temp2_buf_load_reg_726;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p0_assign_proc : process(ap_CS_fsm_state12, tmp_4_i_reg_731, sum_i_reg_358, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_397_p0 <= tmp_4_i_reg_731;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_397_p0 <= sum_i_reg_358;
        else 
            grp_fu_397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p1_assign_proc : process(ap_CS_fsm_state12, tmp_4_i_reg_731, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_397_p1 <= tmp_4_i_reg_731;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_397_p1 <= ap_const_lv32_BD4CCCCD;
        else 
            grp_fu_397_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_reg_279));
    i_3_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i2_reg_324));
    i_4_fu_567_p2 <= std_logic_vector(unsigned(i_i_reg_370) + unsigned(ap_const_lv10_1));

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_data_V_0_state, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_stream_TDATA_blk_n <= in_stream_data_V_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_dest_V_0_state(1);
    in_stream_data_V_0_ack_in <= in_stream_data_V_0_state(1);

    in_stream_data_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_V_0_data_out_assign_proc : process(in_stream_data_V_0_payload_A, in_stream_data_V_0_payload_B, in_stream_data_V_0_sel)
    begin
        if ((in_stream_data_V_0_sel = ap_const_logic_1)) then 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_B;
        else 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_data_V_0_load_A <= (in_stream_data_V_0_state_cmp_full and not(in_stream_data_V_0_sel_wr));
    in_stream_data_V_0_load_B <= (in_stream_data_V_0_state_cmp_full and in_stream_data_V_0_sel_wr);
    in_stream_data_V_0_sel <= in_stream_data_V_0_sel_rd;
    in_stream_data_V_0_state_cmp_full <= '0' when (in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_data_V_0_vld_in <= in_stream_TVALID;
    in_stream_data_V_0_vld_out <= in_stream_data_V_0_state(0);

    in_stream_dest_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            in_stream_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_dest_V_0_vld_in <= in_stream_TVALID;

    input_buf_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_12_cast_fu_466_p1, tmp_13_cast_fu_495_p1, tmp_15_cast_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_buf_address0 <= tmp_15_cast_fu_551_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_buf_address0 <= tmp_13_cast_fu_495_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_buf_address0 <= tmp_12_cast_fu_466_p1(17 - 1 downto 0);
        else 
            input_buf_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_buf_ce0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            input_buf_ce0 <= ap_const_logic_1;
        else 
            input_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_d0 <= in_stream_data_V_0_data_out;

    input_buf_we0_assign_proc : process(in_stream_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((in_stream_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_buf_we0 <= ap_const_logic_1;
        else 
            input_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_442_p2 <= std_logic_vector(unsigned(j_reg_301) + unsigned(ap_const_lv10_1));
    j_2_fu_480_p2 <= std_logic_vector(unsigned(j1_reg_312) + unsigned(ap_const_lv10_1));
    j_3_fu_536_p2 <= std_logic_vector(unsigned(j3_reg_346) + unsigned(ap_const_lv10_1));
    last_assign_fu_595_p2 <= "1" when (os_idx_2_fu_584_p2 = length_x_read_reg_621) else "0";

    length_x_0_ack_out_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state41, exitcond3_fu_579_p2)
    begin
        if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            length_x_0_ack_out <= ap_const_logic_1;
        else 
            length_x_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    my_index_0_ack_out_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state41, exitcond3_fu_579_p2)
    begin
        if ((not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (exitcond3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            my_index_0_ack_out <= ap_const_logic_1;
        else 
            my_index_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv42_310) + unsigned(phi_mul1_reg_335));
    next_mul_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv64_310) + unsigned(phi_mul_reg_290));
    os_idx_2_fu_584_p2 <= std_logic_vector(signed(os_idx_reg_381) + signed(ap_const_lv32_1));
    out_stream_TDATA <= out_stream_data_V_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_data_V_1_state, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_TDATA_blk_n <= out_stream_data_V_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= out_stream_dest_V_1_data_out;
    out_stream_TID <= out_stream_id_V_1_data_out;
    out_stream_TKEEP <= out_stream_keep_V_1_data_out;
    out_stream_TLAST <= out_stream_last_V_1_data_out;
    out_stream_TSTRB <= out_stream_strb_V_1_data_out;
    out_stream_TUSER <= out_stream_user_V_1_data_out;
    out_stream_TVALID <= out_stream_dest_V_1_state(0);
    out_stream_data_V_1_ack_in <= out_stream_data_V_1_state(1);
    out_stream_data_V_1_ack_out <= out_stream_TREADY;

    out_stream_data_V_1_data_out_assign_proc : process(out_stream_data_V_1_payload_A, out_stream_data_V_1_payload_B, out_stream_data_V_1_sel)
    begin
        if ((out_stream_data_V_1_sel = ap_const_logic_1)) then 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_B;
        else 
            out_stream_data_V_1_data_out <= out_stream_data_V_1_payload_A;
        end if; 
    end process;

    out_stream_data_V_1_load_A <= (out_stream_data_V_1_state_cmp_full and not(out_stream_data_V_1_sel_wr));
    out_stream_data_V_1_load_B <= (out_stream_data_V_1_state_cmp_full and out_stream_data_V_1_sel_wr);
    out_stream_data_V_1_sel <= out_stream_data_V_1_sel_rd;
    out_stream_data_V_1_state_cmp_full <= '0' when (out_stream_data_V_1_state = ap_const_lv2_1) else '1';

    out_stream_data_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_data_V_1_vld_out <= out_stream_data_V_1_state(0);
    out_stream_dest_V_1_ack_in <= out_stream_dest_V_1_state(1);
    out_stream_dest_V_1_ack_out <= out_stream_TREADY;
    out_stream_dest_V_1_data_out <= ap_const_lv5_0;
    out_stream_dest_V_1_sel <= out_stream_dest_V_1_sel_rd;

    out_stream_dest_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_dest_V_1_vld_out <= out_stream_dest_V_1_state(0);
    out_stream_id_V_1_ack_in <= out_stream_id_V_1_state(1);
    out_stream_id_V_1_ack_out <= out_stream_TREADY;
    out_stream_id_V_1_data_out <= ap_const_lv5_0;
    out_stream_id_V_1_sel <= out_stream_id_V_1_sel_rd;

    out_stream_id_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_id_V_1_vld_out <= out_stream_id_V_1_state(0);
    out_stream_keep_V_1_ack_in <= out_stream_keep_V_1_state(1);
    out_stream_keep_V_1_ack_out <= out_stream_TREADY;
    out_stream_keep_V_1_data_out <= ap_const_lv4_F;
    out_stream_keep_V_1_sel <= out_stream_keep_V_1_sel_rd;

    out_stream_keep_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_keep_V_1_vld_out <= out_stream_keep_V_1_state(0);
    out_stream_last_V_1_ack_in <= out_stream_last_V_1_state(1);
    out_stream_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_last_V_1_data_out_assign_proc : process(out_stream_last_V_1_payload_A, out_stream_last_V_1_payload_B, out_stream_last_V_1_sel)
    begin
        if ((out_stream_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_B;
        else 
            out_stream_last_V_1_data_out <= out_stream_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_last_V_1_load_A <= (out_stream_last_V_1_state_cmp_full and not(out_stream_last_V_1_sel_wr));
    out_stream_last_V_1_load_B <= (out_stream_last_V_1_state_cmp_full and out_stream_last_V_1_sel_wr);
    out_stream_last_V_1_sel <= out_stream_last_V_1_sel_rd;
    out_stream_last_V_1_state_cmp_full <= '0' when (out_stream_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_last_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_last_V_1_vld_out <= out_stream_last_V_1_state(0);
    out_stream_strb_V_1_ack_in <= out_stream_strb_V_1_state(1);
    out_stream_strb_V_1_ack_out <= out_stream_TREADY;
    out_stream_strb_V_1_data_out <= ap_const_lv4_F;
    out_stream_strb_V_1_sel <= out_stream_strb_V_1_sel_rd;

    out_stream_strb_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_strb_V_1_vld_out <= out_stream_strb_V_1_state(0);
    out_stream_user_V_1_ack_in <= out_stream_user_V_1_state(1);
    out_stream_user_V_1_ack_out <= out_stream_TREADY;
    out_stream_user_V_1_data_out <= ap_const_lv4_0;
    out_stream_user_V_1_sel <= out_stream_user_V_1_sel_rd;

    out_stream_user_V_1_vld_in_assign_proc : process(out_stream_data_V_1_ack_in, ap_CS_fsm_state42)
    begin
        if (((out_stream_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            out_stream_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_user_V_1_vld_out <= out_stream_user_V_1_state(0);

    result_buf_address0_assign_proc : process(tmp_7_reg_685, ap_CS_fsm_state41, ap_CS_fsm_state40, tmp_6_fu_590_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            result_buf_address0 <= tmp_6_fu_590_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            result_buf_address0 <= tmp_7_reg_685(7 - 1 downto 0);
        else 
            result_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_buf_ce0_assign_proc : process(out_stream_data_V_1_ack_in, out_stream_keep_V_1_ack_in, out_stream_strb_V_1_ack_in, out_stream_user_V_1_ack_in, out_stream_last_V_1_ack_in, out_stream_id_V_1_ack_in, out_stream_dest_V_1_ack_in, ap_CS_fsm_state41, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (not(((out_stream_dest_V_1_ack_in = ap_const_logic_0) or (out_stream_id_V_1_ack_in = ap_const_logic_0) or (out_stream_last_V_1_ack_in = ap_const_logic_0) or (out_stream_user_V_1_ack_in = ap_const_logic_0) or (out_stream_strb_V_1_ack_in = ap_const_logic_0) or (out_stream_keep_V_1_ack_in = ap_const_logic_0) or (out_stream_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            result_buf_ce0 <= ap_const_logic_1;
        else 
            result_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_buf_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            result_buf_we0 <= ap_const_logic_1;
        else 
            result_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_buf_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, tmp_1_fu_556_p1, tmp_3_i_fu_573_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp2_buf_address0 <= tmp_3_i_fu_573_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_buf_address0 <= tmp_1_fu_556_p1(10 - 1 downto 0);
        else 
            temp2_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp2_buf_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            temp2_buf_ce0 <= ap_const_logic_1;
        else 
            temp2_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_buf_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp2_buf_we0 <= ap_const_logic_1;
        else 
            temp2_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state8, tmp_4_fu_500_p1, tmp_3_i_fu_573_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buf_address0 <= tmp_3_i_fu_573_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buf_address0 <= tmp_4_fu_500_p1(10 - 1 downto 0);
        else 
            temp_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_buf_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            temp_buf_ce0 <= ap_const_logic_1;
        else 
            temp_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_buf_we0 <= ap_const_logic_1;
        else 
            temp_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_452_p2 <= std_logic_vector(unsigned(tmp_3_reg_611) + unsigned(tmp_3_cast_fu_448_p1));
    tmp_11_fu_490_p2 <= std_logic_vector(signed(tmp_s_reg_649) + signed(tmp_4_cast_fu_486_p1));
    tmp_12_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_644),64));
    tmp_12_fu_505_p1 <= phi_mul1_reg_335(18 - 1 downto 0);
        tmp_13_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_490_p2),64));

    tmp_13_fu_546_p2 <= std_logic_vector(unsigned(tmp_12_reg_667) + unsigned(tmp_1_cast_fu_542_p1));
    tmp_15_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_546_p2),64));
    tmp_1_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_346),18));
    tmp_1_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_346),64));
    tmp_3_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_301),18));
    tmp_3_fu_414_p1 <= phi_mul_reg_290(18 - 1 downto 0);
    tmp_3_i_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_370),64));
    tmp_4_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_312),18));
    tmp_4_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_312),64));
        tmp_6_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(os_idx_reg_381),64));

        tmp_7_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i2_reg_324),64));

    tmp_8_fu_424_p2 <= "1" when (unsigned(i_reg_279) < unsigned(length_x_0_data_reg)) else "0";
    tmp_fu_600_p1 <= result_buf_q0;
    tmp_i_fu_561_p2 <= "1" when (i_i_reg_370 = ap_const_lv10_310) else "0";
    tmp_s_fu_605_p0 <= ap_const_lv18_310(11 - 1 downto 0);
    tmp_s_fu_605_p1 <= my_index_0_data_reg(18 - 1 downto 0);
end behav;
