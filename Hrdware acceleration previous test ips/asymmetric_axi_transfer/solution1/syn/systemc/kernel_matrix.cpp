// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel_matrix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel_matrix::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel_matrix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<43> kernel_matrix::ap_ST_fsm_state1 = "1";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state2 = "10";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state3 = "100";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state4 = "1000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state5 = "10000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state6 = "100000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state7 = "1000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state8 = "10000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state9 = "100000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state10 = "1000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state11 = "10000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state12 = "100000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<43> kernel_matrix::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<32> kernel_matrix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> kernel_matrix::ap_const_lv1_0 = "0";
const sc_lv<1> kernel_matrix::ap_const_lv1_1 = "1";
const sc_lv<2> kernel_matrix::ap_const_lv2_0 = "00";
const sc_lv<2> kernel_matrix::ap_const_lv2_2 = "10";
const sc_lv<2> kernel_matrix::ap_const_lv2_3 = "11";
const sc_lv<2> kernel_matrix::ap_const_lv2_1 = "1";
const sc_lv<32> kernel_matrix::ap_const_lv32_4 = "100";
const sc_lv<32> kernel_matrix::ap_const_lv32_29 = "101001";
const sc_lv<32> kernel_matrix::ap_const_lv32_2A = "101010";
const int kernel_matrix::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> kernel_matrix::ap_const_lv32_15 = "10101";
const sc_lv<32> kernel_matrix::ap_const_lv32_1D = "11101";
const sc_lv<32> kernel_matrix::ap_const_lv32_2 = "10";
const sc_lv<32> kernel_matrix::ap_const_lv32_3 = "11";
const sc_lv<32> kernel_matrix::ap_const_lv32_5 = "101";
const sc_lv<32> kernel_matrix::ap_const_lv32_6 = "110";
const sc_lv<32> kernel_matrix::ap_const_lv32_8 = "1000";
const sc_lv<32> kernel_matrix::ap_const_lv32_9 = "1001";
const sc_lv<32> kernel_matrix::ap_const_lv32_B = "1011";
const sc_lv<32> kernel_matrix::ap_const_lv32_C = "1100";
const sc_lv<32> kernel_matrix::ap_const_lv32_11 = "10001";
const sc_lv<32> kernel_matrix::ap_const_lv32_1A = "11010";
const sc_lv<32> kernel_matrix::ap_const_lv32_26 = "100110";
const sc_lv<32> kernel_matrix::ap_const_lv32_28 = "101000";
const sc_lv<64> kernel_matrix::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<10> kernel_matrix::ap_const_lv10_0 = "0000000000";
const sc_lv<32> kernel_matrix::ap_const_lv32_7 = "111";
const sc_lv<32> kernel_matrix::ap_const_lv32_27 = "100111";
const sc_lv<42> kernel_matrix::ap_const_lv42_0 = "000000000000000000000000000000000000000000";
const sc_lv<32> kernel_matrix::ap_const_lv32_A = "1010";
const sc_lv<4> kernel_matrix::ap_const_lv4_F = "1111";
const sc_lv<4> kernel_matrix::ap_const_lv4_0 = "0000";
const sc_lv<5> kernel_matrix::ap_const_lv5_0 = "00000";
const sc_lv<32> kernel_matrix::ap_const_lv32_D = "1101";
const sc_lv<32> kernel_matrix::ap_const_lv32_16 = "10110";
const sc_lv<32> kernel_matrix::ap_const_lv32_BD4CCCCD = "10111101010011001100110011001101";
const sc_lv<32> kernel_matrix::ap_const_lv32_12 = "10010";
const sc_lv<32> kernel_matrix::ap_const_lv32_1E = "11110";
const sc_lv<64> kernel_matrix::ap_const_lv64_310 = "1100010000";
const sc_lv<32> kernel_matrix::ap_const_lv32_1 = "1";
const sc_lv<10> kernel_matrix::ap_const_lv10_310 = "1100010000";
const sc_lv<10> kernel_matrix::ap_const_lv10_1 = "1";
const sc_lv<42> kernel_matrix::ap_const_lv42_310 = "1100010000";
const sc_lv<18> kernel_matrix::ap_const_lv18_310 = "1100010000";
const bool kernel_matrix::ap_const_boolean_1 = true;

kernel_matrix::kernel_matrix(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_matrix_CONTROL_BUS_s_axi_U = new kernel_matrix_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("kernel_matrix_CONTROL_BUS_s_axi_U");
    kernel_matrix_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    kernel_matrix_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    kernel_matrix_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    kernel_matrix_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    kernel_matrix_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    kernel_matrix_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    kernel_matrix_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    kernel_matrix_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    kernel_matrix_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    kernel_matrix_CONTROL_BUS_s_axi_U->my_index(my_index);
    kernel_matrix_CONTROL_BUS_s_axi_U->length_x(length_x);
    input_buf_U = new kernel_matrix_inpbkb("input_buf_U");
    input_buf_U->clk(ap_clk);
    input_buf_U->reset(ap_rst_n_inv);
    input_buf_U->address0(input_buf_address0);
    input_buf_U->ce0(input_buf_ce0);
    input_buf_U->we0(input_buf_we0);
    input_buf_U->d0(input_buf_d0);
    input_buf_U->q0(input_buf_q0);
    temp_buf_U = new kernel_matrix_temcud("temp_buf_U");
    temp_buf_U->clk(ap_clk);
    temp_buf_U->reset(ap_rst_n_inv);
    temp_buf_U->address0(temp_buf_address0);
    temp_buf_U->ce0(temp_buf_ce0);
    temp_buf_U->we0(temp_buf_we0);
    temp_buf_U->d0(input_buf_q0);
    temp_buf_U->q0(temp_buf_q0);
    temp2_buf_U = new kernel_matrix_temcud("temp2_buf_U");
    temp2_buf_U->clk(ap_clk);
    temp2_buf_U->reset(ap_rst_n_inv);
    temp2_buf_U->address0(temp2_buf_address0);
    temp2_buf_U->ce0(temp2_buf_ce0);
    temp2_buf_U->we0(temp2_buf_we0);
    temp2_buf_U->d0(input_buf_q0);
    temp2_buf_U->q0(temp2_buf_q0);
    result_buf_U = new kernel_matrix_reseOg("result_buf_U");
    result_buf_U->clk(ap_clk);
    result_buf_U->reset(ap_rst_n_inv);
    result_buf_U->address0(result_buf_address0);
    result_buf_U->ce0(result_buf_ce0);
    result_buf_U->we0(result_buf_we0);
    result_buf_U->d0(tmp_2_i_reg_742);
    result_buf_U->q0(result_buf_q0);
    kernel_matrix_fadfYi_U1 = new kernel_matrix_fadfYi<1,5,32,32,32>("kernel_matrix_fadfYi_U1");
    kernel_matrix_fadfYi_U1->clk(ap_clk);
    kernel_matrix_fadfYi_U1->reset(ap_rst_n_inv);
    kernel_matrix_fadfYi_U1->din0(grp_fu_392_p0);
    kernel_matrix_fadfYi_U1->din1(grp_fu_392_p1);
    kernel_matrix_fadfYi_U1->opcode(grp_fu_392_opcode);
    kernel_matrix_fadfYi_U1->ce(ap_var_for_const0);
    kernel_matrix_fadfYi_U1->dout(grp_fu_392_p2);
    kernel_matrix_fmug8j_U2 = new kernel_matrix_fmug8j<1,4,32,32,32>("kernel_matrix_fmug8j_U2");
    kernel_matrix_fmug8j_U2->clk(ap_clk);
    kernel_matrix_fmug8j_U2->reset(ap_rst_n_inv);
    kernel_matrix_fmug8j_U2->din0(grp_fu_397_p0);
    kernel_matrix_fmug8j_U2->din1(grp_fu_397_p1);
    kernel_matrix_fmug8j_U2->ce(ap_var_for_const0);
    kernel_matrix_fmug8j_U2->dout(grp_fu_397_p2);
    kernel_matrix_fexhbi_U3 = new kernel_matrix_fexhbi<1,9,32,32,32>("kernel_matrix_fexhbi_U3");
    kernel_matrix_fexhbi_U3->clk(ap_clk);
    kernel_matrix_fexhbi_U3->reset(ap_rst_n_inv);
    kernel_matrix_fexhbi_U3->din0(ap_var_for_const1);
    kernel_matrix_fexhbi_U3->din1(reg_408);
    kernel_matrix_fexhbi_U3->ce(ap_var_for_const0);
    kernel_matrix_fexhbi_U3->dout(grp_fu_403_p2);
    kernel_matrix_mulibs_U4 = new kernel_matrix_mulibs<1,1,11,18,18>("kernel_matrix_mulibs_U4");
    kernel_matrix_mulibs_U4->din0(tmp_s_fu_605_p0);
    kernel_matrix_mulibs_U4->din1(tmp_s_fu_605_p1);
    kernel_matrix_mulibs_U4->dout(tmp_s_fu_605_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state41);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond1_fu_474_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( j1_reg_312 );

    SC_METHOD(thread_exitcond2_fu_436_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_reg_301 );

    SC_METHOD(thread_exitcond3_fu_579_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( length_x_read_reg_621 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( os_idx_reg_381 );

    SC_METHOD(thread_exitcond6_fu_515_p2);
    sensitive << ( length_x_read_reg_621 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( i2_reg_324 );

    SC_METHOD(thread_exitcond_fu_530_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( j3_reg_346 );

    SC_METHOD(thread_grp_fu_392_opcode);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_392_p0);
    sensitive << ( temp_buf_load_reg_721 );
    sensitive << ( sum_i_reg_358 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_392_p1);
    sensitive << ( reg_408 );
    sensitive << ( temp2_buf_load_reg_726 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_grp_fu_397_p0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_4_i_reg_731 );
    sensitive << ( sum_i_reg_358 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_grp_fu_397_p1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_4_i_reg_731 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_i_1_fu_430_p2);
    sensitive << ( i_reg_279 );

    SC_METHOD(thread_i_3_fu_520_p2);
    sensitive << ( i2_reg_324 );

    SC_METHOD(thread_i_4_fu_567_p2);
    sensitive << ( i_i_reg_370 );

    SC_METHOD(thread_in_stream_TDATA_blk_n);
    sensitive << ( in_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( in_stream_dest_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_in);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_stream_data_V_0_data_out);
    sensitive << ( in_stream_data_V_0_payload_A );
    sensitive << ( in_stream_data_V_0_payload_B );
    sensitive << ( in_stream_data_V_0_sel );

    SC_METHOD(thread_in_stream_data_V_0_load_A);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_load_B);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_sel);
    sensitive << ( in_stream_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream_data_V_0_state_cmp_full);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_in_stream_data_V_0_vld_out);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_dest_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_in_stream_dest_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_input_buf_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_12_cast_fu_466_p1 );
    sensitive << ( tmp_13_cast_fu_495_p1 );
    sensitive << ( tmp_15_cast_fu_551_p1 );

    SC_METHOD(thread_input_buf_ce0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_input_buf_d0);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_input_buf_we0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_j_1_fu_442_p2);
    sensitive << ( j_reg_301 );

    SC_METHOD(thread_j_2_fu_480_p2);
    sensitive << ( j1_reg_312 );

    SC_METHOD(thread_j_3_fu_536_p2);
    sensitive << ( j3_reg_346 );

    SC_METHOD(thread_last_assign_fu_595_p2);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( length_x_read_reg_621 );
    sensitive << ( os_idx_2_fu_584_p2 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );

    SC_METHOD(thread_length_x_0_ack_out);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );

    SC_METHOD(thread_my_index_0_ack_out);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );

    SC_METHOD(thread_next_mul2_fu_509_p2);
    sensitive << ( phi_mul1_reg_335 );

    SC_METHOD(thread_next_mul_fu_418_p2);
    sensitive << ( phi_mul_reg_290 );

    SC_METHOD(thread_os_idx_2_fu_584_p2);
    sensitive << ( os_idx_reg_381 );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_data_V_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_out_stream_TDEST);
    sensitive << ( out_stream_dest_V_1_data_out );

    SC_METHOD(thread_out_stream_TID);
    sensitive << ( out_stream_id_V_1_data_out );

    SC_METHOD(thread_out_stream_TKEEP);
    sensitive << ( out_stream_keep_V_1_data_out );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TSTRB);
    sensitive << ( out_stream_strb_V_1_data_out );

    SC_METHOD(thread_out_stream_TUSER);
    sensitive << ( out_stream_user_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_in);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_data_V_1_data_out);
    sensitive << ( out_stream_data_V_1_payload_A );
    sensitive << ( out_stream_data_V_1_payload_B );
    sensitive << ( out_stream_data_V_1_sel );

    SC_METHOD(thread_out_stream_data_V_1_load_A);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_load_B);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_sel);
    sensitive << ( out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_data_V_1_state_cmp_full);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_data_V_1_vld_out);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_in);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_dest_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_dest_V_1_data_out);
    sensitive << ( out_stream_dest_V_1_sel );

    SC_METHOD(thread_out_stream_dest_V_1_sel);
    sensitive << ( out_stream_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_dest_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_dest_V_1_vld_out);
    sensitive << ( out_stream_dest_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_in);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_id_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_id_V_1_data_out);
    sensitive << ( out_stream_id_V_1_sel );

    SC_METHOD(thread_out_stream_id_V_1_sel);
    sensitive << ( out_stream_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_id_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_id_V_1_vld_out);
    sensitive << ( out_stream_id_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_in);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_keep_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_keep_V_1_data_out);
    sensitive << ( out_stream_keep_V_1_sel );

    SC_METHOD(thread_out_stream_keep_V_1_sel);
    sensitive << ( out_stream_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_keep_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_keep_V_1_vld_out);
    sensitive << ( out_stream_keep_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_in);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_last_V_1_data_out);
    sensitive << ( out_stream_last_V_1_payload_A );
    sensitive << ( out_stream_last_V_1_payload_B );
    sensitive << ( out_stream_last_V_1_sel );

    SC_METHOD(thread_out_stream_last_V_1_load_A);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_load_B);
    sensitive << ( out_stream_last_V_1_sel_wr );
    sensitive << ( out_stream_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_last_V_1_sel);
    sensitive << ( out_stream_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_last_V_1_state_cmp_full);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_last_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_last_V_1_vld_out);
    sensitive << ( out_stream_last_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_in);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_strb_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_strb_V_1_data_out);
    sensitive << ( out_stream_strb_V_1_sel );

    SC_METHOD(thread_out_stream_strb_V_1_sel);
    sensitive << ( out_stream_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_strb_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_strb_V_1_vld_out);
    sensitive << ( out_stream_strb_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_in);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_out_stream_user_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_user_V_1_data_out);
    sensitive << ( out_stream_user_V_1_sel );

    SC_METHOD(thread_out_stream_user_V_1_sel);
    sensitive << ( out_stream_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_user_V_1_vld_in);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_out_stream_user_V_1_vld_out);
    sensitive << ( out_stream_user_V_1_state );

    SC_METHOD(thread_result_buf_address0);
    sensitive << ( tmp_7_reg_685 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state40 );
    sensitive << ( tmp_6_fu_590_p1 );

    SC_METHOD(thread_result_buf_ce0);
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_result_buf_we0);
    sensitive << ( ap_CS_fsm_state40 );

    SC_METHOD(thread_temp2_buf_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_1_fu_556_p1 );
    sensitive << ( tmp_3_i_fu_573_p1 );

    SC_METHOD(thread_temp2_buf_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_temp2_buf_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_temp_buf_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_4_fu_500_p1 );
    sensitive << ( tmp_3_i_fu_573_p1 );

    SC_METHOD(thread_temp_buf_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_temp_buf_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_10_fu_452_p2);
    sensitive << ( tmp_3_reg_611 );
    sensitive << ( tmp_3_cast_fu_448_p1 );

    SC_METHOD(thread_tmp_11_fu_490_p2);
    sensitive << ( tmp_s_reg_649 );
    sensitive << ( tmp_4_cast_fu_486_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_466_p1);
    sensitive << ( tmp_10_reg_644 );

    SC_METHOD(thread_tmp_12_fu_505_p1);
    sensitive << ( phi_mul1_reg_335 );

    SC_METHOD(thread_tmp_13_cast_fu_495_p1);
    sensitive << ( tmp_11_fu_490_p2 );

    SC_METHOD(thread_tmp_13_fu_546_p2);
    sensitive << ( tmp_12_reg_667 );
    sensitive << ( tmp_1_cast_fu_542_p1 );

    SC_METHOD(thread_tmp_15_cast_fu_551_p1);
    sensitive << ( tmp_13_fu_546_p2 );

    SC_METHOD(thread_tmp_1_cast_fu_542_p1);
    sensitive << ( j3_reg_346 );

    SC_METHOD(thread_tmp_1_fu_556_p1);
    sensitive << ( j3_reg_346 );

    SC_METHOD(thread_tmp_3_cast_fu_448_p1);
    sensitive << ( j_reg_301 );

    SC_METHOD(thread_tmp_3_fu_414_p1);
    sensitive << ( phi_mul_reg_290 );

    SC_METHOD(thread_tmp_3_i_fu_573_p1);
    sensitive << ( i_i_reg_370 );

    SC_METHOD(thread_tmp_4_cast_fu_486_p1);
    sensitive << ( j1_reg_312 );

    SC_METHOD(thread_tmp_4_fu_500_p1);
    sensitive << ( j1_reg_312 );

    SC_METHOD(thread_tmp_6_fu_590_p1);
    sensitive << ( os_idx_reg_381 );

    SC_METHOD(thread_tmp_7_fu_526_p1);
    sensitive << ( i2_reg_324 );

    SC_METHOD(thread_tmp_8_fu_424_p2);
    sensitive << ( length_x_0_data_reg );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_279 );

    SC_METHOD(thread_tmp_fu_600_p1);
    sensitive << ( result_buf_q0 );

    SC_METHOD(thread_tmp_i_fu_561_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i_i_reg_370 );

    SC_METHOD(thread_tmp_s_fu_605_p0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_s_fu_605_p1);
    sensitive << ( my_index_0_data_reg );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( out_stream_keep_V_1_ack_in );
    sensitive << ( out_stream_strb_V_1_ack_in );
    sensitive << ( out_stream_user_V_1_ack_in );
    sensitive << ( out_stream_last_V_1_ack_in );
    sensitive << ( out_stream_id_V_1_ack_in );
    sensitive << ( out_stream_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond2_fu_436_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_fu_474_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond6_fu_515_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_530_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_i_fu_561_p2 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( exitcond3_fu_579_p2 );
    sensitive << ( tmp_8_fu_424_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000000000000000000000000000000001";
    in_stream_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream_data_V_0_state = "00";
    in_stream_dest_V_0_state = "00";
    out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_data_V_1_state = "00";
    out_stream_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_keep_V_1_state = "00";
    out_stream_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_strb_V_1_state = "00";
    out_stream_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_user_V_1_state = "00";
    out_stream_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_last_V_1_state = "00";
    out_stream_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_id_V_1_state = "00";
    out_stream_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_dest_V_1_state = "00";
    my_index_0_data_reg = "00000000000000000000000000000000";
    my_index_0_vld_reg = SC_LOGIC_0;
    length_x_0_data_reg = "00000000000000000000000000000000";
    length_x_0_vld_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_matrix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, in_stream_TKEEP, "(port)in_stream_TKEEP");
    sc_trace(mVcdFile, in_stream_TSTRB, "(port)in_stream_TSTRB");
    sc_trace(mVcdFile, in_stream_TUSER, "(port)in_stream_TUSER");
    sc_trace(mVcdFile, in_stream_TLAST, "(port)in_stream_TLAST");
    sc_trace(mVcdFile, in_stream_TID, "(port)in_stream_TID");
    sc_trace(mVcdFile, in_stream_TDEST, "(port)in_stream_TDEST");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TKEEP, "(port)out_stream_TKEEP");
    sc_trace(mVcdFile, out_stream_TSTRB, "(port)out_stream_TSTRB");
    sc_trace(mVcdFile, out_stream_TUSER, "(port)out_stream_TUSER");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TID, "(port)out_stream_TID");
    sc_trace(mVcdFile, out_stream_TDEST, "(port)out_stream_TDEST");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, in_stream_data_V_0_data_out, "in_stream_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_in, "in_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_out, "in_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_in, "in_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_out, "in_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_A, "in_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_B, "in_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_rd, "in_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_wr, "in_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_data_V_0_sel, "in_stream_data_V_0_sel");
    sc_trace(mVcdFile, in_stream_data_V_0_load_A, "in_stream_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream_data_V_0_load_B, "in_stream_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream_data_V_0_state, "in_stream_data_V_0_state");
    sc_trace(mVcdFile, in_stream_data_V_0_state_cmp_full, "in_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream_dest_V_0_vld_in, "in_stream_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_dest_V_0_ack_out, "in_stream_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_dest_V_0_state, "in_stream_dest_V_0_state");
    sc_trace(mVcdFile, out_stream_data_V_1_data_out, "out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_in, "out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_out, "out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_in, "out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_out, "out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_A, "out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_B, "out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_rd, "out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_wr, "out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_data_V_1_sel, "out_stream_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_data_V_1_load_A, "out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_data_V_1_load_B, "out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_data_V_1_state, "out_stream_data_V_1_state");
    sc_trace(mVcdFile, out_stream_data_V_1_state_cmp_full, "out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_keep_V_1_data_out, "out_stream_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_in, "out_stream_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_vld_out, "out_stream_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_in, "out_stream_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_keep_V_1_ack_out, "out_stream_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel_rd, "out_stream_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_keep_V_1_sel, "out_stream_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_keep_V_1_state, "out_stream_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_strb_V_1_data_out, "out_stream_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_in, "out_stream_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_vld_out, "out_stream_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_in, "out_stream_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_strb_V_1_ack_out, "out_stream_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel_rd, "out_stream_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_strb_V_1_sel, "out_stream_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_strb_V_1_state, "out_stream_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_user_V_1_data_out, "out_stream_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_in, "out_stream_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_user_V_1_vld_out, "out_stream_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_in, "out_stream_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_user_V_1_ack_out, "out_stream_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_user_V_1_sel_rd, "out_stream_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_user_V_1_sel, "out_stream_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_user_V_1_state, "out_stream_user_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_data_out, "out_stream_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_in, "out_stream_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_last_V_1_vld_out, "out_stream_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_in, "out_stream_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_last_V_1_ack_out, "out_stream_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_A, "out_stream_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_last_V_1_payload_B, "out_stream_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_rd, "out_stream_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_last_V_1_sel_wr, "out_stream_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_last_V_1_sel, "out_stream_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_last_V_1_load_A, "out_stream_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_last_V_1_load_B, "out_stream_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_last_V_1_state, "out_stream_last_V_1_state");
    sc_trace(mVcdFile, out_stream_last_V_1_state_cmp_full, "out_stream_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_id_V_1_data_out, "out_stream_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_in, "out_stream_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_id_V_1_vld_out, "out_stream_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_in, "out_stream_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_id_V_1_ack_out, "out_stream_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_id_V_1_sel_rd, "out_stream_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_id_V_1_sel, "out_stream_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_id_V_1_state, "out_stream_id_V_1_state");
    sc_trace(mVcdFile, out_stream_dest_V_1_data_out, "out_stream_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_in, "out_stream_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_vld_out, "out_stream_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_in, "out_stream_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_dest_V_1_ack_out, "out_stream_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel_rd, "out_stream_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_dest_V_1_sel, "out_stream_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_dest_V_1_state, "out_stream_dest_V_1_state");
    sc_trace(mVcdFile, my_index, "my_index");
    sc_trace(mVcdFile, my_index_0_data_reg, "my_index_0_data_reg");
    sc_trace(mVcdFile, my_index_0_vld_reg, "my_index_0_vld_reg");
    sc_trace(mVcdFile, my_index_0_ack_out, "my_index_0_ack_out");
    sc_trace(mVcdFile, length_x, "length_x");
    sc_trace(mVcdFile, length_x_0_data_reg, "length_x_0_data_reg");
    sc_trace(mVcdFile, length_x_0_vld_reg, "length_x_0_vld_reg");
    sc_trace(mVcdFile, length_x_0_ack_out, "length_x_0_ack_out");
    sc_trace(mVcdFile, in_stream_TDATA_blk_n, "in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, grp_fu_397_p2, "grp_fu_397_p2");
    sc_trace(mVcdFile, reg_408, "reg_408");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, tmp_3_fu_414_p1, "tmp_3_fu_414_p1");
    sc_trace(mVcdFile, tmp_3_reg_611, "tmp_3_reg_611");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, next_mul_fu_418_p2, "next_mul_fu_418_p2");
    sc_trace(mVcdFile, next_mul_reg_616, "next_mul_reg_616");
    sc_trace(mVcdFile, length_x_read_reg_621, "length_x_read_reg_621");
    sc_trace(mVcdFile, i_1_fu_430_p2, "i_1_fu_430_p2");
    sc_trace(mVcdFile, i_1_reg_631, "i_1_reg_631");
    sc_trace(mVcdFile, j_1_fu_442_p2, "j_1_fu_442_p2");
    sc_trace(mVcdFile, j_1_reg_639, "j_1_reg_639");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_10_fu_452_p2, "tmp_10_fu_452_p2");
    sc_trace(mVcdFile, tmp_10_reg_644, "tmp_10_reg_644");
    sc_trace(mVcdFile, exitcond2_fu_436_p2, "exitcond2_fu_436_p2");
    sc_trace(mVcdFile, tmp_s_fu_605_p2, "tmp_s_fu_605_p2");
    sc_trace(mVcdFile, tmp_s_reg_649, "tmp_s_reg_649");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, j_2_fu_480_p2, "j_2_fu_480_p2");
    sc_trace(mVcdFile, j_2_reg_657, "j_2_reg_657");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, exitcond1_fu_474_p2, "exitcond1_fu_474_p2");
    sc_trace(mVcdFile, tmp_12_fu_505_p1, "tmp_12_fu_505_p1");
    sc_trace(mVcdFile, tmp_12_reg_667, "tmp_12_reg_667");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, next_mul2_fu_509_p2, "next_mul2_fu_509_p2");
    sc_trace(mVcdFile, next_mul2_reg_672, "next_mul2_reg_672");
    sc_trace(mVcdFile, i_3_fu_520_p2, "i_3_fu_520_p2");
    sc_trace(mVcdFile, i_3_reg_680, "i_3_reg_680");
    sc_trace(mVcdFile, tmp_7_fu_526_p1, "tmp_7_fu_526_p1");
    sc_trace(mVcdFile, tmp_7_reg_685, "tmp_7_reg_685");
    sc_trace(mVcdFile, exitcond6_fu_515_p2, "exitcond6_fu_515_p2");
    sc_trace(mVcdFile, j_3_fu_536_p2, "j_3_fu_536_p2");
    sc_trace(mVcdFile, j_3_reg_693, "j_3_reg_693");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond_fu_530_p2, "exitcond_fu_530_p2");
    sc_trace(mVcdFile, i_4_fu_567_p2, "i_4_fu_567_p2");
    sc_trace(mVcdFile, i_4_reg_706, "i_4_reg_706");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_i_fu_561_p2, "tmp_i_fu_561_p2");
    sc_trace(mVcdFile, temp_buf_q0, "temp_buf_q0");
    sc_trace(mVcdFile, temp_buf_load_reg_721, "temp_buf_load_reg_721");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, temp2_buf_q0, "temp2_buf_q0");
    sc_trace(mVcdFile, temp2_buf_load_reg_726, "temp2_buf_load_reg_726");
    sc_trace(mVcdFile, grp_fu_392_p2, "grp_fu_392_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_731, "tmp_4_i_reg_731");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_fu_403_p2, "grp_fu_403_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_742, "tmp_2_i_reg_742");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, os_idx_2_fu_584_p2, "os_idx_2_fu_584_p2");
    sc_trace(mVcdFile, os_idx_2_reg_750, "os_idx_2_reg_750");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_block_state41, "ap_block_state41");
    sc_trace(mVcdFile, exitcond3_fu_579_p2, "exitcond3_fu_579_p2");
    sc_trace(mVcdFile, last_assign_fu_595_p2, "last_assign_fu_595_p2");
    sc_trace(mVcdFile, last_assign_reg_760, "last_assign_reg_760");
    sc_trace(mVcdFile, tmp_fu_600_p1, "tmp_fu_600_p1");
    sc_trace(mVcdFile, input_buf_address0, "input_buf_address0");
    sc_trace(mVcdFile, input_buf_ce0, "input_buf_ce0");
    sc_trace(mVcdFile, input_buf_we0, "input_buf_we0");
    sc_trace(mVcdFile, input_buf_d0, "input_buf_d0");
    sc_trace(mVcdFile, input_buf_q0, "input_buf_q0");
    sc_trace(mVcdFile, temp_buf_address0, "temp_buf_address0");
    sc_trace(mVcdFile, temp_buf_ce0, "temp_buf_ce0");
    sc_trace(mVcdFile, temp_buf_we0, "temp_buf_we0");
    sc_trace(mVcdFile, temp2_buf_address0, "temp2_buf_address0");
    sc_trace(mVcdFile, temp2_buf_ce0, "temp2_buf_ce0");
    sc_trace(mVcdFile, temp2_buf_we0, "temp2_buf_we0");
    sc_trace(mVcdFile, result_buf_address0, "result_buf_address0");
    sc_trace(mVcdFile, result_buf_ce0, "result_buf_ce0");
    sc_trace(mVcdFile, result_buf_we0, "result_buf_we0");
    sc_trace(mVcdFile, result_buf_q0, "result_buf_q0");
    sc_trace(mVcdFile, i_reg_279, "i_reg_279");
    sc_trace(mVcdFile, phi_mul_reg_290, "phi_mul_reg_290");
    sc_trace(mVcdFile, j_reg_301, "j_reg_301");
    sc_trace(mVcdFile, tmp_8_fu_424_p2, "tmp_8_fu_424_p2");
    sc_trace(mVcdFile, j1_reg_312, "j1_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i2_reg_324, "i2_reg_324");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, phi_mul1_reg_335, "phi_mul1_reg_335");
    sc_trace(mVcdFile, j3_reg_346, "j3_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, sum_i_reg_358, "sum_i_reg_358");
    sc_trace(mVcdFile, i_i_reg_370, "i_i_reg_370");
    sc_trace(mVcdFile, os_idx_reg_381, "os_idx_reg_381");
    sc_trace(mVcdFile, tmp_12_cast_fu_466_p1, "tmp_12_cast_fu_466_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_495_p1, "tmp_13_cast_fu_495_p1");
    sc_trace(mVcdFile, tmp_4_fu_500_p1, "tmp_4_fu_500_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_551_p1, "tmp_15_cast_fu_551_p1");
    sc_trace(mVcdFile, tmp_1_fu_556_p1, "tmp_1_fu_556_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_573_p1, "tmp_3_i_fu_573_p1");
    sc_trace(mVcdFile, tmp_6_fu_590_p1, "tmp_6_fu_590_p1");
    sc_trace(mVcdFile, grp_fu_392_p0, "grp_fu_392_p0");
    sc_trace(mVcdFile, grp_fu_392_p1, "grp_fu_392_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_397_p0, "grp_fu_397_p0");
    sc_trace(mVcdFile, grp_fu_397_p1, "grp_fu_397_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, tmp_3_cast_fu_448_p1, "tmp_3_cast_fu_448_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_486_p1, "tmp_4_cast_fu_486_p1");
    sc_trace(mVcdFile, tmp_11_fu_490_p2, "tmp_11_fu_490_p2");
    sc_trace(mVcdFile, tmp_1_cast_fu_542_p1, "tmp_1_cast_fu_542_p1");
    sc_trace(mVcdFile, tmp_13_fu_546_p2, "tmp_13_fu_546_p2");
    sc_trace(mVcdFile, tmp_s_fu_605_p0, "tmp_s_fu_605_p0");
    sc_trace(mVcdFile, tmp_s_fu_605_p1, "tmp_s_fu_605_p1");
    sc_trace(mVcdFile, grp_fu_392_opcode, "grp_fu_392_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kernel_matrix.hdltvin.dat");
    mHdltvoutHandle.open("kernel_matrix.hdltvout.dat");
}

kernel_matrix::~kernel_matrix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel_matrix_CONTROL_BUS_s_axi_U;
    delete input_buf_U;
    delete temp_buf_U;
    delete temp2_buf_U;
    delete result_buf_U;
    delete kernel_matrix_fadfYi_U1;
    delete kernel_matrix_fmug8j_U2;
    delete kernel_matrix_fexhbi_U3;
    delete kernel_matrix_mulibs_U4;
}

void kernel_matrix::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel_matrix::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void kernel_matrix::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_474_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        i2_reg_324 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        i2_reg_324 = i_3_reg_680.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_530_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        i_i_reg_370 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        i_i_reg_370 = i_4_reg_706.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_436_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        i_reg_279 = i_1_reg_631.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_279 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_out.read()))) {
            in_stream_data_V_0_sel_rd =  (sc_logic) (~in_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_in.read()))) {
            in_stream_data_V_0_sel_wr =  (sc_logic) (~in_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()))))) {
            in_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_dest_V_0_state.read())))) {
            in_stream_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_dest_V_0_state.read())))) {
            in_stream_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_dest_V_0_ack_out.read()))))) {
            in_stream_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j1_reg_312 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j1_reg_312 = j_2_reg_657.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        j3_reg_346 = j_3_reg_693.read();
    } else if ((esl_seteq<1,1,1>(exitcond6_fu_515_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        j3_reg_346 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        j_reg_301 = j_1_reg_639.read();
    } else if ((esl_seteq<1,1,1>(tmp_8_fu_424_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_reg_301 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_515_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        os_idx_reg_381 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
        os_idx_reg_381 = os_idx_2_reg_750.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_out.read()))) {
            out_stream_data_V_1_sel_rd =  (sc_logic) (~out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_in.read()))) {
            out_stream_data_V_1_sel_wr =  (sc_logic) (~out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_data_V_1_state.read())))) {
            out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_data_V_1_state.read())))) {
            out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()))))) {
            out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_out.read()))) {
            out_stream_dest_V_1_sel_rd =  (sc_logic) (~out_stream_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())))) {
            out_stream_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_dest_V_1_ack_out.read()))))) {
            out_stream_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_out.read()))) {
            out_stream_id_V_1_sel_rd =  (sc_logic) (~out_stream_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())))) {
            out_stream_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_id_V_1_ack_out.read()))))) {
            out_stream_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_out.read()))) {
            out_stream_keep_V_1_sel_rd =  (sc_logic) (~out_stream_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())))) {
            out_stream_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_keep_V_1_ack_out.read()))))) {
            out_stream_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_out.read()))) {
            out_stream_last_V_1_sel_rd =  (sc_logic) (~out_stream_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_in.read()))) {
            out_stream_last_V_1_sel_wr =  (sc_logic) (~out_stream_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())))) {
            out_stream_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_ack_out.read()))))) {
            out_stream_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_out.read()))) {
            out_stream_strb_V_1_sel_rd =  (sc_logic) (~out_stream_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())))) {
            out_stream_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_strb_V_1_ack_out.read()))))) {
            out_stream_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_out.read()))) {
            out_stream_user_V_1_sel_rd =  (sc_logic) (~out_stream_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())))) {
            out_stream_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_user_V_1_ack_out.read()))))) {
            out_stream_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_474_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        phi_mul1_reg_335 = ap_const_lv42_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        phi_mul1_reg_335 = next_mul2_reg_672.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_436_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        phi_mul_reg_290 = next_mul_reg_616.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        phi_mul_reg_290 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_530_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        sum_i_reg_358 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        sum_i_reg_358 = grp_fu_392_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_631 = i_1_fu_430_p2.read();
        length_x_read_reg_621 = length_x_0_data_reg.read();
        next_mul_reg_616 = next_mul_fu_418_p2.read();
        tmp_3_reg_611 = tmp_3_fu_414_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_3_reg_680 = i_3_fu_520_p2.read();
        next_mul2_reg_672 = next_mul2_fu_509_p2.read();
        tmp_12_reg_667 = tmp_12_fu_505_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_4_reg_706 = i_4_fu_567_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_A.read())) {
        in_stream_data_V_0_payload_A = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_B.read())) {
        in_stream_data_V_0_payload_B = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_639 = j_1_fu_442_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_2_reg_657 = j_2_fu_480_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        j_3_reg_693 = j_3_fu_536_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        last_assign_reg_760 = last_assign_fu_595_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, length_x_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_x_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, length_x_0_ack_out.read())))) {
        length_x_0_data_reg = length_x.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_index_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, my_index_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, my_index_0_ack_out.read())))) {
        my_index_0_data_reg = my_index.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && !(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)))) {
        os_idx_2_reg_750 = os_idx_2_fu_584_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_A.read())) {
        out_stream_data_V_1_payload_A = tmp_fu_600_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_B.read())) {
        out_stream_data_V_1_payload_B = tmp_fu_600_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_A.read())) {
        out_stream_last_V_1_payload_A = last_assign_reg_760.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_load_B.read())) {
        out_stream_last_V_1_payload_B = last_assign_reg_760.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        reg_408 = grp_fu_397_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        temp2_buf_load_reg_726 = temp2_buf_q0.read();
        temp_buf_load_reg_721 = temp_buf_q0.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_436_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_10_reg_644 = tmp_10_fu_452_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        tmp_2_i_reg_742 = grp_fu_403_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        tmp_4_i_reg_731 = grp_fu_392_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_515_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        tmp_7_reg_685 = tmp_7_fu_526_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_s_reg_649 = tmp_s_fu_605_p2.read();
    }
}

void kernel_matrix::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel_matrix::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void kernel_matrix::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void kernel_matrix::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void kernel_matrix::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void kernel_matrix::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void kernel_matrix::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void kernel_matrix::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void kernel_matrix::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void kernel_matrix::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void kernel_matrix::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void kernel_matrix::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel_matrix::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void kernel_matrix::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void kernel_matrix::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void kernel_matrix::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void kernel_matrix::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void kernel_matrix::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void kernel_matrix::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void kernel_matrix::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void kernel_matrix::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void kernel_matrix::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void kernel_matrix::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void kernel_matrix::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void kernel_matrix::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void kernel_matrix::thread_ap_block_state41() {
    ap_block_state41 = (esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0));
}

void kernel_matrix::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel_matrix::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel_matrix::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel_matrix::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void kernel_matrix::thread_exitcond1_fu_474_p2() {
    exitcond1_fu_474_p2 = (!j1_reg_312.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j1_reg_312.read() == ap_const_lv10_310);
}

void kernel_matrix::thread_exitcond2_fu_436_p2() {
    exitcond2_fu_436_p2 = (!j_reg_301.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_301.read() == ap_const_lv10_310);
}

void kernel_matrix::thread_exitcond3_fu_579_p2() {
    exitcond3_fu_579_p2 = (!os_idx_reg_381.read().is_01() || !length_x_read_reg_621.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_reg_381.read() == length_x_read_reg_621.read());
}

void kernel_matrix::thread_exitcond6_fu_515_p2() {
    exitcond6_fu_515_p2 = (!i2_reg_324.read().is_01() || !length_x_read_reg_621.read().is_01())? sc_lv<1>(): sc_lv<1>(i2_reg_324.read() == length_x_read_reg_621.read());
}

void kernel_matrix::thread_exitcond_fu_530_p2() {
    exitcond_fu_530_p2 = (!j3_reg_346.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(j3_reg_346.read() == ap_const_lv10_310);
}

void kernel_matrix::thread_grp_fu_392_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_392_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_392_opcode = ap_const_lv2_0;
    } else {
        grp_fu_392_opcode = "XX";
    }
}

void kernel_matrix::thread_grp_fu_392_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_392_p0 = sum_i_reg_358.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_392_p0 = temp_buf_load_reg_721.read();
    } else {
        grp_fu_392_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix::thread_grp_fu_392_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_392_p1 = reg_408.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_392_p1 = temp2_buf_load_reg_726.read();
    } else {
        grp_fu_392_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix::thread_grp_fu_397_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_397_p0 = tmp_4_i_reg_731.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_397_p0 = sum_i_reg_358.read();
    } else {
        grp_fu_397_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix::thread_grp_fu_397_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        grp_fu_397_p1 = tmp_4_i_reg_731.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_397_p1 = ap_const_lv32_BD4CCCCD;
    } else {
        grp_fu_397_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix::thread_i_1_fu_430_p2() {
    i_1_fu_430_p2 = (!ap_const_lv32_1.is_01() || !i_reg_279.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(i_reg_279.read()));
}

void kernel_matrix::thread_i_3_fu_520_p2() {
    i_3_fu_520_p2 = (!ap_const_lv32_1.is_01() || !i2_reg_324.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_bigint<32>(i2_reg_324.read()));
}

void kernel_matrix::thread_i_4_fu_567_p2() {
    i_4_fu_567_p2 = (!i_i_reg_370.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_i_reg_370.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix::thread_in_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        in_stream_TDATA_blk_n = in_stream_data_V_0_state.read()[0];
    } else {
        in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void kernel_matrix::thread_in_stream_TREADY() {
    in_stream_TREADY = in_stream_dest_V_0_state.read()[1];
}

void kernel_matrix::thread_in_stream_data_V_0_ack_in() {
    in_stream_data_V_0_ack_in = in_stream_data_V_0_state.read()[1];
}

void kernel_matrix::thread_in_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix::thread_in_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_sel.read())) {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B.read();
    } else {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A.read();
    }
}

void kernel_matrix::thread_in_stream_data_V_0_load_A() {
    in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full.read() & ~in_stream_data_V_0_sel_wr.read());
}

void kernel_matrix::thread_in_stream_data_V_0_load_B() {
    in_stream_data_V_0_load_B = (in_stream_data_V_0_sel_wr.read() & in_stream_data_V_0_state_cmp_full.read());
}

void kernel_matrix::thread_in_stream_data_V_0_sel() {
    in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd.read();
}

void kernel_matrix::thread_in_stream_data_V_0_state_cmp_full() {
    in_stream_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix::thread_in_stream_data_V_0_vld_in() {
    in_stream_data_V_0_vld_in = in_stream_TVALID.read();
}

void kernel_matrix::thread_in_stream_data_V_0_vld_out() {
    in_stream_data_V_0_vld_out = in_stream_data_V_0_state.read()[0];
}

void kernel_matrix::thread_in_stream_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        in_stream_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix::thread_in_stream_dest_V_0_vld_in() {
    in_stream_dest_V_0_vld_in = in_stream_TVALID.read();
}

void kernel_matrix::thread_input_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        input_buf_address0 =  (sc_lv<17>) (tmp_15_cast_fu_551_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        input_buf_address0 =  (sc_lv<17>) (tmp_13_cast_fu_495_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        input_buf_address0 =  (sc_lv<17>) (tmp_12_cast_fu_466_p1.read());
    } else {
        input_buf_address0 =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
    }
}

void kernel_matrix::thread_input_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         (esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())))) {
        input_buf_ce0 = ap_const_logic_1;
    } else {
        input_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_input_buf_d0() {
    input_buf_d0 = in_stream_data_V_0_data_out.read();
}

void kernel_matrix::thread_input_buf_we0() {
    if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        input_buf_we0 = ap_const_logic_1;
    } else {
        input_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_j_1_fu_442_p2() {
    j_1_fu_442_p2 = (!j_reg_301.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_301.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix::thread_j_2_fu_480_p2() {
    j_2_fu_480_p2 = (!j1_reg_312.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j1_reg_312.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix::thread_j_3_fu_536_p2() {
    j_3_fu_536_p2 = (!j3_reg_346.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j3_reg_346.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void kernel_matrix::thread_last_assign_fu_595_p2() {
    last_assign_fu_595_p2 = (!os_idx_2_fu_584_p2.read().is_01() || !length_x_read_reg_621.read().is_01())? sc_lv<1>(): sc_lv<1>(os_idx_2_fu_584_p2.read() == length_x_read_reg_621.read());
}

void kernel_matrix::thread_length_x_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        length_x_0_ack_out = ap_const_logic_1;
    } else {
        length_x_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix::thread_my_index_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
        my_index_0_ack_out = ap_const_logic_1;
    } else {
        my_index_0_ack_out = ap_const_logic_0;
    }
}

void kernel_matrix::thread_next_mul2_fu_509_p2() {
    next_mul2_fu_509_p2 = (!ap_const_lv42_310.is_01() || !phi_mul1_reg_335.read().is_01())? sc_lv<42>(): (sc_biguint<42>(ap_const_lv42_310) + sc_biguint<42>(phi_mul1_reg_335.read()));
}

void kernel_matrix::thread_next_mul_fu_418_p2() {
    next_mul_fu_418_p2 = (!ap_const_lv64_310.is_01() || !phi_mul_reg_290.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_310) + sc_biguint<64>(phi_mul_reg_290.read()));
}

void kernel_matrix::thread_os_idx_2_fu_584_p2() {
    os_idx_2_fu_584_p2 = (!os_idx_reg_381.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(os_idx_reg_381.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void kernel_matrix::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_data_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
        out_stream_TDATA_blk_n = out_stream_data_V_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void kernel_matrix::thread_out_stream_TDEST() {
    out_stream_TDEST = out_stream_dest_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TID() {
    out_stream_TID = out_stream_id_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TKEEP() {
    out_stream_TKEEP = out_stream_keep_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_last_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TSTRB() {
    out_stream_TSTRB = out_stream_strb_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TUSER() {
    out_stream_TUSER = out_stream_user_V_1_data_out.read();
}

void kernel_matrix::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_dest_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_data_V_1_ack_in() {
    out_stream_data_V_1_ack_in = out_stream_data_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_data_V_1_ack_out() {
    out_stream_data_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_sel.read())) {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B.read();
    } else {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A.read();
    }
}

void kernel_matrix::thread_out_stream_data_V_1_load_A() {
    out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full.read() & ~out_stream_data_V_1_sel_wr.read());
}

void kernel_matrix::thread_out_stream_data_V_1_load_B() {
    out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr.read() & out_stream_data_V_1_state_cmp_full.read());
}

void kernel_matrix::thread_out_stream_data_V_1_sel() {
    out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_data_V_1_state_cmp_full() {
    out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix::thread_out_stream_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_data_V_1_vld_out() {
    out_stream_data_V_1_vld_out = out_stream_data_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_dest_V_1_ack_in() {
    out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_dest_V_1_ack_out() {
    out_stream_dest_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_dest_V_1_data_out() {
    out_stream_dest_V_1_data_out = ap_const_lv5_0;
}

void kernel_matrix::thread_out_stream_dest_V_1_sel() {
    out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_dest_V_1_vld_out() {
    out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_id_V_1_ack_in() {
    out_stream_id_V_1_ack_in = out_stream_id_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_id_V_1_ack_out() {
    out_stream_id_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_id_V_1_data_out() {
    out_stream_id_V_1_data_out = ap_const_lv5_0;
}

void kernel_matrix::thread_out_stream_id_V_1_sel() {
    out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_id_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_id_V_1_vld_out() {
    out_stream_id_V_1_vld_out = out_stream_id_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_keep_V_1_ack_in() {
    out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_keep_V_1_ack_out() {
    out_stream_keep_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_keep_V_1_data_out() {
    out_stream_keep_V_1_data_out = ap_const_lv4_F;
}

void kernel_matrix::thread_out_stream_keep_V_1_sel() {
    out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_keep_V_1_vld_out() {
    out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_last_V_1_ack_in() {
    out_stream_last_V_1_ack_in = out_stream_last_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_last_V_1_ack_out() {
    out_stream_last_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_last_V_1_sel.read())) {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B.read();
    } else {
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A.read();
    }
}

void kernel_matrix::thread_out_stream_last_V_1_load_A() {
    out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full.read() & ~out_stream_last_V_1_sel_wr.read());
}

void kernel_matrix::thread_out_stream_last_V_1_load_B() {
    out_stream_last_V_1_load_B = (out_stream_last_V_1_sel_wr.read() & out_stream_last_V_1_state_cmp_full.read());
}

void kernel_matrix::thread_out_stream_last_V_1_sel() {
    out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_last_V_1_state_cmp_full() {
    out_stream_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void kernel_matrix::thread_out_stream_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_last_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_last_V_1_vld_out() {
    out_stream_last_V_1_vld_out = out_stream_last_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_strb_V_1_ack_in() {
    out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_strb_V_1_ack_out() {
    out_stream_strb_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_strb_V_1_data_out() {
    out_stream_strb_V_1_data_out = ap_const_lv4_F;
}

void kernel_matrix::thread_out_stream_strb_V_1_sel() {
    out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_strb_V_1_vld_out() {
    out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state.read()[0];
}

void kernel_matrix::thread_out_stream_user_V_1_ack_in() {
    out_stream_user_V_1_ack_in = out_stream_user_V_1_state.read()[1];
}

void kernel_matrix::thread_out_stream_user_V_1_ack_out() {
    out_stream_user_V_1_ack_out = out_stream_TREADY.read();
}

void kernel_matrix::thread_out_stream_user_V_1_data_out() {
    out_stream_user_V_1_data_out = ap_const_lv4_0;
}

void kernel_matrix::thread_out_stream_user_V_1_sel() {
    out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd.read();
}

void kernel_matrix::thread_out_stream_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
        out_stream_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_user_V_1_vld_in = ap_const_logic_0;
    }
}

void kernel_matrix::thread_out_stream_user_V_1_vld_out() {
    out_stream_user_V_1_vld_out = out_stream_user_V_1_state.read()[0];
}

void kernel_matrix::thread_result_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        result_buf_address0 =  (sc_lv<7>) (tmp_6_fu_590_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        result_buf_address0 =  (sc_lv<7>) (tmp_7_reg_685.read());
    } else {
        result_buf_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void kernel_matrix::thread_result_buf_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          !(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read()))) {
        result_buf_ce0 = ap_const_logic_1;
    } else {
        result_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_result_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        result_buf_we0 = ap_const_logic_1;
    } else {
        result_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_temp2_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp2_buf_address0 =  (sc_lv<10>) (tmp_3_i_fu_573_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp2_buf_address0 =  (sc_lv<10>) (tmp_1_fu_556_p1.read());
    } else {
        temp2_buf_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void kernel_matrix::thread_temp2_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        temp2_buf_ce0 = ap_const_logic_1;
    } else {
        temp2_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_temp2_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp2_buf_we0 = ap_const_logic_1;
    } else {
        temp2_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_temp_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_buf_address0 =  (sc_lv<10>) (tmp_3_i_fu_573_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp_buf_address0 =  (sc_lv<10>) (tmp_4_fu_500_p1.read());
    } else {
        temp_buf_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void kernel_matrix::thread_temp_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        temp_buf_ce0 = ap_const_logic_1;
    } else {
        temp_buf_ce0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_temp_buf_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp_buf_we0 = ap_const_logic_1;
    } else {
        temp_buf_we0 = ap_const_logic_0;
    }
}

void kernel_matrix::thread_tmp_10_fu_452_p2() {
    tmp_10_fu_452_p2 = (!tmp_3_reg_611.read().is_01() || !tmp_3_cast_fu_448_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_3_reg_611.read()) + sc_biguint<18>(tmp_3_cast_fu_448_p1.read()));
}

void kernel_matrix::thread_tmp_11_fu_490_p2() {
    tmp_11_fu_490_p2 = (!tmp_s_reg_649.read().is_01() || !tmp_4_cast_fu_486_p1.read().is_01())? sc_lv<18>(): (sc_bigint<18>(tmp_s_reg_649.read()) + sc_biguint<18>(tmp_4_cast_fu_486_p1.read()));
}

void kernel_matrix::thread_tmp_12_cast_fu_466_p1() {
    tmp_12_cast_fu_466_p1 = esl_zext<64,18>(tmp_10_reg_644.read());
}

void kernel_matrix::thread_tmp_12_fu_505_p1() {
    tmp_12_fu_505_p1 = phi_mul1_reg_335.read().range(18-1, 0);
}

void kernel_matrix::thread_tmp_13_cast_fu_495_p1() {
    tmp_13_cast_fu_495_p1 = esl_sext<64,18>(tmp_11_fu_490_p2.read());
}

void kernel_matrix::thread_tmp_13_fu_546_p2() {
    tmp_13_fu_546_p2 = (!tmp_12_reg_667.read().is_01() || !tmp_1_cast_fu_542_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_12_reg_667.read()) + sc_biguint<18>(tmp_1_cast_fu_542_p1.read()));
}

void kernel_matrix::thread_tmp_15_cast_fu_551_p1() {
    tmp_15_cast_fu_551_p1 = esl_zext<64,18>(tmp_13_fu_546_p2.read());
}

void kernel_matrix::thread_tmp_1_cast_fu_542_p1() {
    tmp_1_cast_fu_542_p1 = esl_zext<18,10>(j3_reg_346.read());
}

void kernel_matrix::thread_tmp_1_fu_556_p1() {
    tmp_1_fu_556_p1 = esl_zext<64,10>(j3_reg_346.read());
}

void kernel_matrix::thread_tmp_3_cast_fu_448_p1() {
    tmp_3_cast_fu_448_p1 = esl_zext<18,10>(j_reg_301.read());
}

void kernel_matrix::thread_tmp_3_fu_414_p1() {
    tmp_3_fu_414_p1 = phi_mul_reg_290.read().range(18-1, 0);
}

void kernel_matrix::thread_tmp_3_i_fu_573_p1() {
    tmp_3_i_fu_573_p1 = esl_zext<64,10>(i_i_reg_370.read());
}

void kernel_matrix::thread_tmp_4_cast_fu_486_p1() {
    tmp_4_cast_fu_486_p1 = esl_zext<18,10>(j1_reg_312.read());
}

void kernel_matrix::thread_tmp_4_fu_500_p1() {
    tmp_4_fu_500_p1 = esl_zext<64,10>(j1_reg_312.read());
}

void kernel_matrix::thread_tmp_6_fu_590_p1() {
    tmp_6_fu_590_p1 = esl_sext<64,32>(os_idx_reg_381.read());
}

void kernel_matrix::thread_tmp_7_fu_526_p1() {
    tmp_7_fu_526_p1 = esl_sext<64,32>(i2_reg_324.read());
}

void kernel_matrix::thread_tmp_8_fu_424_p2() {
    tmp_8_fu_424_p2 = (!i_reg_279.read().is_01() || !length_x_0_data_reg.read().is_01())? sc_lv<1>(): (sc_biguint<32>(i_reg_279.read()) < sc_biguint<32>(length_x_0_data_reg.read()));
}

void kernel_matrix::thread_tmp_fu_600_p1() {
    tmp_fu_600_p1 = result_buf_q0.read();
}

void kernel_matrix::thread_tmp_i_fu_561_p2() {
    tmp_i_fu_561_p2 = (!i_i_reg_370.read().is_01() || !ap_const_lv10_310.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_370.read() == ap_const_lv10_310);
}

void kernel_matrix::thread_tmp_s_fu_605_p0() {
    tmp_s_fu_605_p0 =  (sc_lv<11>) (ap_const_lv18_310);
}

void kernel_matrix::thread_tmp_s_fu_605_p1() {
    tmp_s_fu_605_p1 = my_index_0_data_reg.read().range(18-1, 0);
}

void kernel_matrix::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_8_fu_424_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_436_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_474_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(exitcond6_fu_515_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_530_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(tmp_i_fu_561_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 1099511627776 : 
            if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((!(esl_seteq<1,1,1>(out_stream_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond3_fu_579_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()))) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        case 2199023255552 : 
            if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()))) {
                ap_NS_fsm = ap_ST_fsm_state43;
            } else {
                ap_NS_fsm = ap_ST_fsm_state42;
            }
            break;
        case 4398046511104 : 
            if ((esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state43;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<43>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void kernel_matrix::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDATA\" :  \"" << in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TVALID\" :  \"" << in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_stream_TREADY\" :  \"" << in_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TKEEP\" :  \"" << in_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TSTRB\" :  \"" << in_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TUSER\" :  \"" << in_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TLAST\" :  \"" << in_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TID\" :  \"" << in_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDEST\" :  \"" << in_stream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDATA\" :  \"" << out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TVALID\" :  \"" << out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_TREADY\" :  \"" << out_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TKEEP\" :  \"" << out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TSTRB\" :  \"" << out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TUSER\" :  \"" << out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TLAST\" :  \"" << out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TID\" :  \"" << out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDEST\" :  \"" << out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

