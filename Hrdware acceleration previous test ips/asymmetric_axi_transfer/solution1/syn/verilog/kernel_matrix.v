// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel_matrix,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.684000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=13,HLS_SYN_FF=1880,HLS_SYN_LUT=42137,HLS_VERSION=2018_2}" *)

module kernel_matrix (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TUSER,
        out_stream_TLAST,
        out_stream_TID,
        out_stream_TDEST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [3:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [4:0] in_stream_TDEST;
output  [31:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [3:0] out_stream_TKEEP;
output  [3:0] out_stream_TSTRB;
output  [3:0] out_stream_TUSER;
output  [0:0] out_stream_TLAST;
output  [4:0] out_stream_TID;
output  [4:0] out_stream_TDEST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] in_stream_data_V_0_data_out;
wire    in_stream_data_V_0_vld_in;
wire    in_stream_data_V_0_vld_out;
wire    in_stream_data_V_0_ack_in;
reg    in_stream_data_V_0_ack_out;
reg   [31:0] in_stream_data_V_0_payload_A;
reg   [31:0] in_stream_data_V_0_payload_B;
reg    in_stream_data_V_0_sel_rd;
reg    in_stream_data_V_0_sel_wr;
wire    in_stream_data_V_0_sel;
wire    in_stream_data_V_0_load_A;
wire    in_stream_data_V_0_load_B;
reg   [1:0] in_stream_data_V_0_state;
wire    in_stream_data_V_0_state_cmp_full;
wire    in_stream_dest_V_0_vld_in;
reg    in_stream_dest_V_0_ack_out;
reg   [1:0] in_stream_dest_V_0_state;
reg   [31:0] out_stream_data_V_1_data_out;
reg    out_stream_data_V_1_vld_in;
wire    out_stream_data_V_1_vld_out;
wire    out_stream_data_V_1_ack_in;
wire    out_stream_data_V_1_ack_out;
reg   [31:0] out_stream_data_V_1_payload_A;
reg   [31:0] out_stream_data_V_1_payload_B;
reg    out_stream_data_V_1_sel_rd;
reg    out_stream_data_V_1_sel_wr;
wire    out_stream_data_V_1_sel;
wire    out_stream_data_V_1_load_A;
wire    out_stream_data_V_1_load_B;
reg   [1:0] out_stream_data_V_1_state;
wire    out_stream_data_V_1_state_cmp_full;
wire   [3:0] out_stream_keep_V_1_data_out;
reg    out_stream_keep_V_1_vld_in;
wire    out_stream_keep_V_1_vld_out;
wire    out_stream_keep_V_1_ack_in;
wire    out_stream_keep_V_1_ack_out;
reg    out_stream_keep_V_1_sel_rd;
wire    out_stream_keep_V_1_sel;
reg   [1:0] out_stream_keep_V_1_state;
wire   [3:0] out_stream_strb_V_1_data_out;
reg    out_stream_strb_V_1_vld_in;
wire    out_stream_strb_V_1_vld_out;
wire    out_stream_strb_V_1_ack_in;
wire    out_stream_strb_V_1_ack_out;
reg    out_stream_strb_V_1_sel_rd;
wire    out_stream_strb_V_1_sel;
reg   [1:0] out_stream_strb_V_1_state;
wire   [3:0] out_stream_user_V_1_data_out;
reg    out_stream_user_V_1_vld_in;
wire    out_stream_user_V_1_vld_out;
wire    out_stream_user_V_1_ack_in;
wire    out_stream_user_V_1_ack_out;
reg    out_stream_user_V_1_sel_rd;
wire    out_stream_user_V_1_sel;
reg   [1:0] out_stream_user_V_1_state;
reg   [0:0] out_stream_last_V_1_data_out;
reg    out_stream_last_V_1_vld_in;
wire    out_stream_last_V_1_vld_out;
wire    out_stream_last_V_1_ack_in;
wire    out_stream_last_V_1_ack_out;
reg   [0:0] out_stream_last_V_1_payload_A;
reg   [0:0] out_stream_last_V_1_payload_B;
reg    out_stream_last_V_1_sel_rd;
reg    out_stream_last_V_1_sel_wr;
wire    out_stream_last_V_1_sel;
wire    out_stream_last_V_1_load_A;
wire    out_stream_last_V_1_load_B;
reg   [1:0] out_stream_last_V_1_state;
wire    out_stream_last_V_1_state_cmp_full;
wire   [4:0] out_stream_id_V_1_data_out;
reg    out_stream_id_V_1_vld_in;
wire    out_stream_id_V_1_vld_out;
wire    out_stream_id_V_1_ack_in;
wire    out_stream_id_V_1_ack_out;
reg    out_stream_id_V_1_sel_rd;
wire    out_stream_id_V_1_sel;
reg   [1:0] out_stream_id_V_1_state;
wire   [4:0] out_stream_dest_V_1_data_out;
reg    out_stream_dest_V_1_vld_in;
wire    out_stream_dest_V_1_vld_out;
wire    out_stream_dest_V_1_ack_in;
wire    out_stream_dest_V_1_ack_out;
reg    out_stream_dest_V_1_sel_rd;
wire    out_stream_dest_V_1_sel;
reg   [1:0] out_stream_dest_V_1_state;
wire   [31:0] my_index;
reg   [31:0] my_index_0_data_reg;
reg    my_index_0_vld_reg;
reg    my_index_0_ack_out;
wire   [31:0] length_x;
reg   [31:0] length_x_0_data_reg;
reg    length_x_0_vld_reg;
reg    length_x_0_ack_out;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state5;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire   [31:0] grp_fu_397_p2;
reg   [31:0] reg_408;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
wire   [17:0] tmp_3_fu_414_p1;
reg   [17:0] tmp_3_reg_611;
wire    ap_CS_fsm_state3;
wire   [63:0] next_mul_fu_418_p2;
reg   [63:0] next_mul_reg_616;
reg   [31:0] length_x_read_reg_621;
wire   [31:0] i_1_fu_430_p2;
reg   [31:0] i_1_reg_631;
wire   [9:0] j_1_fu_442_p2;
reg   [9:0] j_1_reg_639;
wire    ap_CS_fsm_state4;
wire   [17:0] tmp_10_fu_452_p2;
reg   [17:0] tmp_10_reg_644;
wire   [0:0] exitcond2_fu_436_p2;
wire  signed [17:0] tmp_s_fu_605_p2;
reg  signed [17:0] tmp_s_reg_649;
wire    ap_CS_fsm_state6;
wire   [9:0] j_2_fu_480_p2;
reg   [9:0] j_2_reg_657;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond1_fu_474_p2;
wire   [17:0] tmp_12_fu_505_p1;
reg   [17:0] tmp_12_reg_667;
wire    ap_CS_fsm_state9;
wire   [41:0] next_mul2_fu_509_p2;
reg   [41:0] next_mul2_reg_672;
wire   [31:0] i_3_fu_520_p2;
reg   [31:0] i_3_reg_680;
wire  signed [63:0] tmp_7_fu_526_p1;
reg  signed [63:0] tmp_7_reg_685;
wire   [0:0] exitcond6_fu_515_p2;
wire   [9:0] j_3_fu_536_p2;
reg   [9:0] j_3_reg_693;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_530_p2;
wire   [9:0] i_4_fu_567_p2;
reg   [9:0] i_4_reg_706;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_i_fu_561_p2;
wire   [31:0] temp_buf_q0;
reg   [31:0] temp_buf_load_reg_721;
wire    ap_CS_fsm_state13;
wire   [31:0] temp2_buf_q0;
reg   [31:0] temp2_buf_load_reg_726;
wire   [31:0] grp_fu_392_p2;
reg   [31:0] tmp_4_i_reg_731;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_403_p2;
reg   [31:0] tmp_2_i_reg_742;
wire    ap_CS_fsm_state39;
wire   [31:0] os_idx_2_fu_584_p2;
reg   [31:0] os_idx_2_reg_750;
wire    ap_CS_fsm_state41;
reg    ap_block_state41;
wire   [0:0] exitcond3_fu_579_p2;
wire   [0:0] last_assign_fu_595_p2;
reg   [0:0] last_assign_reg_760;
wire   [31:0] tmp_fu_600_p1;
reg   [16:0] input_buf_address0;
reg    input_buf_ce0;
reg    input_buf_we0;
wire   [31:0] input_buf_d0;
wire   [31:0] input_buf_q0;
reg   [9:0] temp_buf_address0;
reg    temp_buf_ce0;
reg    temp_buf_we0;
reg   [9:0] temp2_buf_address0;
reg    temp2_buf_ce0;
reg    temp2_buf_we0;
reg   [6:0] result_buf_address0;
reg    result_buf_ce0;
reg    result_buf_we0;
wire   [31:0] result_buf_q0;
reg   [31:0] i_reg_279;
reg   [63:0] phi_mul_reg_290;
reg   [9:0] j_reg_301;
wire   [0:0] tmp_8_fu_424_p2;
reg   [9:0] j1_reg_312;
wire    ap_CS_fsm_state8;
reg  signed [31:0] i2_reg_324;
wire    ap_CS_fsm_state40;
reg   [41:0] phi_mul1_reg_335;
reg   [9:0] j3_reg_346;
wire    ap_CS_fsm_state11;
reg   [31:0] sum_i_reg_358;
reg   [9:0] i_i_reg_370;
reg  signed [31:0] os_idx_reg_381;
wire   [63:0] tmp_12_cast_fu_466_p1;
wire  signed [63:0] tmp_13_cast_fu_495_p1;
wire   [63:0] tmp_4_fu_500_p1;
wire   [63:0] tmp_15_cast_fu_551_p1;
wire   [63:0] tmp_1_fu_556_p1;
wire   [63:0] tmp_3_i_fu_573_p1;
wire  signed [63:0] tmp_6_fu_590_p1;
reg   [31:0] grp_fu_392_p0;
reg   [31:0] grp_fu_392_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_397_p0;
reg   [31:0] grp_fu_397_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state31;
wire   [17:0] tmp_3_cast_fu_448_p1;
wire   [17:0] tmp_4_cast_fu_486_p1;
(* use_dsp48 = "no" *) wire   [17:0] tmp_11_fu_490_p2;
wire   [17:0] tmp_1_cast_fu_542_p1;
wire   [17:0] tmp_13_fu_546_p2;
wire   [10:0] tmp_s_fu_605_p0;
wire  signed [17:0] tmp_s_fu_605_p1;
reg   [1:0] grp_fu_392_opcode;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 in_stream_data_V_0_sel_rd = 1'b0;
#0 in_stream_data_V_0_sel_wr = 1'b0;
#0 in_stream_data_V_0_state = 2'd0;
#0 in_stream_dest_V_0_state = 2'd0;
#0 out_stream_data_V_1_sel_rd = 1'b0;
#0 out_stream_data_V_1_sel_wr = 1'b0;
#0 out_stream_data_V_1_state = 2'd0;
#0 out_stream_keep_V_1_sel_rd = 1'b0;
#0 out_stream_keep_V_1_state = 2'd0;
#0 out_stream_strb_V_1_sel_rd = 1'b0;
#0 out_stream_strb_V_1_state = 2'd0;
#0 out_stream_user_V_1_sel_rd = 1'b0;
#0 out_stream_user_V_1_state = 2'd0;
#0 out_stream_last_V_1_sel_rd = 1'b0;
#0 out_stream_last_V_1_sel_wr = 1'b0;
#0 out_stream_last_V_1_state = 2'd0;
#0 out_stream_id_V_1_sel_rd = 1'b0;
#0 out_stream_id_V_1_state = 2'd0;
#0 out_stream_dest_V_1_sel_rd = 1'b0;
#0 out_stream_dest_V_1_state = 2'd0;
#0 my_index_0_data_reg = 32'd0;
#0 my_index_0_vld_reg = 1'b0;
#0 length_x_0_data_reg = 32'd0;
#0 length_x_0_vld_reg = 1'b0;
end

kernel_matrix_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
kernel_matrix_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .my_index(my_index),
    .length_x(length_x)
);

kernel_matrix_inpbkb #(
    .DataWidth( 32 ),
    .AddressRange( 78400 ),
    .AddressWidth( 17 ))
input_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_buf_address0),
    .ce0(input_buf_ce0),
    .we0(input_buf_we0),
    .d0(input_buf_d0),
    .q0(input_buf_q0)
);

kernel_matrix_temcud #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
temp_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_buf_address0),
    .ce0(temp_buf_ce0),
    .we0(temp_buf_we0),
    .d0(input_buf_q0),
    .q0(temp_buf_q0)
);

kernel_matrix_temcud #(
    .DataWidth( 32 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
temp2_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp2_buf_address0),
    .ce0(temp2_buf_ce0),
    .we0(temp2_buf_we0),
    .d0(input_buf_q0),
    .q0(temp2_buf_q0)
);

kernel_matrix_reseOg #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
result_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_buf_address0),
    .ce0(result_buf_ce0),
    .we0(result_buf_we0),
    .d0(tmp_2_i_reg_742),
    .q0(result_buf_q0)
);

kernel_matrix_fadfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_fadfYi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_392_p0),
    .din1(grp_fu_392_p1),
    .opcode(grp_fu_392_opcode),
    .ce(1'b1),
    .dout(grp_fu_392_p2)
);

kernel_matrix_fmug8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_fmug8j_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_397_p0),
    .din1(grp_fu_397_p1),
    .ce(1'b1),
    .dout(grp_fu_397_p2)
);

kernel_matrix_fexhbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_matrix_fexhbi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(reg_408),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

kernel_matrix_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
kernel_matrix_mulibs_U4(
    .din0(tmp_s_fu_605_p0),
    .din1(tmp_s_fu_605_p1),
    .dout(tmp_s_fu_605_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_out == 1'b1) & (in_stream_data_V_0_vld_out == 1'b1))) begin
            in_stream_data_V_0_sel_rd <= ~in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_in == 1'b1) & (in_stream_data_V_0_vld_in == 1'b1))) begin
            in_stream_data_V_0_sel_wr <= ~in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd2;
        end else if ((((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd1;
        end else if ((((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b1)) | ((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b1)) | (~((in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)) & ~((in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)) & (in_stream_data_V_0_state == 2'd3)))) begin
            in_stream_data_V_0_state <= 2'd3;
        end else begin
            in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_dest_V_0_state == 2'd2) & (in_stream_dest_V_0_vld_in == 1'b0)) | ((in_stream_dest_V_0_state == 2'd3) & (in_stream_dest_V_0_vld_in == 1'b0) & (in_stream_dest_V_0_ack_out == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd2;
        end else if ((((in_stream_dest_V_0_state == 2'd1) & (in_stream_dest_V_0_ack_out == 1'b0)) | ((in_stream_dest_V_0_state == 2'd3) & (in_stream_dest_V_0_ack_out == 1'b0) & (in_stream_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream_dest_V_0_vld_in == 1'b0) & (in_stream_dest_V_0_ack_out == 1'b1)) & ~((in_stream_dest_V_0_ack_out == 1'b0) & (in_stream_dest_V_0_vld_in == 1'b1)) & (in_stream_dest_V_0_state == 2'd3)) | ((in_stream_dest_V_0_state == 2'd1) & (in_stream_dest_V_0_ack_out == 1'b1)) | ((in_stream_dest_V_0_state == 2'd2) & (in_stream_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_dest_V_0_state <= 2'd3;
        end else begin
            in_stream_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_out == 1'b1) & (out_stream_data_V_1_vld_out == 1'b1))) begin
            out_stream_data_V_1_sel_rd <= ~out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_data_V_1_ack_in == 1'b1) & (out_stream_data_V_1_vld_in == 1'b1))) begin
            out_stream_data_V_1_sel_wr <= ~out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd2;
        end else if ((((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b0)) | ((out_stream_data_V_1_state == 2'd3) & (out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd1;
        end else if (((~((out_stream_data_V_1_vld_in == 1'b0) & (out_stream_data_V_1_ack_out == 1'b1)) & ~((out_stream_data_V_1_ack_out == 1'b0) & (out_stream_data_V_1_vld_in == 1'b1)) & (out_stream_data_V_1_state == 2'd3)) | ((out_stream_data_V_1_state == 2'd1) & (out_stream_data_V_1_ack_out == 1'b1)) | ((out_stream_data_V_1_state == 2'd2) & (out_stream_data_V_1_vld_in == 1'b1)))) begin
            out_stream_data_V_1_state <= 2'd3;
        end else begin
            out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_dest_V_1_ack_out == 1'b1) & (out_stream_dest_V_1_vld_out == 1'b1))) begin
            out_stream_dest_V_1_sel_rd <= ~out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b0)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd2;
        end else if ((((out_stream_dest_V_1_state == 2'd1) & (out_stream_dest_V_1_ack_out == 1'b0)) | ((out_stream_dest_V_1_state == 2'd3) & (out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((out_stream_dest_V_1_vld_in == 1'b0) & (out_stream_dest_V_1_ack_out == 1'b1)) & ~((out_stream_dest_V_1_ack_out == 1'b0) & (out_stream_dest_V_1_vld_in == 1'b1)) & (out_stream_dest_V_1_state == 2'd3)) | ((out_stream_dest_V_1_state == 2'd1) & (out_stream_dest_V_1_ack_out == 1'b1)) | ((out_stream_dest_V_1_state == 2'd2) & (out_stream_dest_V_1_vld_in == 1'b1)))) begin
            out_stream_dest_V_1_state <= 2'd3;
        end else begin
            out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_id_V_1_ack_out == 1'b1) & (out_stream_id_V_1_vld_out == 1'b1))) begin
            out_stream_id_V_1_sel_rd <= ~out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b0)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd2;
        end else if ((((out_stream_id_V_1_state == 2'd1) & (out_stream_id_V_1_ack_out == 1'b0)) | ((out_stream_id_V_1_state == 2'd3) & (out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd1;
        end else if (((~((out_stream_id_V_1_vld_in == 1'b0) & (out_stream_id_V_1_ack_out == 1'b1)) & ~((out_stream_id_V_1_ack_out == 1'b0) & (out_stream_id_V_1_vld_in == 1'b1)) & (out_stream_id_V_1_state == 2'd3)) | ((out_stream_id_V_1_state == 2'd1) & (out_stream_id_V_1_ack_out == 1'b1)) | ((out_stream_id_V_1_state == 2'd2) & (out_stream_id_V_1_vld_in == 1'b1)))) begin
            out_stream_id_V_1_state <= 2'd3;
        end else begin
            out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_keep_V_1_ack_out == 1'b1) & (out_stream_keep_V_1_vld_out == 1'b1))) begin
            out_stream_keep_V_1_sel_rd <= ~out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b0)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd2;
        end else if ((((out_stream_keep_V_1_state == 2'd1) & (out_stream_keep_V_1_ack_out == 1'b0)) | ((out_stream_keep_V_1_state == 2'd3) & (out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((out_stream_keep_V_1_vld_in == 1'b0) & (out_stream_keep_V_1_ack_out == 1'b1)) & ~((out_stream_keep_V_1_ack_out == 1'b0) & (out_stream_keep_V_1_vld_in == 1'b1)) & (out_stream_keep_V_1_state == 2'd3)) | ((out_stream_keep_V_1_state == 2'd1) & (out_stream_keep_V_1_ack_out == 1'b1)) | ((out_stream_keep_V_1_state == 2'd2) & (out_stream_keep_V_1_vld_in == 1'b1)))) begin
            out_stream_keep_V_1_state <= 2'd3;
        end else begin
            out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_out == 1'b1) & (out_stream_last_V_1_vld_out == 1'b1))) begin
            out_stream_last_V_1_sel_rd <= ~out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_last_V_1_ack_in == 1'b1) & (out_stream_last_V_1_vld_in == 1'b1))) begin
            out_stream_last_V_1_sel_wr <= ~out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd2;
        end else if ((((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b0)) | ((out_stream_last_V_1_state == 2'd3) & (out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_last_V_1_vld_in == 1'b0) & (out_stream_last_V_1_ack_out == 1'b1)) & ~((out_stream_last_V_1_ack_out == 1'b0) & (out_stream_last_V_1_vld_in == 1'b1)) & (out_stream_last_V_1_state == 2'd3)) | ((out_stream_last_V_1_state == 2'd1) & (out_stream_last_V_1_ack_out == 1'b1)) | ((out_stream_last_V_1_state == 2'd2) & (out_stream_last_V_1_vld_in == 1'b1)))) begin
            out_stream_last_V_1_state <= 2'd3;
        end else begin
            out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_strb_V_1_ack_out == 1'b1) & (out_stream_strb_V_1_vld_out == 1'b1))) begin
            out_stream_strb_V_1_sel_rd <= ~out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b0)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd2;
        end else if ((((out_stream_strb_V_1_state == 2'd1) & (out_stream_strb_V_1_ack_out == 1'b0)) | ((out_stream_strb_V_1_state == 2'd3) & (out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((out_stream_strb_V_1_vld_in == 1'b0) & (out_stream_strb_V_1_ack_out == 1'b1)) & ~((out_stream_strb_V_1_ack_out == 1'b0) & (out_stream_strb_V_1_vld_in == 1'b1)) & (out_stream_strb_V_1_state == 2'd3)) | ((out_stream_strb_V_1_state == 2'd1) & (out_stream_strb_V_1_ack_out == 1'b1)) | ((out_stream_strb_V_1_state == 2'd2) & (out_stream_strb_V_1_vld_in == 1'b1)))) begin
            out_stream_strb_V_1_state <= 2'd3;
        end else begin
            out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_user_V_1_ack_out == 1'b1) & (out_stream_user_V_1_vld_out == 1'b1))) begin
            out_stream_user_V_1_sel_rd <= ~out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd2;
        end else if ((((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b0)) | ((out_stream_user_V_1_state == 2'd3) & (out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd1;
        end else if (((~((out_stream_user_V_1_vld_in == 1'b0) & (out_stream_user_V_1_ack_out == 1'b1)) & ~((out_stream_user_V_1_ack_out == 1'b0) & (out_stream_user_V_1_vld_in == 1'b1)) & (out_stream_user_V_1_state == 2'd3)) | ((out_stream_user_V_1_state == 2'd1) & (out_stream_user_V_1_ack_out == 1'b1)) | ((out_stream_user_V_1_state == 2'd2) & (out_stream_user_V_1_vld_in == 1'b1)))) begin
            out_stream_user_V_1_state <= 2'd3;
        end else begin
            out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i2_reg_324 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        i2_reg_324 <= i_3_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_530_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_i_reg_370 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_i_reg_370 <= i_4_reg_706;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_436_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_279 <= i_1_reg_631;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_279 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j1_reg_312 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j1_reg_312 <= j_2_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j3_reg_346 <= j_3_reg_693;
    end else if (((exitcond6_fu_515_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j3_reg_346 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_301 <= j_1_reg_639;
    end else if (((tmp_8_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_301 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        os_idx_reg_381 <= 32'd0;
    end else if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        os_idx_reg_381 <= os_idx_2_reg_750;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul1_reg_335 <= 42'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        phi_mul1_reg_335 <= next_mul2_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_436_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_290 <= next_mul_reg_616;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_290 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_530_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        sum_i_reg_358 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        sum_i_reg_358 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_631 <= i_1_fu_430_p2;
        length_x_read_reg_621 <= length_x_0_data_reg;
        next_mul_reg_616 <= next_mul_fu_418_p2;
        tmp_3_reg_611 <= tmp_3_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_3_reg_680 <= i_3_fu_520_p2;
        next_mul2_reg_672 <= next_mul2_fu_509_p2;
        tmp_12_reg_667 <= tmp_12_fu_505_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_4_reg_706 <= i_4_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_A == 1'b1)) begin
        in_stream_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_B == 1'b1)) begin
        in_stream_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_639 <= j_1_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_657 <= j_2_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_3_reg_693 <= j_3_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        last_assign_reg_760 <= last_assign_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_x_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (length_x_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (length_x_0_vld_reg == 1'b1)))) begin
        length_x_0_data_reg <= length_x;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (my_index_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (my_index_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (my_index_0_vld_reg == 1'b1)))) begin
        my_index_0_data_reg <= my_index;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41))) begin
        os_idx_2_reg_750 <= os_idx_2_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_A == 1'b1)) begin
        out_stream_data_V_1_payload_A <= tmp_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_data_V_1_load_B == 1'b1)) begin
        out_stream_data_V_1_payload_B <= tmp_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_A == 1'b1)) begin
        out_stream_last_V_1_payload_A <= last_assign_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_last_V_1_load_B == 1'b1)) begin
        out_stream_last_V_1_payload_B <= last_assign_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_408 <= grp_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp2_buf_load_reg_726 <= temp2_buf_q0;
        temp_buf_load_reg_721 <= temp_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_436_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_10_reg_644 <= tmp_10_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_2_i_reg_742 <= grp_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_4_i_reg_731 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_515_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_7_reg_685 <= tmp_7_fu_526_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_s_reg_649 <= tmp_s_fu_605_p2;
    end
end

always @ (*) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_392_opcode = 2'd0;
    end else begin
        grp_fu_392_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_392_p0 = sum_i_reg_358;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_p0 = temp_buf_load_reg_721;
    end else begin
        grp_fu_392_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_392_p1 = reg_408;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_392_p1 = temp2_buf_load_reg_726;
    end else begin
        grp_fu_392_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_397_p0 = tmp_4_i_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_397_p0 = sum_i_reg_358;
    end else begin
        grp_fu_397_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_397_p1 = tmp_4_i_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_397_p1 = 32'd3175926989;
    end else begin
        grp_fu_397_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_stream_TDATA_blk_n = in_stream_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_data_V_0_sel == 1'b1)) begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B;
    end else begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        in_stream_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_buf_address0 = tmp_15_cast_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_buf_address0 = tmp_13_cast_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_buf_address0 = tmp_12_cast_fu_466_p1;
    end else begin
        input_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | ((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_buf_ce0 = 1'b1;
    end else begin
        input_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        input_buf_we0 = 1'b1;
    end else begin
        input_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        length_x_0_ack_out = 1'b1;
    end else begin
        length_x_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        my_index_0_ack_out = 1'b1;
    end else begin
        my_index_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_TDATA_blk_n = out_stream_data_V_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_data_V_1_sel == 1'b1)) begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B;
    end else begin
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_last_V_1_sel == 1'b1)) begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_B;
    end else begin
        out_stream_last_V_1_data_out = out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        result_buf_address0 = tmp_6_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        result_buf_address0 = tmp_7_reg_685;
    end else begin
        result_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state41)))) begin
        result_buf_ce0 = 1'b1;
    end else begin
        result_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        result_buf_we0 = 1'b1;
    end else begin
        result_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp2_buf_address0 = tmp_3_i_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp2_buf_address0 = tmp_1_fu_556_p1;
    end else begin
        temp2_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        temp2_buf_ce0 = 1'b1;
    end else begin
        temp2_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp2_buf_we0 = 1'b1;
    end else begin
        temp2_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_buf_address0 = tmp_3_i_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_buf_address0 = tmp_4_fu_500_p1;
    end else begin
        temp_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state12))) begin
        temp_buf_ce0 = 1'b1;
    end else begin
        temp_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_buf_we0 = 1'b1;
    end else begin
        temp_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_8_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_436_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((in_stream_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond1_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond6_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond_fu_530_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_i_fu_561_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state41 : begin
            if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0)) & (exitcond3_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((out_stream_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state41 = ((out_stream_dest_V_1_ack_in == 1'b0) | (out_stream_id_V_1_ack_in == 1'b0) | (out_stream_last_V_1_ack_in == 1'b0) | (out_stream_user_V_1_ack_in == 1'b0) | (out_stream_strb_V_1_ack_in == 1'b0) | (out_stream_keep_V_1_ack_in == 1'b0) | (out_stream_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_474_p2 = ((j1_reg_312 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond2_fu_436_p2 = ((j_reg_301 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond3_fu_579_p2 = ((os_idx_reg_381 == length_x_read_reg_621) ? 1'b1 : 1'b0);

assign exitcond6_fu_515_p2 = ((i2_reg_324 == length_x_read_reg_621) ? 1'b1 : 1'b0);

assign exitcond_fu_530_p2 = ((j3_reg_346 == 10'd784) ? 1'b1 : 1'b0);

assign i_1_fu_430_p2 = (32'd1 + i_reg_279);

assign i_3_fu_520_p2 = ($signed(32'd1) + $signed(i2_reg_324));

assign i_4_fu_567_p2 = (i_i_reg_370 + 10'd1);

assign in_stream_TREADY = in_stream_dest_V_0_state[1'd1];

assign in_stream_data_V_0_ack_in = in_stream_data_V_0_state[1'd1];

assign in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full & ~in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_load_B = (in_stream_data_V_0_state_cmp_full & in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd;

assign in_stream_data_V_0_state_cmp_full = ((in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_data_V_0_vld_in = in_stream_TVALID;

assign in_stream_data_V_0_vld_out = in_stream_data_V_0_state[1'd0];

assign in_stream_dest_V_0_vld_in = in_stream_TVALID;

assign input_buf_d0 = in_stream_data_V_0_data_out;

assign j_1_fu_442_p2 = (j_reg_301 + 10'd1);

assign j_2_fu_480_p2 = (j1_reg_312 + 10'd1);

assign j_3_fu_536_p2 = (j3_reg_346 + 10'd1);

assign last_assign_fu_595_p2 = ((os_idx_2_fu_584_p2 == length_x_read_reg_621) ? 1'b1 : 1'b0);

assign next_mul2_fu_509_p2 = (42'd784 + phi_mul1_reg_335);

assign next_mul_fu_418_p2 = (64'd784 + phi_mul_reg_290);

assign os_idx_2_fu_584_p2 = ($signed(os_idx_reg_381) + $signed(32'd1));

assign out_stream_TDATA = out_stream_data_V_1_data_out;

assign out_stream_TDEST = out_stream_dest_V_1_data_out;

assign out_stream_TID = out_stream_id_V_1_data_out;

assign out_stream_TKEEP = out_stream_keep_V_1_data_out;

assign out_stream_TLAST = out_stream_last_V_1_data_out;

assign out_stream_TSTRB = out_stream_strb_V_1_data_out;

assign out_stream_TUSER = out_stream_user_V_1_data_out;

assign out_stream_TVALID = out_stream_dest_V_1_state[1'd0];

assign out_stream_data_V_1_ack_in = out_stream_data_V_1_state[1'd1];

assign out_stream_data_V_1_ack_out = out_stream_TREADY;

assign out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full & ~out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_load_B = (out_stream_data_V_1_state_cmp_full & out_stream_data_V_1_sel_wr);

assign out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd;

assign out_stream_data_V_1_state_cmp_full = ((out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_data_V_1_vld_out = out_stream_data_V_1_state[1'd0];

assign out_stream_dest_V_1_ack_in = out_stream_dest_V_1_state[1'd1];

assign out_stream_dest_V_1_ack_out = out_stream_TREADY;

assign out_stream_dest_V_1_data_out = 5'd0;

assign out_stream_dest_V_1_sel = out_stream_dest_V_1_sel_rd;

assign out_stream_dest_V_1_vld_out = out_stream_dest_V_1_state[1'd0];

assign out_stream_id_V_1_ack_in = out_stream_id_V_1_state[1'd1];

assign out_stream_id_V_1_ack_out = out_stream_TREADY;

assign out_stream_id_V_1_data_out = 5'd0;

assign out_stream_id_V_1_sel = out_stream_id_V_1_sel_rd;

assign out_stream_id_V_1_vld_out = out_stream_id_V_1_state[1'd0];

assign out_stream_keep_V_1_ack_in = out_stream_keep_V_1_state[1'd1];

assign out_stream_keep_V_1_ack_out = out_stream_TREADY;

assign out_stream_keep_V_1_data_out = 4'd15;

assign out_stream_keep_V_1_sel = out_stream_keep_V_1_sel_rd;

assign out_stream_keep_V_1_vld_out = out_stream_keep_V_1_state[1'd0];

assign out_stream_last_V_1_ack_in = out_stream_last_V_1_state[1'd1];

assign out_stream_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_last_V_1_load_A = (out_stream_last_V_1_state_cmp_full & ~out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_load_B = (out_stream_last_V_1_state_cmp_full & out_stream_last_V_1_sel_wr);

assign out_stream_last_V_1_sel = out_stream_last_V_1_sel_rd;

assign out_stream_last_V_1_state_cmp_full = ((out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_last_V_1_vld_out = out_stream_last_V_1_state[1'd0];

assign out_stream_strb_V_1_ack_in = out_stream_strb_V_1_state[1'd1];

assign out_stream_strb_V_1_ack_out = out_stream_TREADY;

assign out_stream_strb_V_1_data_out = 4'd15;

assign out_stream_strb_V_1_sel = out_stream_strb_V_1_sel_rd;

assign out_stream_strb_V_1_vld_out = out_stream_strb_V_1_state[1'd0];

assign out_stream_user_V_1_ack_in = out_stream_user_V_1_state[1'd1];

assign out_stream_user_V_1_ack_out = out_stream_TREADY;

assign out_stream_user_V_1_data_out = 4'd0;

assign out_stream_user_V_1_sel = out_stream_user_V_1_sel_rd;

assign out_stream_user_V_1_vld_out = out_stream_user_V_1_state[1'd0];

assign tmp_10_fu_452_p2 = (tmp_3_reg_611 + tmp_3_cast_fu_448_p1);

assign tmp_11_fu_490_p2 = ($signed(tmp_s_reg_649) + $signed(tmp_4_cast_fu_486_p1));

assign tmp_12_cast_fu_466_p1 = tmp_10_reg_644;

assign tmp_12_fu_505_p1 = phi_mul1_reg_335[17:0];

assign tmp_13_cast_fu_495_p1 = $signed(tmp_11_fu_490_p2);

assign tmp_13_fu_546_p2 = (tmp_12_reg_667 + tmp_1_cast_fu_542_p1);

assign tmp_15_cast_fu_551_p1 = tmp_13_fu_546_p2;

assign tmp_1_cast_fu_542_p1 = j3_reg_346;

assign tmp_1_fu_556_p1 = j3_reg_346;

assign tmp_3_cast_fu_448_p1 = j_reg_301;

assign tmp_3_fu_414_p1 = phi_mul_reg_290[17:0];

assign tmp_3_i_fu_573_p1 = i_i_reg_370;

assign tmp_4_cast_fu_486_p1 = j1_reg_312;

assign tmp_4_fu_500_p1 = j1_reg_312;

assign tmp_6_fu_590_p1 = os_idx_reg_381;

assign tmp_7_fu_526_p1 = i2_reg_324;

assign tmp_8_fu_424_p2 = ((i_reg_279 < length_x_0_data_reg) ? 1'b1 : 1'b0);

assign tmp_fu_600_p1 = result_buf_q0;

assign tmp_i_fu_561_p2 = ((i_i_reg_370 == 10'd784) ? 1'b1 : 1'b0);

assign tmp_s_fu_605_p0 = 18'd784;

assign tmp_s_fu_605_p1 = my_index_0_data_reg[17:0];

endmodule //kernel_matrix
