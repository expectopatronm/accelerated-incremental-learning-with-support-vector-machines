// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel_matrix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int kernel_matrix::C_S_AXI_DATA_WIDTH = "100000";
const int kernel_matrix::C_S_AXI_WSTRB_WIDTH = "100";
const int kernel_matrix::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic kernel_matrix::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> kernel_matrix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> kernel_matrix::ap_const_lv4_0 = "0000";
const sc_lv<1> kernel_matrix::ap_const_lv1_0 = "0";
const sc_lv<5> kernel_matrix::ap_const_lv5_0 = "00000";
const sc_logic kernel_matrix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> kernel_matrix::ap_const_lv2_0 = "00";
const sc_lv<2> kernel_matrix::ap_const_lv2_1 = "1";
const bool kernel_matrix::ap_const_boolean_1 = true;

kernel_matrix::kernel_matrix(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_matrix_CONTROL_BUS_s_axi_U = new kernel_matrix_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("kernel_matrix_CONTROL_BUS_s_axi_U");
    kernel_matrix_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    kernel_matrix_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    kernel_matrix_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    kernel_matrix_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    kernel_matrix_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    kernel_matrix_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    kernel_matrix_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    kernel_matrix_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    kernel_matrix_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    kernel_matrix_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    kernel_matrix_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    kernel_matrix_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    kernel_matrix_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    kernel_matrix_CONTROL_BUS_s_axi_U->length_x(length_x);
    kernel_matrix_CONTROL_BUS_s_axi_U->tile_size(tile_size);
    kernel_matrix_CONTROL_BUS_s_axi_U->remaining_size(remaining_size);
    index_buf_U = new kernel_matrix_indibs("index_buf_U");
    index_buf_U->clk(ap_clk);
    index_buf_U->reset(ap_rst_n_inv);
    index_buf_U->i_address0(Loop_LOOP_1_proc10_U0_index_buf_address0);
    index_buf_U->i_ce0(Loop_LOOP_1_proc10_U0_index_buf_ce0);
    index_buf_U->i_we0(Loop_LOOP_1_proc10_U0_index_buf_we0);
    index_buf_U->i_d0(Loop_LOOP_1_proc10_U0_index_buf_d0);
    index_buf_U->i_q0(index_buf_i_q0);
    index_buf_U->t_address0(Loop_LOOP_2_proc9_U0_index_buf_address0);
    index_buf_U->t_ce0(Loop_LOOP_2_proc9_U0_index_buf_ce0);
    index_buf_U->t_we0(ap_var_for_const1);
    index_buf_U->t_d0(ap_var_for_const2);
    index_buf_U->t_q0(index_buf_t_q0);
    index_buf_U->i_ce(ap_var_for_const0);
    index_buf_U->t_ce(ap_var_for_const0);
    index_buf_U->i_full_n(index_buf_i_full_n);
    index_buf_U->i_write(Loop_LOOP_1_proc10_U0_ap_done);
    index_buf_U->t_empty_n(index_buf_t_empty_n);
    index_buf_U->t_read(Loop_LOOP_2_proc9_U0_ap_ready);
    result_buf_U = new kernel_matrix_resjbC("result_buf_U");
    result_buf_U->clk(ap_clk);
    result_buf_U->reset(ap_rst_n_inv);
    result_buf_U->i_address0(Loop_LOOP_2_proc9_U0_result_buf_address0);
    result_buf_U->i_ce0(Loop_LOOP_2_proc9_U0_result_buf_ce0);
    result_buf_U->i_we0(Loop_LOOP_2_proc9_U0_result_buf_we0);
    result_buf_U->i_d0(Loop_LOOP_2_proc9_U0_result_buf_d0);
    result_buf_U->i_q0(result_buf_i_q0);
    result_buf_U->t_address0(Loop_LOOP_6_proc_U0_result_buf_address0);
    result_buf_U->t_ce0(Loop_LOOP_6_proc_U0_result_buf_ce0);
    result_buf_U->t_we0(ap_var_for_const1);
    result_buf_U->t_d0(ap_var_for_const2);
    result_buf_U->t_q0(result_buf_t_q0);
    result_buf_U->i_ce(ap_var_for_const0);
    result_buf_U->t_ce(ap_var_for_const0);
    result_buf_U->i_full_n(result_buf_i_full_n);
    result_buf_U->i_write(Loop_LOOP_2_proc9_U0_ap_done);
    result_buf_U->t_empty_n(result_buf_t_empty_n);
    result_buf_U->t_read(Loop_LOOP_6_proc_U0_ap_ready);
    Loop_LOOP_1_proc10_U0 = new Loop_LOOP_1_proc10("Loop_LOOP_1_proc10_U0");
    Loop_LOOP_1_proc10_U0->ap_clk(ap_clk);
    Loop_LOOP_1_proc10_U0->ap_rst(ap_rst_n_inv);
    Loop_LOOP_1_proc10_U0->ap_start(Loop_LOOP_1_proc10_U0_ap_start);
    Loop_LOOP_1_proc10_U0->ap_done(Loop_LOOP_1_proc10_U0_ap_done);
    Loop_LOOP_1_proc10_U0->ap_continue(Loop_LOOP_1_proc10_U0_ap_continue);
    Loop_LOOP_1_proc10_U0->ap_idle(Loop_LOOP_1_proc10_U0_ap_idle);
    Loop_LOOP_1_proc10_U0->ap_ready(Loop_LOOP_1_proc10_U0_ap_ready);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TDATA(kernel_index_stream_TDATA);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TVALID(kernel_index_stream_TVALID);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TREADY(Loop_LOOP_1_proc10_U0_kernel_index_stream_TREADY);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TSTRB(kernel_index_stream_TSTRB);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TKEEP(kernel_index_stream_TKEEP);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TUSER(kernel_index_stream_TUSER);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TLAST(kernel_index_stream_TLAST);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TID(kernel_index_stream_TID);
    Loop_LOOP_1_proc10_U0->kernel_index_stream_TDEST(kernel_index_stream_TDEST);
    Loop_LOOP_1_proc10_U0->index_buf_address0(Loop_LOOP_1_proc10_U0_index_buf_address0);
    Loop_LOOP_1_proc10_U0->index_buf_ce0(Loop_LOOP_1_proc10_U0_index_buf_ce0);
    Loop_LOOP_1_proc10_U0->index_buf_we0(Loop_LOOP_1_proc10_U0_index_buf_we0);
    Loop_LOOP_1_proc10_U0->index_buf_d0(Loop_LOOP_1_proc10_U0_index_buf_d0);
    Loop_LOOP_1_proc10_U0->length_x(length_x);
    Loop_LOOP_1_proc10_U0->tile_size(tile_size);
    Loop_LOOP_1_proc10_U0->remaining_size(remaining_size);
    Loop_LOOP_1_proc10_U0->length_x_out_din(Loop_LOOP_1_proc10_U0_length_x_out_din);
    Loop_LOOP_1_proc10_U0->length_x_out_full_n(length_x_c_full_n);
    Loop_LOOP_1_proc10_U0->length_x_out_write(Loop_LOOP_1_proc10_U0_length_x_out_write);
    Loop_LOOP_1_proc10_U0->tile_size_out_din(Loop_LOOP_1_proc10_U0_tile_size_out_din);
    Loop_LOOP_1_proc10_U0->tile_size_out_full_n(tile_size_c_full_n);
    Loop_LOOP_1_proc10_U0->tile_size_out_write(Loop_LOOP_1_proc10_U0_tile_size_out_write);
    Loop_LOOP_1_proc10_U0->remaining_size_out_din(Loop_LOOP_1_proc10_U0_remaining_size_out_din);
    Loop_LOOP_1_proc10_U0->remaining_size_out_full_n(remaining_size_c_full_n);
    Loop_LOOP_1_proc10_U0->remaining_size_out_write(Loop_LOOP_1_proc10_U0_remaining_size_out_write);
    Loop_LOOP_2_proc9_U0 = new Loop_LOOP_2_proc9("Loop_LOOP_2_proc9_U0");
    Loop_LOOP_2_proc9_U0->ap_clk(ap_clk);
    Loop_LOOP_2_proc9_U0->ap_rst(ap_rst_n_inv);
    Loop_LOOP_2_proc9_U0->ap_start(Loop_LOOP_2_proc9_U0_ap_start);
    Loop_LOOP_2_proc9_U0->ap_done(Loop_LOOP_2_proc9_U0_ap_done);
    Loop_LOOP_2_proc9_U0->ap_continue(Loop_LOOP_2_proc9_U0_ap_continue);
    Loop_LOOP_2_proc9_U0->ap_idle(Loop_LOOP_2_proc9_U0_ap_idle);
    Loop_LOOP_2_proc9_U0->ap_ready(Loop_LOOP_2_proc9_U0_ap_ready);
    Loop_LOOP_2_proc9_U0->tile_size_dout(tile_size_c_dout);
    Loop_LOOP_2_proc9_U0->tile_size_empty_n(tile_size_c_empty_n);
    Loop_LOOP_2_proc9_U0->tile_size_read(Loop_LOOP_2_proc9_U0_tile_size_read);
    Loop_LOOP_2_proc9_U0->remaining_size_dout(remaining_size_c_dout);
    Loop_LOOP_2_proc9_U0->remaining_size_empty_n(remaining_size_c_empty_n);
    Loop_LOOP_2_proc9_U0->remaining_size_read(Loop_LOOP_2_proc9_U0_remaining_size_read);
    Loop_LOOP_2_proc9_U0->result_buf_address0(Loop_LOOP_2_proc9_U0_result_buf_address0);
    Loop_LOOP_2_proc9_U0->result_buf_ce0(Loop_LOOP_2_proc9_U0_result_buf_ce0);
    Loop_LOOP_2_proc9_U0->result_buf_we0(Loop_LOOP_2_proc9_U0_result_buf_we0);
    Loop_LOOP_2_proc9_U0->result_buf_d0(Loop_LOOP_2_proc9_U0_result_buf_d0);
    Loop_LOOP_2_proc9_U0->index_buf_address0(Loop_LOOP_2_proc9_U0_index_buf_address0);
    Loop_LOOP_2_proc9_U0->index_buf_ce0(Loop_LOOP_2_proc9_U0_index_buf_ce0);
    Loop_LOOP_2_proc9_U0->index_buf_q0(index_buf_t_q0);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TDATA(kernel_in_stream_TDATA);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TVALID(kernel_in_stream_TVALID);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TREADY(Loop_LOOP_2_proc9_U0_kernel_in_stream_TREADY);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TSTRB(kernel_in_stream_TSTRB);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TKEEP(kernel_in_stream_TKEEP);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TUSER(kernel_in_stream_TUSER);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TLAST(kernel_in_stream_TLAST);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TID(kernel_in_stream_TID);
    Loop_LOOP_2_proc9_U0->kernel_in_stream_TDEST(kernel_in_stream_TDEST);
    Loop_LOOP_6_proc_U0 = new Loop_LOOP_6_proc("Loop_LOOP_6_proc_U0");
    Loop_LOOP_6_proc_U0->ap_clk(ap_clk);
    Loop_LOOP_6_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_LOOP_6_proc_U0->ap_start(Loop_LOOP_6_proc_U0_ap_start);
    Loop_LOOP_6_proc_U0->ap_done(Loop_LOOP_6_proc_U0_ap_done);
    Loop_LOOP_6_proc_U0->ap_continue(Loop_LOOP_6_proc_U0_ap_continue);
    Loop_LOOP_6_proc_U0->ap_idle(Loop_LOOP_6_proc_U0_ap_idle);
    Loop_LOOP_6_proc_U0->ap_ready(Loop_LOOP_6_proc_U0_ap_ready);
    Loop_LOOP_6_proc_U0->length_x_dout(length_x_c_dout);
    Loop_LOOP_6_proc_U0->length_x_empty_n(length_x_c_empty_n);
    Loop_LOOP_6_proc_U0->length_x_read(Loop_LOOP_6_proc_U0_length_x_read);
    Loop_LOOP_6_proc_U0->result_buf_address0(Loop_LOOP_6_proc_U0_result_buf_address0);
    Loop_LOOP_6_proc_U0->result_buf_ce0(Loop_LOOP_6_proc_U0_result_buf_ce0);
    Loop_LOOP_6_proc_U0->result_buf_q0(result_buf_t_q0);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TDATA(Loop_LOOP_6_proc_U0_kernel_out_stream_TDATA);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TVALID(Loop_LOOP_6_proc_U0_kernel_out_stream_TVALID);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TREADY(kernel_out_stream_TREADY);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TKEEP(Loop_LOOP_6_proc_U0_kernel_out_stream_TKEEP);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TSTRB(Loop_LOOP_6_proc_U0_kernel_out_stream_TSTRB);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TUSER(Loop_LOOP_6_proc_U0_kernel_out_stream_TUSER);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TLAST(Loop_LOOP_6_proc_U0_kernel_out_stream_TLAST);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TID(Loop_LOOP_6_proc_U0_kernel_out_stream_TID);
    Loop_LOOP_6_proc_U0->kernel_out_stream_TDEST(Loop_LOOP_6_proc_U0_kernel_out_stream_TDEST);
    length_x_c_U = new fifo_w32_d3_A("length_x_c_U");
    length_x_c_U->clk(ap_clk);
    length_x_c_U->reset(ap_rst_n_inv);
    length_x_c_U->if_read_ce(ap_var_for_const0);
    length_x_c_U->if_write_ce(ap_var_for_const0);
    length_x_c_U->if_din(Loop_LOOP_1_proc10_U0_length_x_out_din);
    length_x_c_U->if_full_n(length_x_c_full_n);
    length_x_c_U->if_write(Loop_LOOP_1_proc10_U0_length_x_out_write);
    length_x_c_U->if_dout(length_x_c_dout);
    length_x_c_U->if_empty_n(length_x_c_empty_n);
    length_x_c_U->if_read(Loop_LOOP_6_proc_U0_length_x_read);
    tile_size_c_U = new fifo_w32_d2_A("tile_size_c_U");
    tile_size_c_U->clk(ap_clk);
    tile_size_c_U->reset(ap_rst_n_inv);
    tile_size_c_U->if_read_ce(ap_var_for_const0);
    tile_size_c_U->if_write_ce(ap_var_for_const0);
    tile_size_c_U->if_din(Loop_LOOP_1_proc10_U0_tile_size_out_din);
    tile_size_c_U->if_full_n(tile_size_c_full_n);
    tile_size_c_U->if_write(Loop_LOOP_1_proc10_U0_tile_size_out_write);
    tile_size_c_U->if_dout(tile_size_c_dout);
    tile_size_c_U->if_empty_n(tile_size_c_empty_n);
    tile_size_c_U->if_read(Loop_LOOP_2_proc9_U0_tile_size_read);
    remaining_size_c_U = new fifo_w32_d2_A("remaining_size_c_U");
    remaining_size_c_U->clk(ap_clk);
    remaining_size_c_U->reset(ap_rst_n_inv);
    remaining_size_c_U->if_read_ce(ap_var_for_const0);
    remaining_size_c_U->if_write_ce(ap_var_for_const0);
    remaining_size_c_U->if_din(Loop_LOOP_1_proc10_U0_remaining_size_out_din);
    remaining_size_c_U->if_full_n(remaining_size_c_full_n);
    remaining_size_c_U->if_write(Loop_LOOP_1_proc10_U0_remaining_size_out_write);
    remaining_size_c_U->if_dout(remaining_size_c_dout);
    remaining_size_c_U->if_empty_n(remaining_size_c_empty_n);
    remaining_size_c_U->if_read(Loop_LOOP_2_proc9_U0_remaining_size_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Loop_LOOP_1_proc10_U0_ap_continue);
    sensitive << ( index_buf_i_full_n );

    SC_METHOD(thread_Loop_LOOP_1_proc10_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready );

    SC_METHOD(thread_Loop_LOOP_1_proc10_U0_index_buf_full_n);
    sensitive << ( index_buf_i_full_n );

    SC_METHOD(thread_Loop_LOOP_1_proc10_U0_start_full_n);

    SC_METHOD(thread_Loop_LOOP_1_proc10_U0_start_write);

    SC_METHOD(thread_Loop_LOOP_2_proc9_U0_ap_continue);
    sensitive << ( result_buf_i_full_n );

    SC_METHOD(thread_Loop_LOOP_2_proc9_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( index_buf_t_empty_n );
    sensitive << ( ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready );

    SC_METHOD(thread_Loop_LOOP_2_proc9_U0_result_buf_full_n);
    sensitive << ( result_buf_i_full_n );

    SC_METHOD(thread_Loop_LOOP_2_proc9_U0_start_full_n);

    SC_METHOD(thread_Loop_LOOP_2_proc9_U0_start_write);

    SC_METHOD(thread_Loop_LOOP_6_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_LOOP_6_proc_U0_ap_start);
    sensitive << ( result_buf_t_empty_n );

    SC_METHOD(thread_Loop_LOOP_6_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_LOOP_6_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_index_buf);
    sensitive << ( Loop_LOOP_1_proc10_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_result_buf);
    sensitive << ( Loop_LOOP_2_proc9_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_LOOP_6_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_LOOP_1_proc10_U0_ap_idle );
    sensitive << ( Loop_LOOP_2_proc9_U0_ap_idle );
    sensitive << ( Loop_LOOP_6_proc_U0_ap_idle );
    sensitive << ( index_buf_t_empty_n );
    sensitive << ( result_buf_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_Loop_LOOP_1_proc10_U0_ap_ready);
    sensitive << ( Loop_LOOP_1_proc10_U0_ap_ready );
    sensitive << ( ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready );

    SC_METHOD(thread_ap_sync_Loop_LOOP_2_proc9_U0_ap_ready);
    sensitive << ( Loop_LOOP_2_proc9_U0_ap_ready );
    sensitive << ( ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_LOOP_6_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_Loop_LOOP_1_proc10_U0_ap_ready );
    sensitive << ( ap_sync_Loop_LOOP_2_proc9_U0_ap_ready );

    SC_METHOD(thread_kernel_in_stream_TREADY);
    sensitive << ( Loop_LOOP_2_proc9_U0_kernel_in_stream_TREADY );

    SC_METHOD(thread_kernel_index_stream_TREADY);
    sensitive << ( Loop_LOOP_1_proc10_U0_kernel_index_stream_TREADY );

    SC_METHOD(thread_kernel_out_stream_TDATA);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TDATA );

    SC_METHOD(thread_kernel_out_stream_TDEST);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TDEST );

    SC_METHOD(thread_kernel_out_stream_TID);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TID );

    SC_METHOD(thread_kernel_out_stream_TKEEP);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TKEEP );

    SC_METHOD(thread_kernel_out_stream_TLAST);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TLAST );

    SC_METHOD(thread_kernel_out_stream_TSTRB);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TSTRB );

    SC_METHOD(thread_kernel_out_stream_TUSER);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TUSER );

    SC_METHOD(thread_kernel_out_stream_TVALID);
    sensitive << ( Loop_LOOP_6_proc_U0_kernel_out_stream_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready = SC_LOGIC_0;
    Loop_LOOP_1_proc10_U0_ap_ready_count = "00";
    ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready = SC_LOGIC_0;
    Loop_LOOP_2_proc9_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_matrix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, kernel_in_stream_TDATA, "(port)kernel_in_stream_TDATA");
    sc_trace(mVcdFile, kernel_in_stream_TKEEP, "(port)kernel_in_stream_TKEEP");
    sc_trace(mVcdFile, kernel_in_stream_TSTRB, "(port)kernel_in_stream_TSTRB");
    sc_trace(mVcdFile, kernel_in_stream_TUSER, "(port)kernel_in_stream_TUSER");
    sc_trace(mVcdFile, kernel_in_stream_TLAST, "(port)kernel_in_stream_TLAST");
    sc_trace(mVcdFile, kernel_in_stream_TID, "(port)kernel_in_stream_TID");
    sc_trace(mVcdFile, kernel_in_stream_TDEST, "(port)kernel_in_stream_TDEST");
    sc_trace(mVcdFile, kernel_index_stream_TDATA, "(port)kernel_index_stream_TDATA");
    sc_trace(mVcdFile, kernel_index_stream_TKEEP, "(port)kernel_index_stream_TKEEP");
    sc_trace(mVcdFile, kernel_index_stream_TSTRB, "(port)kernel_index_stream_TSTRB");
    sc_trace(mVcdFile, kernel_index_stream_TUSER, "(port)kernel_index_stream_TUSER");
    sc_trace(mVcdFile, kernel_index_stream_TLAST, "(port)kernel_index_stream_TLAST");
    sc_trace(mVcdFile, kernel_index_stream_TID, "(port)kernel_index_stream_TID");
    sc_trace(mVcdFile, kernel_index_stream_TDEST, "(port)kernel_index_stream_TDEST");
    sc_trace(mVcdFile, kernel_out_stream_TDATA, "(port)kernel_out_stream_TDATA");
    sc_trace(mVcdFile, kernel_out_stream_TKEEP, "(port)kernel_out_stream_TKEEP");
    sc_trace(mVcdFile, kernel_out_stream_TSTRB, "(port)kernel_out_stream_TSTRB");
    sc_trace(mVcdFile, kernel_out_stream_TUSER, "(port)kernel_out_stream_TUSER");
    sc_trace(mVcdFile, kernel_out_stream_TLAST, "(port)kernel_out_stream_TLAST");
    sc_trace(mVcdFile, kernel_out_stream_TID, "(port)kernel_out_stream_TID");
    sc_trace(mVcdFile, kernel_out_stream_TDEST, "(port)kernel_out_stream_TDEST");
    sc_trace(mVcdFile, kernel_index_stream_TVALID, "(port)kernel_index_stream_TVALID");
    sc_trace(mVcdFile, kernel_index_stream_TREADY, "(port)kernel_index_stream_TREADY");
    sc_trace(mVcdFile, kernel_in_stream_TVALID, "(port)kernel_in_stream_TVALID");
    sc_trace(mVcdFile, kernel_in_stream_TREADY, "(port)kernel_in_stream_TREADY");
    sc_trace(mVcdFile, kernel_out_stream_TVALID, "(port)kernel_out_stream_TVALID");
    sc_trace(mVcdFile, kernel_out_stream_TREADY, "(port)kernel_out_stream_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, length_x, "length_x");
    sc_trace(mVcdFile, tile_size, "tile_size");
    sc_trace(mVcdFile, remaining_size, "remaining_size");
    sc_trace(mVcdFile, index_buf_i_q0, "index_buf_i_q0");
    sc_trace(mVcdFile, index_buf_t_q0, "index_buf_t_q0");
    sc_trace(mVcdFile, result_buf_i_q0, "result_buf_i_q0");
    sc_trace(mVcdFile, result_buf_t_q0, "result_buf_t_q0");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_start, "Loop_LOOP_1_proc10_U0_ap_start");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_done, "Loop_LOOP_1_proc10_U0_ap_done");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_continue, "Loop_LOOP_1_proc10_U0_ap_continue");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_idle, "Loop_LOOP_1_proc10_U0_ap_idle");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_ready, "Loop_LOOP_1_proc10_U0_ap_ready");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_kernel_index_stream_TREADY, "Loop_LOOP_1_proc10_U0_kernel_index_stream_TREADY");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_index_buf_address0, "Loop_LOOP_1_proc10_U0_index_buf_address0");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_index_buf_ce0, "Loop_LOOP_1_proc10_U0_index_buf_ce0");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_index_buf_we0, "Loop_LOOP_1_proc10_U0_index_buf_we0");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_index_buf_d0, "Loop_LOOP_1_proc10_U0_index_buf_d0");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_length_x_out_din, "Loop_LOOP_1_proc10_U0_length_x_out_din");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_length_x_out_write, "Loop_LOOP_1_proc10_U0_length_x_out_write");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_tile_size_out_din, "Loop_LOOP_1_proc10_U0_tile_size_out_din");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_tile_size_out_write, "Loop_LOOP_1_proc10_U0_tile_size_out_write");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_remaining_size_out_din, "Loop_LOOP_1_proc10_U0_remaining_size_out_din");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_remaining_size_out_write, "Loop_LOOP_1_proc10_U0_remaining_size_out_write");
    sc_trace(mVcdFile, ap_channel_done_index_buf, "ap_channel_done_index_buf");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_index_buf_full_n, "Loop_LOOP_1_proc10_U0_index_buf_full_n");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_start, "Loop_LOOP_2_proc9_U0_ap_start");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_done, "Loop_LOOP_2_proc9_U0_ap_done");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_continue, "Loop_LOOP_2_proc9_U0_ap_continue");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_idle, "Loop_LOOP_2_proc9_U0_ap_idle");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_ready, "Loop_LOOP_2_proc9_U0_ap_ready");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_tile_size_read, "Loop_LOOP_2_proc9_U0_tile_size_read");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_remaining_size_read, "Loop_LOOP_2_proc9_U0_remaining_size_read");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_result_buf_address0, "Loop_LOOP_2_proc9_U0_result_buf_address0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_result_buf_ce0, "Loop_LOOP_2_proc9_U0_result_buf_ce0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_result_buf_we0, "Loop_LOOP_2_proc9_U0_result_buf_we0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_result_buf_d0, "Loop_LOOP_2_proc9_U0_result_buf_d0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_index_buf_address0, "Loop_LOOP_2_proc9_U0_index_buf_address0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_index_buf_ce0, "Loop_LOOP_2_proc9_U0_index_buf_ce0");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_kernel_in_stream_TREADY, "Loop_LOOP_2_proc9_U0_kernel_in_stream_TREADY");
    sc_trace(mVcdFile, ap_channel_done_result_buf, "ap_channel_done_result_buf");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_result_buf_full_n, "Loop_LOOP_2_proc9_U0_result_buf_full_n");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_ap_start, "Loop_LOOP_6_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_ap_done, "Loop_LOOP_6_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_ap_continue, "Loop_LOOP_6_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_ap_idle, "Loop_LOOP_6_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_ap_ready, "Loop_LOOP_6_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_length_x_read, "Loop_LOOP_6_proc_U0_length_x_read");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_result_buf_address0, "Loop_LOOP_6_proc_U0_result_buf_address0");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_result_buf_ce0, "Loop_LOOP_6_proc_U0_result_buf_ce0");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TDATA, "Loop_LOOP_6_proc_U0_kernel_out_stream_TDATA");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TVALID, "Loop_LOOP_6_proc_U0_kernel_out_stream_TVALID");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TKEEP, "Loop_LOOP_6_proc_U0_kernel_out_stream_TKEEP");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TSTRB, "Loop_LOOP_6_proc_U0_kernel_out_stream_TSTRB");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TUSER, "Loop_LOOP_6_proc_U0_kernel_out_stream_TUSER");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TLAST, "Loop_LOOP_6_proc_U0_kernel_out_stream_TLAST");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TID, "Loop_LOOP_6_proc_U0_kernel_out_stream_TID");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_kernel_out_stream_TDEST, "Loop_LOOP_6_proc_U0_kernel_out_stream_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, index_buf_i_full_n, "index_buf_i_full_n");
    sc_trace(mVcdFile, index_buf_t_empty_n, "index_buf_t_empty_n");
    sc_trace(mVcdFile, result_buf_i_full_n, "result_buf_i_full_n");
    sc_trace(mVcdFile, result_buf_t_empty_n, "result_buf_t_empty_n");
    sc_trace(mVcdFile, length_x_c_full_n, "length_x_c_full_n");
    sc_trace(mVcdFile, length_x_c_dout, "length_x_c_dout");
    sc_trace(mVcdFile, length_x_c_empty_n, "length_x_c_empty_n");
    sc_trace(mVcdFile, tile_size_c_full_n, "tile_size_c_full_n");
    sc_trace(mVcdFile, tile_size_c_dout, "tile_size_c_dout");
    sc_trace(mVcdFile, tile_size_c_empty_n, "tile_size_c_empty_n");
    sc_trace(mVcdFile, remaining_size_c_full_n, "remaining_size_c_full_n");
    sc_trace(mVcdFile, remaining_size_c_dout, "remaining_size_c_dout");
    sc_trace(mVcdFile, remaining_size_c_empty_n, "remaining_size_c_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready, "ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_Loop_LOOP_1_proc10_U0_ap_ready, "ap_sync_Loop_LOOP_1_proc10_U0_ap_ready");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_ap_ready_count, "Loop_LOOP_1_proc10_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready, "ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_Loop_LOOP_2_proc9_U0_ap_ready, "ap_sync_Loop_LOOP_2_proc9_U0_ap_ready");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_ap_ready_count, "Loop_LOOP_2_proc9_U0_ap_ready_count");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_start_full_n, "Loop_LOOP_1_proc10_U0_start_full_n");
    sc_trace(mVcdFile, Loop_LOOP_1_proc10_U0_start_write, "Loop_LOOP_1_proc10_U0_start_write");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_start_full_n, "Loop_LOOP_2_proc9_U0_start_full_n");
    sc_trace(mVcdFile, Loop_LOOP_2_proc9_U0_start_write, "Loop_LOOP_2_proc9_U0_start_write");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_start_full_n, "Loop_LOOP_6_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_LOOP_6_proc_U0_start_write, "Loop_LOOP_6_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("kernel_matrix.hdltvin.dat");
    mHdltvoutHandle.open("kernel_matrix.hdltvout.dat");
}

kernel_matrix::~kernel_matrix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel_matrix_CONTROL_BUS_s_axi_U;
    delete index_buf_U;
    delete result_buf_U;
    delete Loop_LOOP_1_proc10_U0;
    delete Loop_LOOP_2_proc9_U0;
    delete Loop_LOOP_6_proc_U0;
    delete length_x_c_U;
    delete tile_size_c_U;
    delete remaining_size_c_U;
}

void kernel_matrix::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel_matrix::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void kernel_matrix::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void kernel_matrix::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(Loop_LOOP_1_proc10_U0_ap_ready.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        Loop_LOOP_1_proc10_U0_ap_ready_count = (!Loop_LOOP_1_proc10_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_LOOP_1_proc10_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, Loop_LOOP_1_proc10_U0_ap_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        Loop_LOOP_1_proc10_U0_ap_ready_count = (!Loop_LOOP_1_proc10_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_LOOP_1_proc10_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(Loop_LOOP_2_proc9_U0_ap_ready.read(), ap_const_logic_0))) {
        Loop_LOOP_2_proc9_U0_ap_ready_count = (!Loop_LOOP_2_proc9_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_LOOP_2_proc9_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, Loop_LOOP_2_proc9_U0_ap_ready.read()))) {
        Loop_LOOP_2_proc9_U0_ap_ready_count = (!Loop_LOOP_2_proc9_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_LOOP_2_proc9_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready = ap_sync_Loop_LOOP_1_proc10_U0_ap_ready.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready = ap_sync_Loop_LOOP_2_proc9_U0_ap_ready.read();
        }
    }
}

void kernel_matrix::thread_Loop_LOOP_1_proc10_U0_ap_continue() {
    Loop_LOOP_1_proc10_U0_ap_continue = index_buf_i_full_n.read();
}

void kernel_matrix::thread_Loop_LOOP_1_proc10_U0_ap_start() {
    Loop_LOOP_1_proc10_U0_ap_start = (ap_start.read() & (ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void kernel_matrix::thread_Loop_LOOP_1_proc10_U0_index_buf_full_n() {
    Loop_LOOP_1_proc10_U0_index_buf_full_n = index_buf_i_full_n.read();
}

void kernel_matrix::thread_Loop_LOOP_1_proc10_U0_start_full_n() {
    Loop_LOOP_1_proc10_U0_start_full_n = ap_const_logic_1;
}

void kernel_matrix::thread_Loop_LOOP_1_proc10_U0_start_write() {
    Loop_LOOP_1_proc10_U0_start_write = ap_const_logic_0;
}

void kernel_matrix::thread_Loop_LOOP_2_proc9_U0_ap_continue() {
    Loop_LOOP_2_proc9_U0_ap_continue = result_buf_i_full_n.read();
}

void kernel_matrix::thread_Loop_LOOP_2_proc9_U0_ap_start() {
    Loop_LOOP_2_proc9_U0_ap_start = (ap_start.read() & index_buf_t_empty_n.read() & (ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void kernel_matrix::thread_Loop_LOOP_2_proc9_U0_result_buf_full_n() {
    Loop_LOOP_2_proc9_U0_result_buf_full_n = result_buf_i_full_n.read();
}

void kernel_matrix::thread_Loop_LOOP_2_proc9_U0_start_full_n() {
    Loop_LOOP_2_proc9_U0_start_full_n = ap_const_logic_1;
}

void kernel_matrix::thread_Loop_LOOP_2_proc9_U0_start_write() {
    Loop_LOOP_2_proc9_U0_start_write = ap_const_logic_0;
}

void kernel_matrix::thread_Loop_LOOP_6_proc_U0_ap_continue() {
    Loop_LOOP_6_proc_U0_ap_continue = ap_const_logic_1;
}

void kernel_matrix::thread_Loop_LOOP_6_proc_U0_ap_start() {
    Loop_LOOP_6_proc_U0_ap_start = result_buf_t_empty_n.read();
}

void kernel_matrix::thread_Loop_LOOP_6_proc_U0_start_full_n() {
    Loop_LOOP_6_proc_U0_start_full_n = ap_const_logic_1;
}

void kernel_matrix::thread_Loop_LOOP_6_proc_U0_start_write() {
    Loop_LOOP_6_proc_U0_start_write = ap_const_logic_0;
}

void kernel_matrix::thread_ap_channel_done_index_buf() {
    ap_channel_done_index_buf = Loop_LOOP_1_proc10_U0_ap_done.read();
}

void kernel_matrix::thread_ap_channel_done_result_buf() {
    ap_channel_done_result_buf = Loop_LOOP_2_proc9_U0_ap_done.read();
}

void kernel_matrix::thread_ap_done() {
    ap_done = Loop_LOOP_6_proc_U0_ap_done.read();
}

void kernel_matrix::thread_ap_idle() {
    ap_idle = (Loop_LOOP_1_proc10_U0_ap_idle.read() & Loop_LOOP_2_proc9_U0_ap_idle.read() & Loop_LOOP_6_proc_U0_ap_idle.read() & (index_buf_t_empty_n.read() ^ 
  ap_const_logic_1) & (result_buf_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void kernel_matrix::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void kernel_matrix::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void kernel_matrix::thread_ap_sync_Loop_LOOP_1_proc10_U0_ap_ready() {
    ap_sync_Loop_LOOP_1_proc10_U0_ap_ready = (Loop_LOOP_1_proc10_U0_ap_ready.read() | ap_sync_reg_Loop_LOOP_1_proc10_U0_ap_ready.read());
}

void kernel_matrix::thread_ap_sync_Loop_LOOP_2_proc9_U0_ap_ready() {
    ap_sync_Loop_LOOP_2_proc9_U0_ap_ready = (Loop_LOOP_2_proc9_U0_ap_ready.read() | ap_sync_reg_Loop_LOOP_2_proc9_U0_ap_ready.read());
}

void kernel_matrix::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void kernel_matrix::thread_ap_sync_done() {
    ap_sync_done = Loop_LOOP_6_proc_U0_ap_done.read();
}

void kernel_matrix::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_Loop_LOOP_1_proc10_U0_ap_ready.read() & ap_sync_Loop_LOOP_2_proc9_U0_ap_ready.read());
}

void kernel_matrix::thread_kernel_in_stream_TREADY() {
    kernel_in_stream_TREADY = Loop_LOOP_2_proc9_U0_kernel_in_stream_TREADY.read();
}

void kernel_matrix::thread_kernel_index_stream_TREADY() {
    kernel_index_stream_TREADY = Loop_LOOP_1_proc10_U0_kernel_index_stream_TREADY.read();
}

void kernel_matrix::thread_kernel_out_stream_TDATA() {
    kernel_out_stream_TDATA = Loop_LOOP_6_proc_U0_kernel_out_stream_TDATA.read();
}

void kernel_matrix::thread_kernel_out_stream_TDEST() {
    kernel_out_stream_TDEST = Loop_LOOP_6_proc_U0_kernel_out_stream_TDEST.read();
}

void kernel_matrix::thread_kernel_out_stream_TID() {
    kernel_out_stream_TID = Loop_LOOP_6_proc_U0_kernel_out_stream_TID.read();
}

void kernel_matrix::thread_kernel_out_stream_TKEEP() {
    kernel_out_stream_TKEEP = Loop_LOOP_6_proc_U0_kernel_out_stream_TKEEP.read();
}

void kernel_matrix::thread_kernel_out_stream_TLAST() {
    kernel_out_stream_TLAST = Loop_LOOP_6_proc_U0_kernel_out_stream_TLAST.read();
}

void kernel_matrix::thread_kernel_out_stream_TSTRB() {
    kernel_out_stream_TSTRB = Loop_LOOP_6_proc_U0_kernel_out_stream_TSTRB.read();
}

void kernel_matrix::thread_kernel_out_stream_TUSER() {
    kernel_out_stream_TUSER = Loop_LOOP_6_proc_U0_kernel_out_stream_TUSER.read();
}

void kernel_matrix::thread_kernel_out_stream_TVALID() {
    kernel_out_stream_TVALID = Loop_LOOP_6_proc_U0_kernel_out_stream_TVALID.read();
}

void kernel_matrix::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TDATA\" :  \"" << kernel_in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TKEEP\" :  \"" << kernel_in_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TSTRB\" :  \"" << kernel_in_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TUSER\" :  \"" << kernel_in_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TLAST\" :  \"" << kernel_in_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TID\" :  \"" << kernel_in_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TDEST\" :  \"" << kernel_in_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TDATA\" :  \"" << kernel_index_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TKEEP\" :  \"" << kernel_index_stream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TSTRB\" :  \"" << kernel_index_stream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TUSER\" :  \"" << kernel_index_stream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TLAST\" :  \"" << kernel_index_stream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TID\" :  \"" << kernel_index_stream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TDEST\" :  \"" << kernel_index_stream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TDATA\" :  \"" << kernel_out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TKEEP\" :  \"" << kernel_out_stream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TSTRB\" :  \"" << kernel_out_stream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TUSER\" :  \"" << kernel_out_stream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TLAST\" :  \"" << kernel_out_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TID\" :  \"" << kernel_out_stream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TDEST\" :  \"" << kernel_out_stream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_index_stream_TVALID\" :  \"" << kernel_index_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_index_stream_TREADY\" :  \"" << kernel_index_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_in_stream_TVALID\" :  \"" << kernel_in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_in_stream_TREADY\" :  \"" << kernel_in_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_out_stream_TVALID\" :  \"" << kernel_out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_out_stream_TREADY\" :  \"" << kernel_out_stream_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

