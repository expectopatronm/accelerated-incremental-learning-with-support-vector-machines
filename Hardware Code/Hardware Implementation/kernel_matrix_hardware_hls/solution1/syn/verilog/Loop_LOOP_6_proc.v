// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_LOOP_6_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        length_x_dout,
        length_x_empty_n,
        length_x_read,
        result_buf_address0,
        result_buf_ce0,
        result_buf_q0,
        kernel_out_stream_TDATA,
        kernel_out_stream_TVALID,
        kernel_out_stream_TREADY,
        kernel_out_stream_TKEEP,
        kernel_out_stream_TSTRB,
        kernel_out_stream_TUSER,
        kernel_out_stream_TLAST,
        kernel_out_stream_TID,
        kernel_out_stream_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] length_x_dout;
input   length_x_empty_n;
output   length_x_read;
output  [11:0] result_buf_address0;
output   result_buf_ce0;
input  [31:0] result_buf_q0;
output  [31:0] kernel_out_stream_TDATA;
output   kernel_out_stream_TVALID;
input   kernel_out_stream_TREADY;
output  [3:0] kernel_out_stream_TKEEP;
output  [3:0] kernel_out_stream_TSTRB;
output  [3:0] kernel_out_stream_TUSER;
output  [0:0] kernel_out_stream_TLAST;
output  [4:0] kernel_out_stream_TID;
output  [4:0] kernel_out_stream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg length_x_read;
reg result_buf_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] kernel_out_stream_data_V_1_data_out;
reg    kernel_out_stream_data_V_1_vld_in;
wire    kernel_out_stream_data_V_1_vld_out;
wire    kernel_out_stream_data_V_1_ack_in;
wire    kernel_out_stream_data_V_1_ack_out;
reg   [31:0] kernel_out_stream_data_V_1_payload_A;
reg   [31:0] kernel_out_stream_data_V_1_payload_B;
reg    kernel_out_stream_data_V_1_sel_rd;
reg    kernel_out_stream_data_V_1_sel_wr;
wire    kernel_out_stream_data_V_1_sel;
wire    kernel_out_stream_data_V_1_load_A;
wire    kernel_out_stream_data_V_1_load_B;
reg   [1:0] kernel_out_stream_data_V_1_state;
wire    kernel_out_stream_data_V_1_state_cmp_full;
wire   [3:0] kernel_out_stream_keep_V_1_data_out;
reg    kernel_out_stream_keep_V_1_vld_in;
wire    kernel_out_stream_keep_V_1_vld_out;
wire    kernel_out_stream_keep_V_1_ack_out;
reg    kernel_out_stream_keep_V_1_sel_rd;
wire    kernel_out_stream_keep_V_1_sel;
reg   [1:0] kernel_out_stream_keep_V_1_state;
wire   [3:0] kernel_out_stream_strb_V_1_data_out;
reg    kernel_out_stream_strb_V_1_vld_in;
wire    kernel_out_stream_strb_V_1_vld_out;
wire    kernel_out_stream_strb_V_1_ack_out;
reg    kernel_out_stream_strb_V_1_sel_rd;
wire    kernel_out_stream_strb_V_1_sel;
reg   [1:0] kernel_out_stream_strb_V_1_state;
wire   [3:0] kernel_out_stream_user_V_1_data_out;
reg    kernel_out_stream_user_V_1_vld_in;
wire    kernel_out_stream_user_V_1_vld_out;
wire    kernel_out_stream_user_V_1_ack_out;
reg    kernel_out_stream_user_V_1_sel_rd;
wire    kernel_out_stream_user_V_1_sel;
reg   [1:0] kernel_out_stream_user_V_1_state;
reg   [0:0] kernel_out_stream_last_V_1_data_out;
reg    kernel_out_stream_last_V_1_vld_in;
wire    kernel_out_stream_last_V_1_vld_out;
wire    kernel_out_stream_last_V_1_ack_in;
wire    kernel_out_stream_last_V_1_ack_out;
reg   [0:0] kernel_out_stream_last_V_1_payload_A;
reg   [0:0] kernel_out_stream_last_V_1_payload_B;
reg    kernel_out_stream_last_V_1_sel_rd;
reg    kernel_out_stream_last_V_1_sel_wr;
wire    kernel_out_stream_last_V_1_sel;
wire    kernel_out_stream_last_V_1_load_A;
wire    kernel_out_stream_last_V_1_load_B;
reg   [1:0] kernel_out_stream_last_V_1_state;
wire    kernel_out_stream_last_V_1_state_cmp_full;
wire   [4:0] kernel_out_stream_id_V_1_data_out;
reg    kernel_out_stream_id_V_1_vld_in;
wire    kernel_out_stream_id_V_1_vld_out;
wire    kernel_out_stream_id_V_1_ack_out;
reg    kernel_out_stream_id_V_1_sel_rd;
wire    kernel_out_stream_id_V_1_sel;
reg   [1:0] kernel_out_stream_id_V_1_state;
wire   [4:0] kernel_out_stream_dest_V_1_data_out;
reg    kernel_out_stream_dest_V_1_vld_in;
wire    kernel_out_stream_dest_V_1_vld_out;
wire    kernel_out_stream_dest_V_1_ack_in;
wire    kernel_out_stream_dest_V_1_ack_out;
reg    kernel_out_stream_dest_V_1_sel_rd;
wire    kernel_out_stream_dest_V_1_sel;
reg   [1:0] kernel_out_stream_dest_V_1_state;
reg    length_x_blk_n;
reg    kernel_out_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_166;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln64_reg_166_pp0_iter1_reg;
reg   [30:0] os_idx_0_i_reg_115;
reg   [31:0] length_x_read_reg_160;
reg    ap_block_state1;
wire   [0:0] icmp_ln64_fu_130_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] os_idx_fu_135_p2;
reg   [30:0] os_idx_reg_170;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln67_fu_150_p2;
reg   [0:0] icmp_ln67_reg_180;
wire   [31:0] bitcast_ln66_fu_155_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [30:0] ap_phi_mux_os_idx_0_i_phi_fu_119_p4;
wire   [63:0] zext_ln66_fu_141_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln64_fu_126_p1;
wire   [31:0] zext_ln67_fu_146_p1;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 kernel_out_stream_data_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_data_V_1_sel_wr = 1'b0;
#0 kernel_out_stream_data_V_1_state = 2'd0;
#0 kernel_out_stream_keep_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_keep_V_1_state = 2'd0;
#0 kernel_out_stream_strb_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_strb_V_1_state = 2'd0;
#0 kernel_out_stream_user_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_user_V_1_state = 2'd0;
#0 kernel_out_stream_last_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_last_V_1_sel_wr = 1'b0;
#0 kernel_out_stream_last_V_1_state = 2'd0;
#0 kernel_out_stream_id_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_id_V_1_state = 2'd0;
#0 kernel_out_stream_dest_V_1_sel_rd = 1'b0;
#0 kernel_out_stream_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((kernel_out_stream_dest_V_1_state == 2'd1) | (kernel_out_stream_id_V_1_state == 2'd1) | (kernel_out_stream_last_V_1_state == 2'd1) | (kernel_out_stream_user_V_1_state == 2'd1) | (kernel_out_stream_strb_V_1_state == 2'd1) | (kernel_out_stream_keep_V_1_state == 2'd1) | (kernel_out_stream_data_V_1_state == 2'd1) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_data_V_1_ack_out == 1'b1) & (kernel_out_stream_data_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_data_V_1_sel_rd <= ~kernel_out_stream_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((kernel_out_stream_data_V_1_ack_in == 1'b1) & (kernel_out_stream_data_V_1_vld_in == 1'b1))) begin
            kernel_out_stream_data_V_1_sel_wr <= ~kernel_out_stream_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_data_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_data_V_1_state == 2'd2) & (kernel_out_stream_data_V_1_vld_in == 1'b0)) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_data_V_1_vld_in == 1'b0) & (kernel_out_stream_data_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_data_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_data_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_data_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_data_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_data_V_1_vld_in == 1'b0) & (kernel_out_stream_data_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_data_V_1_vld_in == 1'b1)) & (kernel_out_stream_data_V_1_state == 2'd3)) | ((kernel_out_stream_data_V_1_state == 2'd1) & (kernel_out_stream_data_V_1_ack_out == 1'b1)) | ((kernel_out_stream_data_V_1_state == 2'd2) & (kernel_out_stream_data_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_data_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_dest_V_1_ack_out == 1'b1) & (kernel_out_stream_dest_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_dest_V_1_sel_rd <= ~kernel_out_stream_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_dest_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_dest_V_1_state == 2'd2) & (kernel_out_stream_dest_V_1_vld_in == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_dest_V_1_vld_in == 1'b0) & (kernel_out_stream_dest_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_dest_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_dest_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_dest_V_1_vld_in == 1'b0) & (kernel_out_stream_dest_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_dest_V_1_vld_in == 1'b1)) & (kernel_out_stream_dest_V_1_state == 2'd3)) | ((kernel_out_stream_dest_V_1_state == 2'd1) & (kernel_out_stream_dest_V_1_ack_out == 1'b1)) | ((kernel_out_stream_dest_V_1_state == 2'd2) & (kernel_out_stream_dest_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_dest_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_id_V_1_ack_out == 1'b1) & (kernel_out_stream_id_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_id_V_1_sel_rd <= ~kernel_out_stream_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_id_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_id_V_1_state == 2'd2) & (kernel_out_stream_id_V_1_vld_in == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_id_V_1_vld_in == 1'b0) & (kernel_out_stream_id_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_id_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_id_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_id_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_id_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_id_V_1_vld_in == 1'b0) & (kernel_out_stream_id_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_id_V_1_vld_in == 1'b1)) & (kernel_out_stream_id_V_1_state == 2'd3)) | ((kernel_out_stream_id_V_1_state == 2'd1) & (kernel_out_stream_id_V_1_ack_out == 1'b1)) | ((kernel_out_stream_id_V_1_state == 2'd2) & (kernel_out_stream_id_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_id_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_keep_V_1_ack_out == 1'b1) & (kernel_out_stream_keep_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_keep_V_1_sel_rd <= ~kernel_out_stream_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_keep_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_keep_V_1_state == 2'd2) & (kernel_out_stream_keep_V_1_vld_in == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_keep_V_1_vld_in == 1'b0) & (kernel_out_stream_keep_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_keep_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_keep_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_keep_V_1_vld_in == 1'b0) & (kernel_out_stream_keep_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_keep_V_1_vld_in == 1'b1)) & (kernel_out_stream_keep_V_1_state == 2'd3)) | ((kernel_out_stream_keep_V_1_state == 2'd1) & (kernel_out_stream_keep_V_1_ack_out == 1'b1)) | ((kernel_out_stream_keep_V_1_state == 2'd2) & (kernel_out_stream_keep_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_keep_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_last_V_1_ack_out == 1'b1) & (kernel_out_stream_last_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_last_V_1_sel_rd <= ~kernel_out_stream_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((kernel_out_stream_last_V_1_ack_in == 1'b1) & (kernel_out_stream_last_V_1_vld_in == 1'b1))) begin
            kernel_out_stream_last_V_1_sel_wr <= ~kernel_out_stream_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_last_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_last_V_1_state == 2'd2) & (kernel_out_stream_last_V_1_vld_in == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_last_V_1_vld_in == 1'b0) & (kernel_out_stream_last_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_last_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_last_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_last_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_last_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_last_V_1_vld_in == 1'b0) & (kernel_out_stream_last_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_last_V_1_vld_in == 1'b1)) & (kernel_out_stream_last_V_1_state == 2'd3)) | ((kernel_out_stream_last_V_1_state == 2'd1) & (kernel_out_stream_last_V_1_ack_out == 1'b1)) | ((kernel_out_stream_last_V_1_state == 2'd2) & (kernel_out_stream_last_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_last_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_strb_V_1_ack_out == 1'b1) & (kernel_out_stream_strb_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_strb_V_1_sel_rd <= ~kernel_out_stream_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_strb_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_strb_V_1_state == 2'd2) & (kernel_out_stream_strb_V_1_vld_in == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_strb_V_1_vld_in == 1'b0) & (kernel_out_stream_strb_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_strb_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_strb_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_strb_V_1_vld_in == 1'b0) & (kernel_out_stream_strb_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_strb_V_1_vld_in == 1'b1)) & (kernel_out_stream_strb_V_1_state == 2'd3)) | ((kernel_out_stream_strb_V_1_state == 2'd1) & (kernel_out_stream_strb_V_1_ack_out == 1'b1)) | ((kernel_out_stream_strb_V_1_state == 2'd2) & (kernel_out_stream_strb_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_strb_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((kernel_out_stream_user_V_1_ack_out == 1'b1) & (kernel_out_stream_user_V_1_vld_out == 1'b1))) begin
            kernel_out_stream_user_V_1_sel_rd <= ~kernel_out_stream_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        kernel_out_stream_user_V_1_state <= 2'd0;
    end else begin
        if ((((kernel_out_stream_user_V_1_state == 2'd2) & (kernel_out_stream_user_V_1_vld_in == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_user_V_1_vld_in == 1'b0) & (kernel_out_stream_user_V_1_ack_out == 1'b1)))) begin
            kernel_out_stream_user_V_1_state <= 2'd2;
        end else if ((((kernel_out_stream_user_V_1_state == 2'd1) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_user_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_user_V_1_state <= 2'd1;
        end else if (((~((kernel_out_stream_user_V_1_vld_in == 1'b0) & (kernel_out_stream_user_V_1_ack_out == 1'b1)) & ~((kernel_out_stream_TREADY == 1'b0) & (kernel_out_stream_user_V_1_vld_in == 1'b1)) & (kernel_out_stream_user_V_1_state == 2'd3)) | ((kernel_out_stream_user_V_1_state == 2'd1) & (kernel_out_stream_user_V_1_ack_out == 1'b1)) | ((kernel_out_stream_user_V_1_state == 2'd2) & (kernel_out_stream_user_V_1_vld_in == 1'b1)))) begin
            kernel_out_stream_user_V_1_state <= 2'd3;
        end else begin
            kernel_out_stream_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        os_idx_0_i_reg_115 <= 31'd0;
    end else if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        os_idx_0_i_reg_115 <= os_idx_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_166 <= icmp_ln64_fu_130_p2;
        icmp_ln64_reg_166_pp0_iter1_reg <= icmp_ln64_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln67_reg_180 <= icmp_ln67_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_data_V_1_load_A == 1'b1)) begin
        kernel_out_stream_data_V_1_payload_A <= bitcast_ln66_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_data_V_1_load_B == 1'b1)) begin
        kernel_out_stream_data_V_1_payload_B <= bitcast_ln66_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_last_V_1_load_A == 1'b1)) begin
        kernel_out_stream_last_V_1_payload_A <= icmp_ln67_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((kernel_out_stream_last_V_1_load_B == 1'b1)) begin
        kernel_out_stream_last_V_1_payload_B <= icmp_ln67_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_x_read_reg_160 <= length_x_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        os_idx_reg_170 <= os_idx_fu_135_p2;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_130_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((kernel_out_stream_dest_V_1_state == 2'd1) | (kernel_out_stream_id_V_1_state == 2'd1) | (kernel_out_stream_last_V_1_state == 2'd1) | (kernel_out_stream_user_V_1_state == 2'd1) | (kernel_out_stream_strb_V_1_state == 2'd1) | (kernel_out_stream_keep_V_1_state == 2'd1) | (kernel_out_stream_data_V_1_state == 2'd1) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_os_idx_0_i_phi_fu_119_p4 = os_idx_reg_170;
    end else begin
        ap_phi_mux_os_idx_0_i_phi_fu_119_p4 = os_idx_0_i_reg_115;
    end
end

always @ (*) begin
    if ((~((kernel_out_stream_dest_V_1_state == 2'd1) | (kernel_out_stream_id_V_1_state == 2'd1) | (kernel_out_stream_last_V_1_state == 2'd1) | (kernel_out_stream_user_V_1_state == 2'd1) | (kernel_out_stream_strb_V_1_state == 2'd1) | (kernel_out_stream_keep_V_1_state == 2'd1) | (kernel_out_stream_data_V_1_state == 2'd1) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln64_reg_166_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        kernel_out_stream_TDATA_blk_n = kernel_out_stream_data_V_1_state[1'd1];
    end else begin
        kernel_out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((kernel_out_stream_data_V_1_sel == 1'b1)) begin
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_B;
    end else begin
        kernel_out_stream_data_V_1_data_out = kernel_out_stream_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_data_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_dest_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_id_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_keep_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((kernel_out_stream_last_V_1_sel == 1'b1)) begin
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_B;
    end else begin
        kernel_out_stream_last_V_1_data_out = kernel_out_stream_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_last_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_strb_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_166 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_out_stream_user_V_1_vld_in = 1'b1;
    end else begin
        kernel_out_stream_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_x_blk_n = length_x_empty_n;
    end else begin
        length_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        length_x_read = 1'b1;
    end else begin
        length_x_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        result_buf_ce0 = 1'b1;
    end else begin
        result_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln64_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln64_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((kernel_out_stream_dest_V_1_state == 2'd1) | (kernel_out_stream_id_V_1_state == 2'd1) | (kernel_out_stream_last_V_1_state == 2'd1) | (kernel_out_stream_user_V_1_state == 2'd1) | (kernel_out_stream_strb_V_1_state == 2'd1) | (kernel_out_stream_keep_V_1_state == 2'd1) | (kernel_out_stream_data_V_1_state == 2'd1) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (length_x_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln64_reg_166 == 1'd1) & (kernel_out_stream_dest_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln64_reg_166_pp0_iter1_reg == 1'd1) & (kernel_out_stream_dest_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((kernel_out_stream_dest_V_1_state == 2'd1) | (kernel_out_stream_id_V_1_state == 2'd1) | (kernel_out_stream_last_V_1_state == 2'd1) | (kernel_out_stream_user_V_1_state == 2'd1) | (kernel_out_stream_strb_V_1_state == 2'd1) | (kernel_out_stream_keep_V_1_state == 2'd1) | (kernel_out_stream_data_V_1_state == 2'd1) | ((kernel_out_stream_data_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_dest_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_id_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_last_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_user_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_strb_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)) | ((kernel_out_stream_keep_V_1_state == 2'd3) & (kernel_out_stream_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln66_fu_155_p1 = result_buf_q0;

assign icmp_ln64_fu_130_p2 = (($signed(zext_ln64_fu_126_p1) < $signed(length_x_read_reg_160)) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_150_p2 = ((zext_ln67_fu_146_p1 == length_x_read_reg_160) ? 1'b1 : 1'b0);

assign kernel_out_stream_TDATA = kernel_out_stream_data_V_1_data_out;

assign kernel_out_stream_TDEST = kernel_out_stream_dest_V_1_data_out;

assign kernel_out_stream_TID = kernel_out_stream_id_V_1_data_out;

assign kernel_out_stream_TKEEP = kernel_out_stream_keep_V_1_data_out;

assign kernel_out_stream_TLAST = kernel_out_stream_last_V_1_data_out;

assign kernel_out_stream_TSTRB = kernel_out_stream_strb_V_1_data_out;

assign kernel_out_stream_TUSER = kernel_out_stream_user_V_1_data_out;

assign kernel_out_stream_TVALID = kernel_out_stream_dest_V_1_state[1'd0];

assign kernel_out_stream_data_V_1_ack_in = kernel_out_stream_data_V_1_state[1'd1];

assign kernel_out_stream_data_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_data_V_1_load_A = (kernel_out_stream_data_V_1_state_cmp_full & ~kernel_out_stream_data_V_1_sel_wr);

assign kernel_out_stream_data_V_1_load_B = (kernel_out_stream_data_V_1_state_cmp_full & kernel_out_stream_data_V_1_sel_wr);

assign kernel_out_stream_data_V_1_sel = kernel_out_stream_data_V_1_sel_rd;

assign kernel_out_stream_data_V_1_state_cmp_full = ((kernel_out_stream_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_out_stream_data_V_1_vld_out = kernel_out_stream_data_V_1_state[1'd0];

assign kernel_out_stream_dest_V_1_ack_in = kernel_out_stream_dest_V_1_state[1'd1];

assign kernel_out_stream_dest_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_dest_V_1_data_out = 5'd0;

assign kernel_out_stream_dest_V_1_sel = kernel_out_stream_dest_V_1_sel_rd;

assign kernel_out_stream_dest_V_1_vld_out = kernel_out_stream_dest_V_1_state[1'd0];

assign kernel_out_stream_id_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_id_V_1_data_out = 5'd0;

assign kernel_out_stream_id_V_1_sel = kernel_out_stream_id_V_1_sel_rd;

assign kernel_out_stream_id_V_1_vld_out = kernel_out_stream_id_V_1_state[1'd0];

assign kernel_out_stream_keep_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_keep_V_1_data_out = 4'd15;

assign kernel_out_stream_keep_V_1_sel = kernel_out_stream_keep_V_1_sel_rd;

assign kernel_out_stream_keep_V_1_vld_out = kernel_out_stream_keep_V_1_state[1'd0];

assign kernel_out_stream_last_V_1_ack_in = kernel_out_stream_last_V_1_state[1'd1];

assign kernel_out_stream_last_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_last_V_1_load_A = (kernel_out_stream_last_V_1_state_cmp_full & ~kernel_out_stream_last_V_1_sel_wr);

assign kernel_out_stream_last_V_1_load_B = (kernel_out_stream_last_V_1_state_cmp_full & kernel_out_stream_last_V_1_sel_wr);

assign kernel_out_stream_last_V_1_sel = kernel_out_stream_last_V_1_sel_rd;

assign kernel_out_stream_last_V_1_state_cmp_full = ((kernel_out_stream_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign kernel_out_stream_last_V_1_vld_out = kernel_out_stream_last_V_1_state[1'd0];

assign kernel_out_stream_strb_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_strb_V_1_data_out = 4'd15;

assign kernel_out_stream_strb_V_1_sel = kernel_out_stream_strb_V_1_sel_rd;

assign kernel_out_stream_strb_V_1_vld_out = kernel_out_stream_strb_V_1_state[1'd0];

assign kernel_out_stream_user_V_1_ack_out = kernel_out_stream_TREADY;

assign kernel_out_stream_user_V_1_data_out = 4'd0;

assign kernel_out_stream_user_V_1_sel = kernel_out_stream_user_V_1_sel_rd;

assign kernel_out_stream_user_V_1_vld_out = kernel_out_stream_user_V_1_state[1'd0];

assign os_idx_fu_135_p2 = (ap_phi_mux_os_idx_0_i_phi_fu_119_p4 + 31'd1);

assign result_buf_address0 = zext_ln66_fu_141_p1;

assign zext_ln64_fu_126_p1 = ap_phi_mux_os_idx_0_i_phi_fu_119_p4;

assign zext_ln66_fu_141_p1 = ap_phi_mux_os_idx_0_i_phi_fu_119_p4;

assign zext_ln67_fu_146_p1 = os_idx_fu_135_p2;

endmodule //Loop_LOOP_6_proc
